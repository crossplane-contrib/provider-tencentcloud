//go:build !ignore_autogenerated

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BackupConfig) DeepCopyInto(out *BackupConfig) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BackupConfig.
func (in *BackupConfig) DeepCopy() *BackupConfig {
	if in == nil {
		return nil
	}
	out := new(BackupConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *BackupConfig) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BackupConfigInitParameters) DeepCopyInto(out *BackupConfigInitParameters) {
	*out = *in
	if in.BackupPeriod != nil {
		in, out := &in.BackupPeriod, &out.BackupPeriod
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.BackupTime != nil {
		in, out := &in.BackupTime, &out.BackupTime
		*out = new(string)
		**out = **in
	}
	if in.RedisID != nil {
		in, out := &in.RedisID, &out.RedisID
		*out = new(string)
		**out = **in
	}
	if in.RedisIDRef != nil {
		in, out := &in.RedisIDRef, &out.RedisIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.RedisIDSelector != nil {
		in, out := &in.RedisIDSelector, &out.RedisIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BackupConfigInitParameters.
func (in *BackupConfigInitParameters) DeepCopy() *BackupConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(BackupConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BackupConfigList) DeepCopyInto(out *BackupConfigList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]BackupConfig, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BackupConfigList.
func (in *BackupConfigList) DeepCopy() *BackupConfigList {
	if in == nil {
		return nil
	}
	out := new(BackupConfigList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *BackupConfigList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BackupConfigObservation) DeepCopyInto(out *BackupConfigObservation) {
	*out = *in
	if in.BackupPeriod != nil {
		in, out := &in.BackupPeriod, &out.BackupPeriod
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.BackupTime != nil {
		in, out := &in.BackupTime, &out.BackupTime
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.RedisID != nil {
		in, out := &in.RedisID, &out.RedisID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BackupConfigObservation.
func (in *BackupConfigObservation) DeepCopy() *BackupConfigObservation {
	if in == nil {
		return nil
	}
	out := new(BackupConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BackupConfigParameters) DeepCopyInto(out *BackupConfigParameters) {
	*out = *in
	if in.BackupPeriod != nil {
		in, out := &in.BackupPeriod, &out.BackupPeriod
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.BackupTime != nil {
		in, out := &in.BackupTime, &out.BackupTime
		*out = new(string)
		**out = **in
	}
	if in.RedisID != nil {
		in, out := &in.RedisID, &out.RedisID
		*out = new(string)
		**out = **in
	}
	if in.RedisIDRef != nil {
		in, out := &in.RedisIDRef, &out.RedisIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.RedisIDSelector != nil {
		in, out := &in.RedisIDSelector, &out.RedisIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BackupConfigParameters.
func (in *BackupConfigParameters) DeepCopy() *BackupConfigParameters {
	if in == nil {
		return nil
	}
	out := new(BackupConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BackupConfigSpec) DeepCopyInto(out *BackupConfigSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BackupConfigSpec.
func (in *BackupConfigSpec) DeepCopy() *BackupConfigSpec {
	if in == nil {
		return nil
	}
	out := new(BackupConfigSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BackupConfigStatus) DeepCopyInto(out *BackupConfigStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BackupConfigStatus.
func (in *BackupConfigStatus) DeepCopy() *BackupConfigStatus {
	if in == nil {
		return nil
	}
	out := new(BackupConfigStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Instance) DeepCopyInto(out *Instance) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Instance.
func (in *Instance) DeepCopy() *Instance {
	if in == nil {
		return nil
	}
	out := new(Instance)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Instance) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceInitParameters) DeepCopyInto(out *InstanceInitParameters) {
	*out = *in
	if in.AutoRenewFlag != nil {
		in, out := &in.AutoRenewFlag, &out.AutoRenewFlag
		*out = new(float64)
		**out = **in
	}
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.ChargeType != nil {
		in, out := &in.ChargeType, &out.ChargeType
		*out = new(string)
		**out = **in
	}
	if in.ForceDelete != nil {
		in, out := &in.ForceDelete, &out.ForceDelete
		*out = new(bool)
		**out = **in
	}
	if in.IP != nil {
		in, out := &in.IP, &out.IP
		*out = new(string)
		**out = **in
	}
	if in.MemSize != nil {
		in, out := &in.MemSize, &out.MemSize
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NoAuth != nil {
		in, out := &in.NoAuth, &out.NoAuth
		*out = new(bool)
		**out = **in
	}
	if in.OperationNetwork != nil {
		in, out := &in.OperationNetwork, &out.OperationNetwork
		*out = new(string)
		**out = **in
	}
	if in.ParamsTemplateID != nil {
		in, out := &in.ParamsTemplateID, &out.ParamsTemplateID
		*out = new(string)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.PrepaidPeriod != nil {
		in, out := &in.PrepaidPeriod, &out.PrepaidPeriod
		*out = new(float64)
		**out = **in
	}
	if in.ProductVersion != nil {
		in, out := &in.ProductVersion, &out.ProductVersion
		*out = new(string)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(float64)
		**out = **in
	}
	if in.Recycle != nil {
		in, out := &in.Recycle, &out.Recycle
		*out = new(float64)
		**out = **in
	}
	if in.RedisClusterID != nil {
		in, out := &in.RedisClusterID, &out.RedisClusterID
		*out = new(string)
		**out = **in
	}
	if in.RedisReplicasNum != nil {
		in, out := &in.RedisReplicasNum, &out.RedisReplicasNum
		*out = new(float64)
		**out = **in
	}
	if in.RedisShardNum != nil {
		in, out := &in.RedisShardNum, &out.RedisShardNum
		*out = new(float64)
		**out = **in
	}
	if in.ReplicaZoneIds != nil {
		in, out := &in.ReplicaZoneIds, &out.ReplicaZoneIds
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.ReplicasReadOnly != nil {
		in, out := &in.ReplicasReadOnly, &out.ReplicasReadOnly
		*out = new(bool)
		**out = **in
	}
	if in.SecurityGroups != nil {
		in, out := &in.SecurityGroups, &out.SecurityGroups
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.TypeID != nil {
		in, out := &in.TypeID, &out.TypeID
		*out = new(float64)
		**out = **in
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
	if in.WaitSwitch != nil {
		in, out := &in.WaitSwitch, &out.WaitSwitch
		*out = new(float64)
		**out = **in
	}
	if in.WanAddressSwitch != nil {
		in, out := &in.WanAddressSwitch, &out.WanAddressSwitch
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceInitParameters.
func (in *InstanceInitParameters) DeepCopy() *InstanceInitParameters {
	if in == nil {
		return nil
	}
	out := new(InstanceInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceList) DeepCopyInto(out *InstanceList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Instance, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceList.
func (in *InstanceList) DeepCopy() *InstanceList {
	if in == nil {
		return nil
	}
	out := new(InstanceList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *InstanceList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceObservation) DeepCopyInto(out *InstanceObservation) {
	*out = *in
	if in.AutoRenewFlag != nil {
		in, out := &in.AutoRenewFlag, &out.AutoRenewFlag
		*out = new(float64)
		**out = **in
	}
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.ChargeType != nil {
		in, out := &in.ChargeType, &out.ChargeType
		*out = new(string)
		**out = **in
	}
	if in.CreateTime != nil {
		in, out := &in.CreateTime, &out.CreateTime
		*out = new(string)
		**out = **in
	}
	if in.DedicatedClusterID != nil {
		in, out := &in.DedicatedClusterID, &out.DedicatedClusterID
		*out = new(string)
		**out = **in
	}
	if in.ForceDelete != nil {
		in, out := &in.ForceDelete, &out.ForceDelete
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IP != nil {
		in, out := &in.IP, &out.IP
		*out = new(string)
		**out = **in
	}
	if in.MemSize != nil {
		in, out := &in.MemSize, &out.MemSize
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NoAuth != nil {
		in, out := &in.NoAuth, &out.NoAuth
		*out = new(bool)
		**out = **in
	}
	if in.NodeInfo != nil {
		in, out := &in.NodeInfo, &out.NodeInfo
		*out = make([]NodeInfoObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.OperationNetwork != nil {
		in, out := &in.OperationNetwork, &out.OperationNetwork
		*out = new(string)
		**out = **in
	}
	if in.ParamsTemplateID != nil {
		in, out := &in.ParamsTemplateID, &out.ParamsTemplateID
		*out = new(string)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.PrepaidPeriod != nil {
		in, out := &in.PrepaidPeriod, &out.PrepaidPeriod
		*out = new(float64)
		**out = **in
	}
	if in.ProductVersion != nil {
		in, out := &in.ProductVersion, &out.ProductVersion
		*out = new(string)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(float64)
		**out = **in
	}
	if in.Recycle != nil {
		in, out := &in.Recycle, &out.Recycle
		*out = new(float64)
		**out = **in
	}
	if in.RedisClusterID != nil {
		in, out := &in.RedisClusterID, &out.RedisClusterID
		*out = new(string)
		**out = **in
	}
	if in.RedisReplicasNum != nil {
		in, out := &in.RedisReplicasNum, &out.RedisReplicasNum
		*out = new(float64)
		**out = **in
	}
	if in.RedisShardNum != nil {
		in, out := &in.RedisShardNum, &out.RedisShardNum
		*out = new(float64)
		**out = **in
	}
	if in.ReplicaZoneIds != nil {
		in, out := &in.ReplicaZoneIds, &out.ReplicaZoneIds
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.ReplicasReadOnly != nil {
		in, out := &in.ReplicasReadOnly, &out.ReplicasReadOnly
		*out = new(bool)
		**out = **in
	}
	if in.SecurityGroups != nil {
		in, out := &in.SecurityGroups, &out.SecurityGroups
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.TypeID != nil {
		in, out := &in.TypeID, &out.TypeID
		*out = new(float64)
		**out = **in
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
	if in.WaitSwitch != nil {
		in, out := &in.WaitSwitch, &out.WaitSwitch
		*out = new(float64)
		**out = **in
	}
	if in.WanAddress != nil {
		in, out := &in.WanAddress, &out.WanAddress
		*out = new(string)
		**out = **in
	}
	if in.WanAddressSwitch != nil {
		in, out := &in.WanAddressSwitch, &out.WanAddressSwitch
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceObservation.
func (in *InstanceObservation) DeepCopy() *InstanceObservation {
	if in == nil {
		return nil
	}
	out := new(InstanceObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceParameters) DeepCopyInto(out *InstanceParameters) {
	*out = *in
	if in.AutoRenewFlag != nil {
		in, out := &in.AutoRenewFlag, &out.AutoRenewFlag
		*out = new(float64)
		**out = **in
	}
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.ChargeType != nil {
		in, out := &in.ChargeType, &out.ChargeType
		*out = new(string)
		**out = **in
	}
	if in.ForceDelete != nil {
		in, out := &in.ForceDelete, &out.ForceDelete
		*out = new(bool)
		**out = **in
	}
	if in.IP != nil {
		in, out := &in.IP, &out.IP
		*out = new(string)
		**out = **in
	}
	if in.MemSize != nil {
		in, out := &in.MemSize, &out.MemSize
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NoAuth != nil {
		in, out := &in.NoAuth, &out.NoAuth
		*out = new(bool)
		**out = **in
	}
	if in.OperationNetwork != nil {
		in, out := &in.OperationNetwork, &out.OperationNetwork
		*out = new(string)
		**out = **in
	}
	if in.ParamsTemplateID != nil {
		in, out := &in.ParamsTemplateID, &out.ParamsTemplateID
		*out = new(string)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.PrepaidPeriod != nil {
		in, out := &in.PrepaidPeriod, &out.PrepaidPeriod
		*out = new(float64)
		**out = **in
	}
	if in.ProductVersion != nil {
		in, out := &in.ProductVersion, &out.ProductVersion
		*out = new(string)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(float64)
		**out = **in
	}
	if in.Recycle != nil {
		in, out := &in.Recycle, &out.Recycle
		*out = new(float64)
		**out = **in
	}
	if in.RedisClusterID != nil {
		in, out := &in.RedisClusterID, &out.RedisClusterID
		*out = new(string)
		**out = **in
	}
	if in.RedisReplicasNum != nil {
		in, out := &in.RedisReplicasNum, &out.RedisReplicasNum
		*out = new(float64)
		**out = **in
	}
	if in.RedisShardNum != nil {
		in, out := &in.RedisShardNum, &out.RedisShardNum
		*out = new(float64)
		**out = **in
	}
	if in.ReplicaZoneIds != nil {
		in, out := &in.ReplicaZoneIds, &out.ReplicaZoneIds
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.ReplicasReadOnly != nil {
		in, out := &in.ReplicasReadOnly, &out.ReplicasReadOnly
		*out = new(bool)
		**out = **in
	}
	if in.SecurityGroups != nil {
		in, out := &in.SecurityGroups, &out.SecurityGroups
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.TypeID != nil {
		in, out := &in.TypeID, &out.TypeID
		*out = new(float64)
		**out = **in
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
	if in.WaitSwitch != nil {
		in, out := &in.WaitSwitch, &out.WaitSwitch
		*out = new(float64)
		**out = **in
	}
	if in.WanAddressSwitch != nil {
		in, out := &in.WanAddressSwitch, &out.WanAddressSwitch
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceParameters.
func (in *InstanceParameters) DeepCopy() *InstanceParameters {
	if in == nil {
		return nil
	}
	out := new(InstanceParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceSpec) DeepCopyInto(out *InstanceSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceSpec.
func (in *InstanceSpec) DeepCopy() *InstanceSpec {
	if in == nil {
		return nil
	}
	out := new(InstanceSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceStatus) DeepCopyInto(out *InstanceStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceStatus.
func (in *InstanceStatus) DeepCopy() *InstanceStatus {
	if in == nil {
		return nil
	}
	out := new(InstanceStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeInfoInitParameters) DeepCopyInto(out *NodeInfoInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeInfoInitParameters.
func (in *NodeInfoInitParameters) DeepCopy() *NodeInfoInitParameters {
	if in == nil {
		return nil
	}
	out := new(NodeInfoInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeInfoObservation) DeepCopyInto(out *NodeInfoObservation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(float64)
		**out = **in
	}
	if in.Master != nil {
		in, out := &in.Master, &out.Master
		*out = new(bool)
		**out = **in
	}
	if in.ZoneID != nil {
		in, out := &in.ZoneID, &out.ZoneID
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeInfoObservation.
func (in *NodeInfoObservation) DeepCopy() *NodeInfoObservation {
	if in == nil {
		return nil
	}
	out := new(NodeInfoObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeInfoParameters) DeepCopyInto(out *NodeInfoParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeInfoParameters.
func (in *NodeInfoParameters) DeepCopy() *NodeInfoParameters {
	if in == nil {
		return nil
	}
	out := new(NodeInfoParameters)
	in.DeepCopyInto(out)
	return out
}
