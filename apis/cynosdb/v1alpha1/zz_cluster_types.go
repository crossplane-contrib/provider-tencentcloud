/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClusterInitParameters struct {

	// Specify whether the cluster can auto-pause while db_mode is SERVERLESS. Values: yes (default), no.
	// Specify whether the cluster can auto-pause while `db_mode` is `SERVERLESS`. Values: `yes` (default), `no`.
	AutoPause *string `json:"autoPause,omitempty" tf:"auto_pause,omitempty"`

	// Specify auto-pause delay in second while db_mode is SERVERLESS. Value range: [600, 691200]. Default: 600.
	// Specify auto-pause delay in second while `db_mode` is `SERVERLESS`. Value range: `[600, 691200]`. Default: `600`.
	AutoPauseDelay *float64 `json:"autoPauseDelay,omitempty" tf:"auto_pause_delay,omitempty"`

	// Auto renew flag. Valid values are 0(MANUAL_RENEW), 1(AUTO_RENEW). Default value is 0. Only works for PREPAID cluster.
	// Auto renew flag. Valid values are `0`(MANUAL_RENEW), `1`(AUTO_RENEW). Default value is `0`. Only works for PREPAID cluster.
	AutoRenewFlag *float64 `json:"autoRenewFlag,omitempty" tf:"auto_renew_flag,omitempty"`

	// The available zone of the CynosDB Cluster.
	// The available zone of the CynosDB Cluster.
	AvailableZone *string `json:"availableZone,omitempty" tf:"available_zone,omitempty"`

	// The charge type of instance. Valid values are PREPAID and POSTPAID_BY_HOUR. Default value is POSTPAID_BY_HOUR.
	// The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. Default value is `POSTPAID_BY_HOUR`.
	ChargeType *string `json:"chargeType,omitempty" tf:"charge_type,omitempty"`

	// Name of CynosDB cluster.
	// Name of CynosDB cluster.
	ClusterName *string `json:"clusterName,omitempty" tf:"cluster_name,omitempty"`

	// Kernel version, you can enter it when modifying.
	// Kernel version, you can enter it when modifying.
	CynosVersion *string `json:"cynosVersion,omitempty" tf:"cynos_version,omitempty"`

	// Specify DB mode, only available when db_type is MYSQL. Values: NORMAL (Default), SERVERLESS.
	// Specify DB mode, only available when `db_type` is `MYSQL`. Values: `NORMAL` (Default), `SERVERLESS`.
	DBMode *string `json:"dbMode,omitempty" tf:"db_mode,omitempty"`

	// Type of CynosDB, and available values include MYSQL.
	// Type of CynosDB, and available values include `MYSQL`.
	DBType *string `json:"dbType,omitempty" tf:"db_type,omitempty"`

	// Version of CynosDB, which is related to db_type. For MYSQL, available value is 5.7, 8.0.
	// Version of CynosDB, which is related to `db_type`. For `MYSQL`, available value is `5.7`, `8.0`.
	DBVersion *string `json:"dbVersion,omitempty" tf:"db_version,omitempty"`

	// Indicate whether to delete cluster instance directly or not. Default is false. If set true, the cluster and its All RELATED INSTANCES will be deleted instead of staying recycle bin. Note: works for both PREPAID and POSTPAID_BY_HOUR cluster.
	// Indicate whether to delete cluster instance directly or not. Default is false. If set true, the cluster and its `All RELATED INSTANCES` will be deleted instead of staying recycle bin. Note: works for both `PREPAID` and `POSTPAID_BY_HOUR` cluster.
	ForceDelete *bool `json:"forceDelete,omitempty" tf:"force_delete,omitempty"`

	// The number of CPU cores of read-write type instance in the CynosDB cluster. Required while creating normal cluster. Note: modification of this field will take effect immediately, if want to upgrade on maintenance window, please upgrade from console.
	// The number of CPU cores of read-write type instance in the CynosDB cluster. Required while creating normal cluster. Note: modification of this field will take effect immediately, if want to upgrade on maintenance window, please upgrade from console.
	InstanceCPUCore *float64 `json:"instanceCpuCore,omitempty" tf:"instance_cpu_core,omitempty"`

	// Instance initialization configuration information, mainly used to select instances of different specifications when purchasing a cluster.
	// Instance initialization configuration information, mainly used to select instances of different specifications when purchasing a cluster.
	InstanceInitInfos []InstanceInitInfosInitParameters `json:"instanceInitInfos,omitempty" tf:"instance_init_infos,omitempty"`

	// Duration time for maintenance, unit in second. 3600 by default.
	// Duration time for maintenance, unit in second. `3600` by default.
	InstanceMaintainDuration *float64 `json:"instanceMaintainDuration,omitempty" tf:"instance_maintain_duration,omitempty"`

	// Offset time from 00:00, unit in second. For example, 03:00am should be 10800. 10800 by default.
	// Offset time from 00:00, unit in second. For example, 03:00am should be `10800`. `10800` by default.
	InstanceMaintainStartTime *float64 `json:"instanceMaintainStartTime,omitempty" tf:"instance_maintain_start_time,omitempty"`

	// Weekdays for maintenance. ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"] by default.
	// Weekdays for maintenance. `["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]` by default.
	// +listType=set
	InstanceMaintainWeekdays []*string `json:"instanceMaintainWeekdays,omitempty" tf:"instance_maintain_weekdays,omitempty"`

	// Memory capacity of read-write type instance, unit in GB. Required while creating normal cluster. Note: modification of this field will take effect immediately, if want to upgrade on maintenance window, please upgrade from console.
	// Memory capacity of read-write type instance, unit in GB. Required while creating normal cluster. Note: modification of this field will take effect immediately, if want to upgrade on maintenance window, please upgrade from console.
	InstanceMemorySize *float64 `json:"instanceMemorySize,omitempty" tf:"instance_memory_size,omitempty"`

	// Maximum CPU core count, required while db_mode is SERVERLESS, request DescribeServerlessInstanceSpecs for more reference.
	// Maximum CPU core count, required while `db_mode` is `SERVERLESS`, request DescribeServerlessInstanceSpecs for more reference.
	MaxCPU *float64 `json:"maxCpu,omitempty" tf:"max_cpu,omitempty"`

	// Minimum CPU core count, required while db_mode is SERVERLESS, request DescribeServerlessInstanceSpecs for more reference.
	// Minimum CPU core count, required while `db_mode` is `SERVERLESS`, request DescribeServerlessInstanceSpecs for more reference.
	MinCPU *float64 `json:"minCpu,omitempty" tf:"min_cpu,omitempty"`

	// Recycling time of the old address, must be filled in when modifying the vpcRecycling time of the old address, must be filled in when modifying the vpc.
	// Recycling time of the old address, must be filled in when modifying the vpcRecycling time of the old address, must be filled in when modifying the vpc.
	OldIPReserveHours *float64 `json:"oldIpReserveHours,omitempty" tf:"old_ip_reserve_hours,omitempty"`

	// Specify parameter list of database. It is valid when param_template_id is set in create cluster. Use data.tencentcloud_mysql_default_params to query available parameter details.
	// Specify parameter list of database. It is valid when `param_template_id` is set in create cluster. Use `data.tencentcloud_mysql_default_params` to query available parameter details.
	ParamItems []ParamItemsInitParameters `json:"paramItems,omitempty" tf:"param_items,omitempty"`

	// The ID of the parameter template.
	// The ID of the parameter template.
	ParamTemplateID *float64 `json:"paramTemplateId,omitempty" tf:"param_template_id,omitempty"`

	// Port of CynosDB cluster.
	// Port of CynosDB cluster.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// It will be deprecated. Use param_template_id instead. The ID of the parameter template.
	// The ID of the parameter template.
	PrarmTemplateID *float64 `json:"prarmTemplateId,omitempty" tf:"prarm_template_id,omitempty"`

	// The tenancy (time unit is month) of the prepaid instance. Valid values are 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 24, 36. NOTE: it only works when charge_type is set to PREPAID.
	// The tenancy (time unit is month) of the prepaid instance. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`. NOTE: it only works when charge_type is set to `PREPAID`.
	PrepaidPeriod *float64 `json:"prepaidPeriod,omitempty" tf:"prepaid_period,omitempty"`

	// ID of the project. 0 by default.
	// ID of the project. `0` by default.
	ProjectID *float64 `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// IDs of security group for ro_group.
	// IDs of security group for `ro_group`.
	RoGroupSg []*string `json:"roGroupSg,omitempty" tf:"ro_group_sg,omitempty"`

	// IDs of security group for rw_group.
	// IDs of security group for `rw_group`.
	RwGroupSg []*string `json:"rwGroupSg,omitempty" tf:"rw_group_sg,omitempty"`

	// Specify whether to pause or resume serverless cluster. values: resume, pause.
	// Specify whether to pause or resume serverless cluster. values: `resume`, `pause`.
	ServerlessStatusFlag *string `json:"serverlessStatusFlag,omitempty" tf:"serverless_status_flag,omitempty"`

	// Multi zone Addresses of the CynosDB Cluster.
	// Multi zone Addresses of the CynosDB Cluster.
	SlaveZone *string `json:"slaveZone,omitempty" tf:"slave_zone,omitempty"`

	// Storage limit of CynosDB cluster instance, unit in GB. The maximum storage of a non-serverless instance in GB. NOTE: If db_type is MYSQL and charge_type is PREPAID, the value cannot exceed the maximum storage corresponding to the CPU and memory specifications, and the transaction mode is order and pay. when charge_type is POSTPAID_BY_HOUR, this argument is unnecessary.
	// Storage limit of CynosDB cluster instance, unit in GB. The maximum storage of a non-serverless instance in GB. NOTE: If db_type is `MYSQL` and charge_type is `PREPAID`, the value cannot exceed the maximum storage corresponding to the CPU and memory specifications, and the transaction mode is `order and pay`. when charge_type is `POSTPAID_BY_HOUR`, this argument is unnecessary.
	StorageLimit *float64 `json:"storageLimit,omitempty" tf:"storage_limit,omitempty"`

	// Cluster storage billing mode, pay-as-you-go: 0-yearly/monthly: 1-The default is pay-as-you-go. When the DbType is MYSQL, when the cluster computing billing mode is post-paid (including DbMode is SERVERLESS), the storage billing mode can only be billing by volume; rollback and cloning do not support yearly subscriptions monthly storage.
	// Cluster storage billing mode, pay-as-you-go: `0`-yearly/monthly: `1`-The default is pay-as-you-go. When the DbType is MYSQL, when the cluster computing billing mode is post-paid (including DbMode is SERVERLESS), the storage billing mode can only be billing by volume; rollback and cloning do not support yearly subscriptions monthly storage.
	StoragePayMode *float64 `json:"storagePayMode,omitempty" tf:"storage_pay_mode,omitempty"`

	// ID of the subnet within this VPC.
	// ID of the subnet within this VPC.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-tencentcloud/apis/vpc/v1alpha1.Subnet
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`

	// The tags of the CynosDB cluster.
	// The tags of the CynosDB cluster.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// ID of the VPC.
	// ID of the VPC.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-tencentcloud/apis/vpc/v1alpha1.VPC
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// Reference to a VPC in vpc to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDRef *v1.Reference `json:"vpcIdRef,omitempty" tf:"-"`

	// Selector for a VPC in vpc to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDSelector *v1.Selector `json:"vpcIdSelector,omitempty" tf:"-"`
}

type ClusterObservation struct {

	// Specify whether the cluster can auto-pause while db_mode is SERVERLESS. Values: yes (default), no.
	// Specify whether the cluster can auto-pause while `db_mode` is `SERVERLESS`. Values: `yes` (default), `no`.
	AutoPause *string `json:"autoPause,omitempty" tf:"auto_pause,omitempty"`

	// Specify auto-pause delay in second while db_mode is SERVERLESS. Value range: [600, 691200]. Default: 600.
	// Specify auto-pause delay in second while `db_mode` is `SERVERLESS`. Value range: `[600, 691200]`. Default: `600`.
	AutoPauseDelay *float64 `json:"autoPauseDelay,omitempty" tf:"auto_pause_delay,omitempty"`

	// Auto renew flag. Valid values are 0(MANUAL_RENEW), 1(AUTO_RENEW). Default value is 0. Only works for PREPAID cluster.
	// Auto renew flag. Valid values are `0`(MANUAL_RENEW), `1`(AUTO_RENEW). Default value is `0`. Only works for PREPAID cluster.
	AutoRenewFlag *float64 `json:"autoRenewFlag,omitempty" tf:"auto_renew_flag,omitempty"`

	// The available zone of the CynosDB Cluster.
	// The available zone of the CynosDB Cluster.
	AvailableZone *string `json:"availableZone,omitempty" tf:"available_zone,omitempty"`

	// The charge type of instance. Valid values are PREPAID and POSTPAID_BY_HOUR. Default value is POSTPAID_BY_HOUR.
	// The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. Default value is `POSTPAID_BY_HOUR`.
	ChargeType *string `json:"chargeType,omitempty" tf:"charge_type,omitempty"`

	// Charset used by CynosDB cluster.
	// Charset used by CynosDB cluster.
	Charset *string `json:"charset,omitempty" tf:"charset,omitempty"`

	// Name of CynosDB cluster.
	// Name of CynosDB cluster.
	ClusterName *string `json:"clusterName,omitempty" tf:"cluster_name,omitempty"`

	// Status of the Cynosdb cluster.
	// Status of the Cynosdb cluster.
	ClusterStatus *string `json:"clusterStatus,omitempty" tf:"cluster_status,omitempty"`

	// Creation time of the CynosDB cluster.
	// Creation time of the CynosDB cluster.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// Kernel version, you can enter it when modifying.
	// Kernel version, you can enter it when modifying.
	CynosVersion *string `json:"cynosVersion,omitempty" tf:"cynos_version,omitempty"`

	// Specify DB mode, only available when db_type is MYSQL. Values: NORMAL (Default), SERVERLESS.
	// Specify DB mode, only available when `db_type` is `MYSQL`. Values: `NORMAL` (Default), `SERVERLESS`.
	DBMode *string `json:"dbMode,omitempty" tf:"db_mode,omitempty"`

	// Type of CynosDB, and available values include MYSQL.
	// Type of CynosDB, and available values include `MYSQL`.
	DBType *string `json:"dbType,omitempty" tf:"db_type,omitempty"`

	// Version of CynosDB, which is related to db_type. For MYSQL, available value is 5.7, 8.0.
	// Version of CynosDB, which is related to `db_type`. For `MYSQL`, available value is `5.7`, `8.0`.
	DBVersion *string `json:"dbVersion,omitempty" tf:"db_version,omitempty"`

	// Indicate whether to delete cluster instance directly or not. Default is false. If set true, the cluster and its All RELATED INSTANCES will be deleted instead of staying recycle bin. Note: works for both PREPAID and POSTPAID_BY_HOUR cluster.
	// Indicate whether to delete cluster instance directly or not. Default is false. If set true, the cluster and its `All RELATED INSTANCES` will be deleted instead of staying recycle bin. Note: works for both `PREPAID` and `POSTPAID_BY_HOUR` cluster.
	ForceDelete *bool `json:"forceDelete,omitempty" tf:"force_delete,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The number of CPU cores of read-write type instance in the CynosDB cluster. Required while creating normal cluster. Note: modification of this field will take effect immediately, if want to upgrade on maintenance window, please upgrade from console.
	// The number of CPU cores of read-write type instance in the CynosDB cluster. Required while creating normal cluster. Note: modification of this field will take effect immediately, if want to upgrade on maintenance window, please upgrade from console.
	InstanceCPUCore *float64 `json:"instanceCpuCore,omitempty" tf:"instance_cpu_core,omitempty"`

	// ID of instance.
	// ID of instance.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Instance initialization configuration information, mainly used to select instances of different specifications when purchasing a cluster.
	// Instance initialization configuration information, mainly used to select instances of different specifications when purchasing a cluster.
	InstanceInitInfos []InstanceInitInfosObservation `json:"instanceInitInfos,omitempty" tf:"instance_init_infos,omitempty"`

	// Duration time for maintenance, unit in second. 3600 by default.
	// Duration time for maintenance, unit in second. `3600` by default.
	InstanceMaintainDuration *float64 `json:"instanceMaintainDuration,omitempty" tf:"instance_maintain_duration,omitempty"`

	// Offset time from 00:00, unit in second. For example, 03:00am should be 10800. 10800 by default.
	// Offset time from 00:00, unit in second. For example, 03:00am should be `10800`. `10800` by default.
	InstanceMaintainStartTime *float64 `json:"instanceMaintainStartTime,omitempty" tf:"instance_maintain_start_time,omitempty"`

	// Weekdays for maintenance. ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"] by default.
	// Weekdays for maintenance. `["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]` by default.
	// +listType=set
	InstanceMaintainWeekdays []*string `json:"instanceMaintainWeekdays,omitempty" tf:"instance_maintain_weekdays,omitempty"`

	// Memory capacity of read-write type instance, unit in GB. Required while creating normal cluster. Note: modification of this field will take effect immediately, if want to upgrade on maintenance window, please upgrade from console.
	// Memory capacity of read-write type instance, unit in GB. Required while creating normal cluster. Note: modification of this field will take effect immediately, if want to upgrade on maintenance window, please upgrade from console.
	InstanceMemorySize *float64 `json:"instanceMemorySize,omitempty" tf:"instance_memory_size,omitempty"`

	// Name of instance.
	// Name of instance.
	InstanceName *string `json:"instanceName,omitempty" tf:"instance_name,omitempty"`

	// Status of the instance.
	// Status of the instance.
	InstanceStatus *string `json:"instanceStatus,omitempty" tf:"instance_status,omitempty"`

	// Storage size of the instance, unit in GB.
	// Storage size of the instance, unit in GB.
	InstanceStorageSize *float64 `json:"instanceStorageSize,omitempty" tf:"instance_storage_size,omitempty"`

	// Maximum CPU core count, required while db_mode is SERVERLESS, request DescribeServerlessInstanceSpecs for more reference.
	// Maximum CPU core count, required while `db_mode` is `SERVERLESS`, request DescribeServerlessInstanceSpecs for more reference.
	MaxCPU *float64 `json:"maxCpu,omitempty" tf:"max_cpu,omitempty"`

	// Minimum CPU core count, required while db_mode is SERVERLESS, request DescribeServerlessInstanceSpecs for more reference.
	// Minimum CPU core count, required while `db_mode` is `SERVERLESS`, request DescribeServerlessInstanceSpecs for more reference.
	MinCPU *float64 `json:"minCpu,omitempty" tf:"min_cpu,omitempty"`

	// Recycling time of the old address, must be filled in when modifying the vpcRecycling time of the old address, must be filled in when modifying the vpc.
	// Recycling time of the old address, must be filled in when modifying the vpcRecycling time of the old address, must be filled in when modifying the vpc.
	OldIPReserveHours *float64 `json:"oldIpReserveHours,omitempty" tf:"old_ip_reserve_hours,omitempty"`

	// Specify parameter list of database. It is valid when param_template_id is set in create cluster. Use data.tencentcloud_mysql_default_params to query available parameter details.
	// Specify parameter list of database. It is valid when `param_template_id` is set in create cluster. Use `data.tencentcloud_mysql_default_params` to query available parameter details.
	ParamItems []ParamItemsObservation `json:"paramItems,omitempty" tf:"param_items,omitempty"`

	// The ID of the parameter template.
	// The ID of the parameter template.
	ParamTemplateID *float64 `json:"paramTemplateId,omitempty" tf:"param_template_id,omitempty"`

	// Port of CynosDB cluster.
	// Port of CynosDB cluster.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// It will be deprecated. Use param_template_id instead. The ID of the parameter template.
	// The ID of the parameter template.
	PrarmTemplateID *float64 `json:"prarmTemplateId,omitempty" tf:"prarm_template_id,omitempty"`

	// The tenancy (time unit is month) of the prepaid instance. Valid values are 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 24, 36. NOTE: it only works when charge_type is set to PREPAID.
	// The tenancy (time unit is month) of the prepaid instance. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`. NOTE: it only works when charge_type is set to `PREPAID`.
	PrepaidPeriod *float64 `json:"prepaidPeriod,omitempty" tf:"prepaid_period,omitempty"`

	// ID of the project. 0 by default.
	// ID of the project. `0` by default.
	ProjectID *float64 `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Readonly addresses. Each element contains the following attributes:
	// Readonly addresses. Each element contains the following attributes:
	RoGroupAddr []RoGroupAddrObservation `json:"roGroupAddr,omitempty" tf:"ro_group_addr,omitempty"`

	// ID of read-only instance group.
	// ID of read-only instance group.
	RoGroupID *string `json:"roGroupId,omitempty" tf:"ro_group_id,omitempty"`

	// List of instances in the read-only instance group.
	// List of instances in the read-only instance group.
	RoGroupInstances []RoGroupInstancesObservation `json:"roGroupInstances,omitempty" tf:"ro_group_instances,omitempty"`

	// IDs of security group for ro_group.
	// IDs of security group for `ro_group`.
	RoGroupSg []*string `json:"roGroupSg,omitempty" tf:"ro_group_sg,omitempty"`

	// Read-write addresses. Each element contains the following attributes:
	// Read-write addresses. Each element contains the following attributes:
	RwGroupAddr []RwGroupAddrObservation `json:"rwGroupAddr,omitempty" tf:"rw_group_addr,omitempty"`

	// ID of read-write instance group.
	// ID of read-write instance group.
	RwGroupID *string `json:"rwGroupId,omitempty" tf:"rw_group_id,omitempty"`

	// List of instances in the read-write instance group.
	// List of instances in the read-write instance group.
	RwGroupInstances []RwGroupInstancesObservation `json:"rwGroupInstances,omitempty" tf:"rw_group_instances,omitempty"`

	// IDs of security group for rw_group.
	// IDs of security group for `rw_group`.
	RwGroupSg []*string `json:"rwGroupSg,omitempty" tf:"rw_group_sg,omitempty"`

	// Serverless cluster status. NOTE: This is a readonly attribute, to modify, please set serverless_status_flag.
	// Serverless cluster status. NOTE: This is a readonly attribute, to modify, please set `serverless_status_flag`.
	ServerlessStatus *string `json:"serverlessStatus,omitempty" tf:"serverless_status,omitempty"`

	// Specify whether to pause or resume serverless cluster. values: resume, pause.
	// Specify whether to pause or resume serverless cluster. values: `resume`, `pause`.
	ServerlessStatusFlag *string `json:"serverlessStatusFlag,omitempty" tf:"serverless_status_flag,omitempty"`

	// Multi zone Addresses of the CynosDB Cluster.
	// Multi zone Addresses of the CynosDB Cluster.
	SlaveZone *string `json:"slaveZone,omitempty" tf:"slave_zone,omitempty"`

	// Storage limit of CynosDB cluster instance, unit in GB. The maximum storage of a non-serverless instance in GB. NOTE: If db_type is MYSQL and charge_type is PREPAID, the value cannot exceed the maximum storage corresponding to the CPU and memory specifications, and the transaction mode is order and pay. when charge_type is POSTPAID_BY_HOUR, this argument is unnecessary.
	// Storage limit of CynosDB cluster instance, unit in GB. The maximum storage of a non-serverless instance in GB. NOTE: If db_type is `MYSQL` and charge_type is `PREPAID`, the value cannot exceed the maximum storage corresponding to the CPU and memory specifications, and the transaction mode is `order and pay`. when charge_type is `POSTPAID_BY_HOUR`, this argument is unnecessary.
	StorageLimit *float64 `json:"storageLimit,omitempty" tf:"storage_limit,omitempty"`

	// Cluster storage billing mode, pay-as-you-go: 0-yearly/monthly: 1-The default is pay-as-you-go. When the DbType is MYSQL, when the cluster computing billing mode is post-paid (including DbMode is SERVERLESS), the storage billing mode can only be billing by volume; rollback and cloning do not support yearly subscriptions monthly storage.
	// Cluster storage billing mode, pay-as-you-go: `0`-yearly/monthly: `1`-The default is pay-as-you-go. When the DbType is MYSQL, when the cluster computing billing mode is post-paid (including DbMode is SERVERLESS), the storage billing mode can only be billing by volume; rollback and cloning do not support yearly subscriptions monthly storage.
	StoragePayMode *float64 `json:"storagePayMode,omitempty" tf:"storage_pay_mode,omitempty"`

	// Used storage of CynosDB cluster, unit in MB.
	// Used storage of CynosDB cluster, unit in MB.
	StorageUsed *float64 `json:"storageUsed,omitempty" tf:"storage_used,omitempty"`

	// ID of the subnet within this VPC.
	// ID of the subnet within this VPC.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// The tags of the CynosDB cluster.
	// The tags of the CynosDB cluster.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// ID of the VPC.
	// ID of the VPC.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type ClusterParameters struct {

	// Specify whether the cluster can auto-pause while db_mode is SERVERLESS. Values: yes (default), no.
	// Specify whether the cluster can auto-pause while `db_mode` is `SERVERLESS`. Values: `yes` (default), `no`.
	// +kubebuilder:validation:Optional
	AutoPause *string `json:"autoPause,omitempty" tf:"auto_pause,omitempty"`

	// Specify auto-pause delay in second while db_mode is SERVERLESS. Value range: [600, 691200]. Default: 600.
	// Specify auto-pause delay in second while `db_mode` is `SERVERLESS`. Value range: `[600, 691200]`. Default: `600`.
	// +kubebuilder:validation:Optional
	AutoPauseDelay *float64 `json:"autoPauseDelay,omitempty" tf:"auto_pause_delay,omitempty"`

	// Auto renew flag. Valid values are 0(MANUAL_RENEW), 1(AUTO_RENEW). Default value is 0. Only works for PREPAID cluster.
	// Auto renew flag. Valid values are `0`(MANUAL_RENEW), `1`(AUTO_RENEW). Default value is `0`. Only works for PREPAID cluster.
	// +kubebuilder:validation:Optional
	AutoRenewFlag *float64 `json:"autoRenewFlag,omitempty" tf:"auto_renew_flag,omitempty"`

	// The available zone of the CynosDB Cluster.
	// The available zone of the CynosDB Cluster.
	// +kubebuilder:validation:Optional
	AvailableZone *string `json:"availableZone,omitempty" tf:"available_zone,omitempty"`

	// The charge type of instance. Valid values are PREPAID and POSTPAID_BY_HOUR. Default value is POSTPAID_BY_HOUR.
	// The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. Default value is `POSTPAID_BY_HOUR`.
	// +kubebuilder:validation:Optional
	ChargeType *string `json:"chargeType,omitempty" tf:"charge_type,omitempty"`

	// Name of CynosDB cluster.
	// Name of CynosDB cluster.
	// +kubebuilder:validation:Optional
	ClusterName *string `json:"clusterName,omitempty" tf:"cluster_name,omitempty"`

	// Kernel version, you can enter it when modifying.
	// Kernel version, you can enter it when modifying.
	// +kubebuilder:validation:Optional
	CynosVersion *string `json:"cynosVersion,omitempty" tf:"cynos_version,omitempty"`

	// Specify DB mode, only available when db_type is MYSQL. Values: NORMAL (Default), SERVERLESS.
	// Specify DB mode, only available when `db_type` is `MYSQL`. Values: `NORMAL` (Default), `SERVERLESS`.
	// +kubebuilder:validation:Optional
	DBMode *string `json:"dbMode,omitempty" tf:"db_mode,omitempty"`

	// Type of CynosDB, and available values include MYSQL.
	// Type of CynosDB, and available values include `MYSQL`.
	// +kubebuilder:validation:Optional
	DBType *string `json:"dbType,omitempty" tf:"db_type,omitempty"`

	// Version of CynosDB, which is related to db_type. For MYSQL, available value is 5.7, 8.0.
	// Version of CynosDB, which is related to `db_type`. For `MYSQL`, available value is `5.7`, `8.0`.
	// +kubebuilder:validation:Optional
	DBVersion *string `json:"dbVersion,omitempty" tf:"db_version,omitempty"`

	// Indicate whether to delete cluster instance directly or not. Default is false. If set true, the cluster and its All RELATED INSTANCES will be deleted instead of staying recycle bin. Note: works for both PREPAID and POSTPAID_BY_HOUR cluster.
	// Indicate whether to delete cluster instance directly or not. Default is false. If set true, the cluster and its `All RELATED INSTANCES` will be deleted instead of staying recycle bin. Note: works for both `PREPAID` and `POSTPAID_BY_HOUR` cluster.
	// +kubebuilder:validation:Optional
	ForceDelete *bool `json:"forceDelete,omitempty" tf:"force_delete,omitempty"`

	// The number of CPU cores of read-write type instance in the CynosDB cluster. Required while creating normal cluster. Note: modification of this field will take effect immediately, if want to upgrade on maintenance window, please upgrade from console.
	// The number of CPU cores of read-write type instance in the CynosDB cluster. Required while creating normal cluster. Note: modification of this field will take effect immediately, if want to upgrade on maintenance window, please upgrade from console.
	// +kubebuilder:validation:Optional
	InstanceCPUCore *float64 `json:"instanceCpuCore,omitempty" tf:"instance_cpu_core,omitempty"`

	// Instance initialization configuration information, mainly used to select instances of different specifications when purchasing a cluster.
	// Instance initialization configuration information, mainly used to select instances of different specifications when purchasing a cluster.
	// +kubebuilder:validation:Optional
	InstanceInitInfos []InstanceInitInfosParameters `json:"instanceInitInfos,omitempty" tf:"instance_init_infos,omitempty"`

	// Duration time for maintenance, unit in second. 3600 by default.
	// Duration time for maintenance, unit in second. `3600` by default.
	// +kubebuilder:validation:Optional
	InstanceMaintainDuration *float64 `json:"instanceMaintainDuration,omitempty" tf:"instance_maintain_duration,omitempty"`

	// Offset time from 00:00, unit in second. For example, 03:00am should be 10800. 10800 by default.
	// Offset time from 00:00, unit in second. For example, 03:00am should be `10800`. `10800` by default.
	// +kubebuilder:validation:Optional
	InstanceMaintainStartTime *float64 `json:"instanceMaintainStartTime,omitempty" tf:"instance_maintain_start_time,omitempty"`

	// Weekdays for maintenance. ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"] by default.
	// Weekdays for maintenance. `["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]` by default.
	// +kubebuilder:validation:Optional
	// +listType=set
	InstanceMaintainWeekdays []*string `json:"instanceMaintainWeekdays,omitempty" tf:"instance_maintain_weekdays,omitempty"`

	// Memory capacity of read-write type instance, unit in GB. Required while creating normal cluster. Note: modification of this field will take effect immediately, if want to upgrade on maintenance window, please upgrade from console.
	// Memory capacity of read-write type instance, unit in GB. Required while creating normal cluster. Note: modification of this field will take effect immediately, if want to upgrade on maintenance window, please upgrade from console.
	// +kubebuilder:validation:Optional
	InstanceMemorySize *float64 `json:"instanceMemorySize,omitempty" tf:"instance_memory_size,omitempty"`

	// Maximum CPU core count, required while db_mode is SERVERLESS, request DescribeServerlessInstanceSpecs for more reference.
	// Maximum CPU core count, required while `db_mode` is `SERVERLESS`, request DescribeServerlessInstanceSpecs for more reference.
	// +kubebuilder:validation:Optional
	MaxCPU *float64 `json:"maxCpu,omitempty" tf:"max_cpu,omitempty"`

	// Minimum CPU core count, required while db_mode is SERVERLESS, request DescribeServerlessInstanceSpecs for more reference.
	// Minimum CPU core count, required while `db_mode` is `SERVERLESS`, request DescribeServerlessInstanceSpecs for more reference.
	// +kubebuilder:validation:Optional
	MinCPU *float64 `json:"minCpu,omitempty" tf:"min_cpu,omitempty"`

	// Recycling time of the old address, must be filled in when modifying the vpcRecycling time of the old address, must be filled in when modifying the vpc.
	// Recycling time of the old address, must be filled in when modifying the vpcRecycling time of the old address, must be filled in when modifying the vpc.
	// +kubebuilder:validation:Optional
	OldIPReserveHours *float64 `json:"oldIpReserveHours,omitempty" tf:"old_ip_reserve_hours,omitempty"`

	// Specify parameter list of database. It is valid when param_template_id is set in create cluster. Use data.tencentcloud_mysql_default_params to query available parameter details.
	// Specify parameter list of database. It is valid when `param_template_id` is set in create cluster. Use `data.tencentcloud_mysql_default_params` to query available parameter details.
	// +kubebuilder:validation:Optional
	ParamItems []ParamItemsParameters `json:"paramItems,omitempty" tf:"param_items,omitempty"`

	// The ID of the parameter template.
	// The ID of the parameter template.
	// +kubebuilder:validation:Optional
	ParamTemplateID *float64 `json:"paramTemplateId,omitempty" tf:"param_template_id,omitempty"`

	// Password of root account.
	// Password of `root` account.
	// +kubebuilder:validation:Optional
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// Port of CynosDB cluster.
	// Port of CynosDB cluster.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// It will be deprecated. Use param_template_id instead. The ID of the parameter template.
	// The ID of the parameter template.
	// +kubebuilder:validation:Optional
	PrarmTemplateID *float64 `json:"prarmTemplateId,omitempty" tf:"prarm_template_id,omitempty"`

	// The tenancy (time unit is month) of the prepaid instance. Valid values are 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 24, 36. NOTE: it only works when charge_type is set to PREPAID.
	// The tenancy (time unit is month) of the prepaid instance. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`. NOTE: it only works when charge_type is set to `PREPAID`.
	// +kubebuilder:validation:Optional
	PrepaidPeriod *float64 `json:"prepaidPeriod,omitempty" tf:"prepaid_period,omitempty"`

	// ID of the project. 0 by default.
	// ID of the project. `0` by default.
	// +kubebuilder:validation:Optional
	ProjectID *float64 `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// IDs of security group for ro_group.
	// IDs of security group for `ro_group`.
	// +kubebuilder:validation:Optional
	RoGroupSg []*string `json:"roGroupSg,omitempty" tf:"ro_group_sg,omitempty"`

	// IDs of security group for rw_group.
	// IDs of security group for `rw_group`.
	// +kubebuilder:validation:Optional
	RwGroupSg []*string `json:"rwGroupSg,omitempty" tf:"rw_group_sg,omitempty"`

	// Specify whether to pause or resume serverless cluster. values: resume, pause.
	// Specify whether to pause or resume serverless cluster. values: `resume`, `pause`.
	// +kubebuilder:validation:Optional
	ServerlessStatusFlag *string `json:"serverlessStatusFlag,omitempty" tf:"serverless_status_flag,omitempty"`

	// Multi zone Addresses of the CynosDB Cluster.
	// Multi zone Addresses of the CynosDB Cluster.
	// +kubebuilder:validation:Optional
	SlaveZone *string `json:"slaveZone,omitempty" tf:"slave_zone,omitempty"`

	// Storage limit of CynosDB cluster instance, unit in GB. The maximum storage of a non-serverless instance in GB. NOTE: If db_type is MYSQL and charge_type is PREPAID, the value cannot exceed the maximum storage corresponding to the CPU and memory specifications, and the transaction mode is order and pay. when charge_type is POSTPAID_BY_HOUR, this argument is unnecessary.
	// Storage limit of CynosDB cluster instance, unit in GB. The maximum storage of a non-serverless instance in GB. NOTE: If db_type is `MYSQL` and charge_type is `PREPAID`, the value cannot exceed the maximum storage corresponding to the CPU and memory specifications, and the transaction mode is `order and pay`. when charge_type is `POSTPAID_BY_HOUR`, this argument is unnecessary.
	// +kubebuilder:validation:Optional
	StorageLimit *float64 `json:"storageLimit,omitempty" tf:"storage_limit,omitempty"`

	// Cluster storage billing mode, pay-as-you-go: 0-yearly/monthly: 1-The default is pay-as-you-go. When the DbType is MYSQL, when the cluster computing billing mode is post-paid (including DbMode is SERVERLESS), the storage billing mode can only be billing by volume; rollback and cloning do not support yearly subscriptions monthly storage.
	// Cluster storage billing mode, pay-as-you-go: `0`-yearly/monthly: `1`-The default is pay-as-you-go. When the DbType is MYSQL, when the cluster computing billing mode is post-paid (including DbMode is SERVERLESS), the storage billing mode can only be billing by volume; rollback and cloning do not support yearly subscriptions monthly storage.
	// +kubebuilder:validation:Optional
	StoragePayMode *float64 `json:"storagePayMode,omitempty" tf:"storage_pay_mode,omitempty"`

	// ID of the subnet within this VPC.
	// ID of the subnet within this VPC.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-tencentcloud/apis/vpc/v1alpha1.Subnet
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`

	// The tags of the CynosDB cluster.
	// The tags of the CynosDB cluster.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// ID of the VPC.
	// ID of the VPC.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-tencentcloud/apis/vpc/v1alpha1.VPC
	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// Reference to a VPC in vpc to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDRef *v1.Reference `json:"vpcIdRef,omitempty" tf:"-"`

	// Selector for a VPC in vpc to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDSelector *v1.Selector `json:"vpcIdSelector,omitempty" tf:"-"`
}

type InstanceInitInfosInitParameters struct {

	// CPU of instance.
	// CPU of instance.
	CPU *float64 `json:"cpu,omitempty" tf:"cpu,omitempty"`

	// Instance machine type. Values: common, exclusive.
	// Instance machine type. Values: `common`, `exclusive`.
	DeviceType *string `json:"deviceType,omitempty" tf:"device_type,omitempty"`

	// Instance count. Range: [1, 15].
	// Instance count. Range: [1, 15].
	InstanceCount *float64 `json:"instanceCount,omitempty" tf:"instance_count,omitempty"`

	// Instance type. Value: rw, ro.
	// Instance type. Value: `rw`, `ro`.
	InstanceType *string `json:"instanceType,omitempty" tf:"instance_type,omitempty"`

	// Maximum Serverless Instance Specifications.
	// Maximum Serverless Instance Specifications.
	MaxRoCPU *float64 `json:"maxRoCpu,omitempty" tf:"max_ro_cpu,omitempty"`

	// Maximum number of Serverless instances. Range [1,15].
	// Maximum number of Serverless instances. Range [1,15].
	MaxRoCount *float64 `json:"maxRoCount,omitempty" tf:"max_ro_count,omitempty"`

	// Memory of instance.
	// Memory of instance.
	Memory *float64 `json:"memory,omitempty" tf:"memory,omitempty"`

	// Minimum Serverless Instance Specifications.
	// Minimum Serverless Instance Specifications.
	MinRoCPU *float64 `json:"minRoCpu,omitempty" tf:"min_ro_cpu,omitempty"`

	// Minimum number of Serverless instances. Range [1,15].
	// Minimum number of Serverless instances. Range [1,15].
	MinRoCount *float64 `json:"minRoCount,omitempty" tf:"min_ro_count,omitempty"`
}

type InstanceInitInfosObservation struct {

	// CPU of instance.
	// CPU of instance.
	CPU *float64 `json:"cpu,omitempty" tf:"cpu,omitempty"`

	// Instance machine type. Values: common, exclusive.
	// Instance machine type. Values: `common`, `exclusive`.
	DeviceType *string `json:"deviceType,omitempty" tf:"device_type,omitempty"`

	// Instance count. Range: [1, 15].
	// Instance count. Range: [1, 15].
	InstanceCount *float64 `json:"instanceCount,omitempty" tf:"instance_count,omitempty"`

	// Instance type. Value: rw, ro.
	// Instance type. Value: `rw`, `ro`.
	InstanceType *string `json:"instanceType,omitempty" tf:"instance_type,omitempty"`

	// Maximum Serverless Instance Specifications.
	// Maximum Serverless Instance Specifications.
	MaxRoCPU *float64 `json:"maxRoCpu,omitempty" tf:"max_ro_cpu,omitempty"`

	// Maximum number of Serverless instances. Range [1,15].
	// Maximum number of Serverless instances. Range [1,15].
	MaxRoCount *float64 `json:"maxRoCount,omitempty" tf:"max_ro_count,omitempty"`

	// Memory of instance.
	// Memory of instance.
	Memory *float64 `json:"memory,omitempty" tf:"memory,omitempty"`

	// Minimum Serverless Instance Specifications.
	// Minimum Serverless Instance Specifications.
	MinRoCPU *float64 `json:"minRoCpu,omitempty" tf:"min_ro_cpu,omitempty"`

	// Minimum number of Serverless instances. Range [1,15].
	// Minimum number of Serverless instances. Range [1,15].
	MinRoCount *float64 `json:"minRoCount,omitempty" tf:"min_ro_count,omitempty"`
}

type InstanceInitInfosParameters struct {

	// CPU of instance.
	// CPU of instance.
	// +kubebuilder:validation:Optional
	CPU *float64 `json:"cpu" tf:"cpu,omitempty"`

	// Instance machine type. Values: common, exclusive.
	// Instance machine type. Values: `common`, `exclusive`.
	// +kubebuilder:validation:Optional
	DeviceType *string `json:"deviceType,omitempty" tf:"device_type,omitempty"`

	// Instance count. Range: [1, 15].
	// Instance count. Range: [1, 15].
	// +kubebuilder:validation:Optional
	InstanceCount *float64 `json:"instanceCount" tf:"instance_count,omitempty"`

	// Instance type. Value: rw, ro.
	// Instance type. Value: `rw`, `ro`.
	// +kubebuilder:validation:Optional
	InstanceType *string `json:"instanceType" tf:"instance_type,omitempty"`

	// Maximum Serverless Instance Specifications.
	// Maximum Serverless Instance Specifications.
	// +kubebuilder:validation:Optional
	MaxRoCPU *float64 `json:"maxRoCpu,omitempty" tf:"max_ro_cpu,omitempty"`

	// Maximum number of Serverless instances. Range [1,15].
	// Maximum number of Serverless instances. Range [1,15].
	// +kubebuilder:validation:Optional
	MaxRoCount *float64 `json:"maxRoCount,omitempty" tf:"max_ro_count,omitempty"`

	// Memory of instance.
	// Memory of instance.
	// +kubebuilder:validation:Optional
	Memory *float64 `json:"memory" tf:"memory,omitempty"`

	// Minimum Serverless Instance Specifications.
	// Minimum Serverless Instance Specifications.
	// +kubebuilder:validation:Optional
	MinRoCPU *float64 `json:"minRoCpu,omitempty" tf:"min_ro_cpu,omitempty"`

	// Minimum number of Serverless instances. Range [1,15].
	// Minimum number of Serverless instances. Range [1,15].
	// +kubebuilder:validation:Optional
	MinRoCount *float64 `json:"minRoCount,omitempty" tf:"min_ro_count,omitempty"`
}

type ParamItemsInitParameters struct {

	// Param expected value to set.
	// Param expected value to set.
	CurrentValue *string `json:"currentValue,omitempty" tf:"current_value,omitempty"`

	// Name of param, e.g. character_set_server.
	// Name of param, e.g. `character_set_server`.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Param old value, indicates the value which already set, this value is required when modifying current_value.
	// Param old value, indicates the value which already set, this value is required when modifying current_value.
	OldValue *string `json:"oldValue,omitempty" tf:"old_value,omitempty"`
}

type ParamItemsObservation struct {

	// Param expected value to set.
	// Param expected value to set.
	CurrentValue *string `json:"currentValue,omitempty" tf:"current_value,omitempty"`

	// Name of param, e.g. character_set_server.
	// Name of param, e.g. `character_set_server`.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Param old value, indicates the value which already set, this value is required when modifying current_value.
	// Param old value, indicates the value which already set, this value is required when modifying current_value.
	OldValue *string `json:"oldValue,omitempty" tf:"old_value,omitempty"`
}

type ParamItemsParameters struct {

	// Param expected value to set.
	// Param expected value to set.
	// +kubebuilder:validation:Optional
	CurrentValue *string `json:"currentValue" tf:"current_value,omitempty"`

	// Name of param, e.g. character_set_server.
	// Name of param, e.g. `character_set_server`.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Param old value, indicates the value which already set, this value is required when modifying current_value.
	// Param old value, indicates the value which already set, this value is required when modifying current_value.
	// +kubebuilder:validation:Optional
	OldValue *string `json:"oldValue,omitempty" tf:"old_value,omitempty"`
}

type RoGroupAddrInitParameters struct {
}

type RoGroupAddrObservation struct {

	// IP address for readonly connection.
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// Port of CynosDB cluster.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`
}

type RoGroupAddrParameters struct {
}

type RoGroupInstancesInitParameters struct {
}

type RoGroupInstancesObservation struct {

	// ID of instance.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Name of instance.
	InstanceName *string `json:"instanceName,omitempty" tf:"instance_name,omitempty"`
}

type RoGroupInstancesParameters struct {
}

type RwGroupAddrInitParameters struct {
}

type RwGroupAddrObservation struct {

	// IP address for readonly connection.
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// Port of CynosDB cluster.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`
}

type RwGroupAddrParameters struct {
}

type RwGroupInstancesInitParameters struct {
}

type RwGroupInstancesObservation struct {

	// ID of instance.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Name of instance.
	InstanceName *string `json:"instanceName,omitempty" tf:"instance_name,omitempty"`
}

type RwGroupInstancesParameters struct {
}

// ClusterSpec defines the desired state of Cluster
type ClusterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClusterParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ClusterInitParameters `json:"initProvider,omitempty"`
}

// ClusterStatus defines the observed state of Cluster.
type ClusterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Cluster is the Schema for the Clusters API. Provide a resource to create a CynosDB cluster.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type Cluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.availableZone) || (has(self.initProvider) && has(self.initProvider.availableZone))",message="spec.forProvider.availableZone is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.clusterName) || (has(self.initProvider) && has(self.initProvider.clusterName))",message="spec.forProvider.clusterName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.dbType) || (has(self.initProvider) && has(self.initProvider.dbType))",message="spec.forProvider.dbType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.dbVersion) || (has(self.initProvider) && has(self.initProvider.dbVersion))",message="spec.forProvider.dbVersion is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.passwordSecretRef)",message="spec.forProvider.passwordSecretRef is a required parameter"
	Spec   ClusterSpec   `json:"spec"`
	Status ClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterList contains a list of Clusters
type ClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Cluster `json:"items"`
}

// Repository type metadata.
var (
	Cluster_Kind             = "Cluster"
	Cluster_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Cluster_Kind}.String()
	Cluster_KindAPIVersion   = Cluster_Kind + "." + CRDGroupVersion.String()
	Cluster_GroupVersionKind = CRDGroupVersion.WithKind(Cluster_Kind)
)

func init() {
	SchemeBuilder.Register(&Cluster{}, &ClusterList{})
}
