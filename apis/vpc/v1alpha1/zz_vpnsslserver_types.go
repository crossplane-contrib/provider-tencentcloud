/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VPNSSLServerInitParameters struct {

	// Need compressed. Currently is not supports compress. Default value: False.
	// Need compressed. Currently is not supports compress. Default value: False.
	Compress *bool `json:"compress,omitempty" tf:"compress,omitempty"`

	// The encrypt algorithm. Valid values: AES-128-CBC, AES-192-CBC, AES-256-CBC.Default value: AES-128-CBC.
	// The encrypt algorithm. Valid values: AES-128-CBC, AES-192-CBC, AES-256-CBC.Default value: AES-128-CBC.
	EncryptAlgorithm *string `json:"encryptAlgorithm,omitempty" tf:"encrypt_algorithm,omitempty"`

	// The integrity algorithm. Valid values: SHA1. Default value: SHA1.
	// The integrity algorithm. Valid values: SHA1. Default value: SHA1.
	IntegrityAlgorithm *string `json:"integrityAlgorithm,omitempty" tf:"integrity_algorithm,omitempty"`

	// List of local CIDR.
	// List of local CIDR.
	LocalAddress []*string `json:"localAddress,omitempty" tf:"local_address,omitempty"`

	// Remote CIDR for client.
	// Remote CIDR for client.
	RemoteAddress *string `json:"remoteAddress,omitempty" tf:"remote_address,omitempty"`

	// The port of ssl vpn. Currently only supports UDP. Default value: 1194.
	// The port of ssl vpn. Currently only supports UDP. Default value: 1194.
	SSLVPNPort *float64 `json:"sslVpnPort,omitempty" tf:"ssl_vpn_port,omitempty"`

	// The protocol of ssl vpn. Default value: UDP.
	// The protocol of ssl vpn. Default value: UDP.
	SSLVPNProtocol *string `json:"sslVpnProtocol,omitempty" tf:"ssl_vpn_protocol,omitempty"`

	// The name of ssl vpn server to be created.
	// The name of ssl vpn server to be created.
	SSLVPNServerName *string `json:"sslVpnServerName,omitempty" tf:"ssl_vpn_server_name,omitempty"`

	// VPN gateway ID.
	// VPN gateway ID.
	// +crossplane:generate:reference:type=VPNGateway
	VPNGatewayID *string `json:"vpnGatewayId,omitempty" tf:"vpn_gateway_id,omitempty"`

	// Reference to a VPNGateway to populate vpnGatewayId.
	// +kubebuilder:validation:Optional
	VPNGatewayIDRef *v1.Reference `json:"vpnGatewayIdRef,omitempty" tf:"-"`

	// Selector for a VPNGateway to populate vpnGatewayId.
	// +kubebuilder:validation:Optional
	VPNGatewayIDSelector *v1.Selector `json:"vpnGatewayIdSelector,omitempty" tf:"-"`
}

type VPNSSLServerObservation struct {

	// Need compressed. Currently is not supports compress. Default value: False.
	// Need compressed. Currently is not supports compress. Default value: False.
	Compress *bool `json:"compress,omitempty" tf:"compress,omitempty"`

	// The encrypt algorithm. Valid values: AES-128-CBC, AES-192-CBC, AES-256-CBC.Default value: AES-128-CBC.
	// The encrypt algorithm. Valid values: AES-128-CBC, AES-192-CBC, AES-256-CBC.Default value: AES-128-CBC.
	EncryptAlgorithm *string `json:"encryptAlgorithm,omitempty" tf:"encrypt_algorithm,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The integrity algorithm. Valid values: SHA1. Default value: SHA1.
	// The integrity algorithm. Valid values: SHA1. Default value: SHA1.
	IntegrityAlgorithm *string `json:"integrityAlgorithm,omitempty" tf:"integrity_algorithm,omitempty"`

	// List of local CIDR.
	// List of local CIDR.
	LocalAddress []*string `json:"localAddress,omitempty" tf:"local_address,omitempty"`

	// Remote CIDR for client.
	// Remote CIDR for client.
	RemoteAddress *string `json:"remoteAddress,omitempty" tf:"remote_address,omitempty"`

	// The port of ssl vpn. Currently only supports UDP. Default value: 1194.
	// The port of ssl vpn. Currently only supports UDP. Default value: 1194.
	SSLVPNPort *float64 `json:"sslVpnPort,omitempty" tf:"ssl_vpn_port,omitempty"`

	// The protocol of ssl vpn. Default value: UDP.
	// The protocol of ssl vpn. Default value: UDP.
	SSLVPNProtocol *string `json:"sslVpnProtocol,omitempty" tf:"ssl_vpn_protocol,omitempty"`

	// The name of ssl vpn server to be created.
	// The name of ssl vpn server to be created.
	SSLVPNServerName *string `json:"sslVpnServerName,omitempty" tf:"ssl_vpn_server_name,omitempty"`

	// VPN gateway ID.
	// VPN gateway ID.
	VPNGatewayID *string `json:"vpnGatewayId,omitempty" tf:"vpn_gateway_id,omitempty"`
}

type VPNSSLServerParameters struct {

	// Need compressed. Currently is not supports compress. Default value: False.
	// Need compressed. Currently is not supports compress. Default value: False.
	// +kubebuilder:validation:Optional
	Compress *bool `json:"compress,omitempty" tf:"compress,omitempty"`

	// The encrypt algorithm. Valid values: AES-128-CBC, AES-192-CBC, AES-256-CBC.Default value: AES-128-CBC.
	// The encrypt algorithm. Valid values: AES-128-CBC, AES-192-CBC, AES-256-CBC.Default value: AES-128-CBC.
	// +kubebuilder:validation:Optional
	EncryptAlgorithm *string `json:"encryptAlgorithm,omitempty" tf:"encrypt_algorithm,omitempty"`

	// The integrity algorithm. Valid values: SHA1. Default value: SHA1.
	// The integrity algorithm. Valid values: SHA1. Default value: SHA1.
	// +kubebuilder:validation:Optional
	IntegrityAlgorithm *string `json:"integrityAlgorithm,omitempty" tf:"integrity_algorithm,omitempty"`

	// List of local CIDR.
	// List of local CIDR.
	// +kubebuilder:validation:Optional
	LocalAddress []*string `json:"localAddress,omitempty" tf:"local_address,omitempty"`

	// Remote CIDR for client.
	// Remote CIDR for client.
	// +kubebuilder:validation:Optional
	RemoteAddress *string `json:"remoteAddress,omitempty" tf:"remote_address,omitempty"`

	// The port of ssl vpn. Currently only supports UDP. Default value: 1194.
	// The port of ssl vpn. Currently only supports UDP. Default value: 1194.
	// +kubebuilder:validation:Optional
	SSLVPNPort *float64 `json:"sslVpnPort,omitempty" tf:"ssl_vpn_port,omitempty"`

	// The protocol of ssl vpn. Default value: UDP.
	// The protocol of ssl vpn. Default value: UDP.
	// +kubebuilder:validation:Optional
	SSLVPNProtocol *string `json:"sslVpnProtocol,omitempty" tf:"ssl_vpn_protocol,omitempty"`

	// The name of ssl vpn server to be created.
	// The name of ssl vpn server to be created.
	// +kubebuilder:validation:Optional
	SSLVPNServerName *string `json:"sslVpnServerName,omitempty" tf:"ssl_vpn_server_name,omitempty"`

	// VPN gateway ID.
	// VPN gateway ID.
	// +crossplane:generate:reference:type=VPNGateway
	// +kubebuilder:validation:Optional
	VPNGatewayID *string `json:"vpnGatewayId,omitempty" tf:"vpn_gateway_id,omitempty"`

	// Reference to a VPNGateway to populate vpnGatewayId.
	// +kubebuilder:validation:Optional
	VPNGatewayIDRef *v1.Reference `json:"vpnGatewayIdRef,omitempty" tf:"-"`

	// Selector for a VPNGateway to populate vpnGatewayId.
	// +kubebuilder:validation:Optional
	VPNGatewayIDSelector *v1.Selector `json:"vpnGatewayIdSelector,omitempty" tf:"-"`
}

// VPNSSLServerSpec defines the desired state of VPNSSLServer
type VPNSSLServerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VPNSSLServerParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VPNSSLServerInitParameters `json:"initProvider,omitempty"`
}

// VPNSSLServerStatus defines the observed state of VPNSSLServer.
type VPNSSLServerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VPNSSLServerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// VPNSSLServer is the Schema for the VPNSSLServers API. Provide a resource to create a VPN SSL Server.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type VPNSSLServer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.localAddress) || (has(self.initProvider) && has(self.initProvider.localAddress))",message="spec.forProvider.localAddress is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.remoteAddress) || (has(self.initProvider) && has(self.initProvider.remoteAddress))",message="spec.forProvider.remoteAddress is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.sslVpnServerName) || (has(self.initProvider) && has(self.initProvider.sslVpnServerName))",message="spec.forProvider.sslVpnServerName is a required parameter"
	Spec   VPNSSLServerSpec   `json:"spec"`
	Status VPNSSLServerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VPNSSLServerList contains a list of VPNSSLServers
type VPNSSLServerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VPNSSLServer `json:"items"`
}

// Repository type metadata.
var (
	VPNSSLServer_Kind             = "VPNSSLServer"
	VPNSSLServer_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VPNSSLServer_Kind}.String()
	VPNSSLServer_KindAPIVersion   = VPNSSLServer_Kind + "." + CRDGroupVersion.String()
	VPNSSLServer_GroupVersionKind = CRDGroupVersion.WithKind(VPNSSLServer_Kind)
)

func init() {
	SchemeBuilder.Register(&VPNSSLServer{}, &VPNSSLServerList{})
}
