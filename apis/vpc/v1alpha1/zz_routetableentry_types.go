/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RouteTableEntryInitParameters struct {

	// Description of the routing table entry.
	// Description of the routing table entry.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Destination address block.
	// Destination address block.
	DestinationCidrBlock *string `json:"destinationCidrBlock,omitempty" tf:"destination_cidr_block,omitempty"`

	// Whether the entry is disabled, default is false.
	// Whether the entry is disabled, default is `false`.
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// ID of next-hop gateway. Note: when next_type is EIP, next_hub should be 0.
	// ID of next-hop gateway. Note: when `next_type` is EIP, `next_hub` should be `0`.
	NextHub *string `json:"nextHub,omitempty" tf:"next_hub,omitempty"`

	// Type of next-hop. Valid values: CVM, VPN, DIRECTCONNECT, PEERCONNECTION, HAVIP, NAT, NORMAL_CVM, EIP, LOCAL_GATEWAY, INTRANAT and USER_CCN.
	// Type of next-hop. Valid values: `CVM`, `VPN`, `DIRECTCONNECT`, `PEERCONNECTION`, `HAVIP`, `NAT`, `NORMAL_CVM`, `EIP`, `LOCAL_GATEWAY`, `INTRANAT` and `USER_CCN`.
	NextType *string `json:"nextType,omitempty" tf:"next_type,omitempty"`

	// ID of routing table to which this entry belongs.
	// ID of routing table to which this entry belongs.
	// +crossplane:generate:reference:type=RouteTable
	RouteTableID *string `json:"routeTableId,omitempty" tf:"route_table_id,omitempty"`

	// Reference to a RouteTable to populate routeTableId.
	// +kubebuilder:validation:Optional
	RouteTableIDRef *v1.Reference `json:"routeTableIdRef,omitempty" tf:"-"`

	// Selector for a RouteTable to populate routeTableId.
	// +kubebuilder:validation:Optional
	RouteTableIDSelector *v1.Selector `json:"routeTableIdSelector,omitempty" tf:"-"`
}

type RouteTableEntryObservation struct {

	// Description of the routing table entry.
	// Description of the routing table entry.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Destination address block.
	// Destination address block.
	DestinationCidrBlock *string `json:"destinationCidrBlock,omitempty" tf:"destination_cidr_block,omitempty"`

	// Whether the entry is disabled, default is false.
	// Whether the entry is disabled, default is `false`.
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// ID of next-hop gateway. Note: when next_type is EIP, next_hub should be 0.
	// ID of next-hop gateway. Note: when `next_type` is EIP, `next_hub` should be `0`.
	NextHub *string `json:"nextHub,omitempty" tf:"next_hub,omitempty"`

	// Type of next-hop. Valid values: CVM, VPN, DIRECTCONNECT, PEERCONNECTION, HAVIP, NAT, NORMAL_CVM, EIP, LOCAL_GATEWAY, INTRANAT and USER_CCN.
	// Type of next-hop. Valid values: `CVM`, `VPN`, `DIRECTCONNECT`, `PEERCONNECTION`, `HAVIP`, `NAT`, `NORMAL_CVM`, `EIP`, `LOCAL_GATEWAY`, `INTRANAT` and `USER_CCN`.
	NextType *string `json:"nextType,omitempty" tf:"next_type,omitempty"`

	// ID of route table entry.
	// ID of route table entry.
	RouteItemID *string `json:"routeItemId,omitempty" tf:"route_item_id,omitempty"`

	// ID of routing table to which this entry belongs.
	// ID of routing table to which this entry belongs.
	RouteTableID *string `json:"routeTableId,omitempty" tf:"route_table_id,omitempty"`
}

type RouteTableEntryParameters struct {

	// Description of the routing table entry.
	// Description of the routing table entry.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Destination address block.
	// Destination address block.
	// +kubebuilder:validation:Optional
	DestinationCidrBlock *string `json:"destinationCidrBlock,omitempty" tf:"destination_cidr_block,omitempty"`

	// Whether the entry is disabled, default is false.
	// Whether the entry is disabled, default is `false`.
	// +kubebuilder:validation:Optional
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// ID of next-hop gateway. Note: when next_type is EIP, next_hub should be 0.
	// ID of next-hop gateway. Note: when `next_type` is EIP, `next_hub` should be `0`.
	// +kubebuilder:validation:Optional
	NextHub *string `json:"nextHub,omitempty" tf:"next_hub,omitempty"`

	// Type of next-hop. Valid values: CVM, VPN, DIRECTCONNECT, PEERCONNECTION, HAVIP, NAT, NORMAL_CVM, EIP, LOCAL_GATEWAY, INTRANAT and USER_CCN.
	// Type of next-hop. Valid values: `CVM`, `VPN`, `DIRECTCONNECT`, `PEERCONNECTION`, `HAVIP`, `NAT`, `NORMAL_CVM`, `EIP`, `LOCAL_GATEWAY`, `INTRANAT` and `USER_CCN`.
	// +kubebuilder:validation:Optional
	NextType *string `json:"nextType,omitempty" tf:"next_type,omitempty"`

	// ID of routing table to which this entry belongs.
	// ID of routing table to which this entry belongs.
	// +crossplane:generate:reference:type=RouteTable
	// +kubebuilder:validation:Optional
	RouteTableID *string `json:"routeTableId,omitempty" tf:"route_table_id,omitempty"`

	// Reference to a RouteTable to populate routeTableId.
	// +kubebuilder:validation:Optional
	RouteTableIDRef *v1.Reference `json:"routeTableIdRef,omitempty" tf:"-"`

	// Selector for a RouteTable to populate routeTableId.
	// +kubebuilder:validation:Optional
	RouteTableIDSelector *v1.Selector `json:"routeTableIdSelector,omitempty" tf:"-"`
}

// RouteTableEntrySpec defines the desired state of RouteTableEntry
type RouteTableEntrySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RouteTableEntryParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RouteTableEntryInitParameters `json:"initProvider,omitempty"`
}

// RouteTableEntryStatus defines the observed state of RouteTableEntry.
type RouteTableEntryStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RouteTableEntryObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// RouteTableEntry is the Schema for the RouteTableEntrys API. Provides a resource to create an entry of a routing table.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type RouteTableEntry struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.destinationCidrBlock) || (has(self.initProvider) && has(self.initProvider.destinationCidrBlock))",message="spec.forProvider.destinationCidrBlock is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.nextHub) || (has(self.initProvider) && has(self.initProvider.nextHub))",message="spec.forProvider.nextHub is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.nextType) || (has(self.initProvider) && has(self.initProvider.nextType))",message="spec.forProvider.nextType is a required parameter"
	Spec   RouteTableEntrySpec   `json:"spec"`
	Status RouteTableEntryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RouteTableEntryList contains a list of RouteTableEntrys
type RouteTableEntryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RouteTableEntry `json:"items"`
}

// Repository type metadata.
var (
	RouteTableEntry_Kind             = "RouteTableEntry"
	RouteTableEntry_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RouteTableEntry_Kind}.String()
	RouteTableEntry_KindAPIVersion   = RouteTableEntry_Kind + "." + CRDGroupVersion.String()
	RouteTableEntry_GroupVersionKind = CRDGroupVersion.WithKind(RouteTableEntry_Kind)
)

func init() {
	SchemeBuilder.Register(&RouteTableEntry{}, &RouteTableEntryList{})
}
