//go:build !ignore_autogenerated

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BackupPlanInitParameters) DeepCopyInto(out *BackupPlanInitParameters) {
	*out = *in
	if in.BackupPeriod != nil {
		in, out := &in.BackupPeriod, &out.BackupPeriod
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.BaseBackupRetentionPeriod != nil {
		in, out := &in.BaseBackupRetentionPeriod, &out.BaseBackupRetentionPeriod
		*out = new(float64)
		**out = **in
	}
	if in.MaxBackupStartTime != nil {
		in, out := &in.MaxBackupStartTime, &out.MaxBackupStartTime
		*out = new(string)
		**out = **in
	}
	if in.MinBackupStartTime != nil {
		in, out := &in.MinBackupStartTime, &out.MinBackupStartTime
		*out = new(string)
		**out = **in
	}
	if in.MonthlyBackupPeriod != nil {
		in, out := &in.MonthlyBackupPeriod, &out.MonthlyBackupPeriod
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.MonthlyBackupRetentionPeriod != nil {
		in, out := &in.MonthlyBackupRetentionPeriod, &out.MonthlyBackupRetentionPeriod
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BackupPlanInitParameters.
func (in *BackupPlanInitParameters) DeepCopy() *BackupPlanInitParameters {
	if in == nil {
		return nil
	}
	out := new(BackupPlanInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BackupPlanObservation) DeepCopyInto(out *BackupPlanObservation) {
	*out = *in
	if in.BackupPeriod != nil {
		in, out := &in.BackupPeriod, &out.BackupPeriod
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.BaseBackupRetentionPeriod != nil {
		in, out := &in.BaseBackupRetentionPeriod, &out.BaseBackupRetentionPeriod
		*out = new(float64)
		**out = **in
	}
	if in.MaxBackupStartTime != nil {
		in, out := &in.MaxBackupStartTime, &out.MaxBackupStartTime
		*out = new(string)
		**out = **in
	}
	if in.MinBackupStartTime != nil {
		in, out := &in.MinBackupStartTime, &out.MinBackupStartTime
		*out = new(string)
		**out = **in
	}
	if in.MonthlyBackupPeriod != nil {
		in, out := &in.MonthlyBackupPeriod, &out.MonthlyBackupPeriod
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.MonthlyBackupRetentionPeriod != nil {
		in, out := &in.MonthlyBackupRetentionPeriod, &out.MonthlyBackupRetentionPeriod
		*out = new(float64)
		**out = **in
	}
	if in.MonthlyPlanID != nil {
		in, out := &in.MonthlyPlanID, &out.MonthlyPlanID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BackupPlanObservation.
func (in *BackupPlanObservation) DeepCopy() *BackupPlanObservation {
	if in == nil {
		return nil
	}
	out := new(BackupPlanObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BackupPlanParameters) DeepCopyInto(out *BackupPlanParameters) {
	*out = *in
	if in.BackupPeriod != nil {
		in, out := &in.BackupPeriod, &out.BackupPeriod
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.BaseBackupRetentionPeriod != nil {
		in, out := &in.BaseBackupRetentionPeriod, &out.BaseBackupRetentionPeriod
		*out = new(float64)
		**out = **in
	}
	if in.MaxBackupStartTime != nil {
		in, out := &in.MaxBackupStartTime, &out.MaxBackupStartTime
		*out = new(string)
		**out = **in
	}
	if in.MinBackupStartTime != nil {
		in, out := &in.MinBackupStartTime, &out.MinBackupStartTime
		*out = new(string)
		**out = **in
	}
	if in.MonthlyBackupPeriod != nil {
		in, out := &in.MonthlyBackupPeriod, &out.MonthlyBackupPeriod
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.MonthlyBackupRetentionPeriod != nil {
		in, out := &in.MonthlyBackupRetentionPeriod, &out.MonthlyBackupRetentionPeriod
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BackupPlanParameters.
func (in *BackupPlanParameters) DeepCopy() *BackupPlanParameters {
	if in == nil {
		return nil
	}
	out := new(BackupPlanParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DBNodeSetInitParameters) DeepCopyInto(out *DBNodeSetInitParameters) {
	*out = *in
	if in.DedicatedClusterID != nil {
		in, out := &in.DedicatedClusterID, &out.DedicatedClusterID
		*out = new(string)
		**out = **in
	}
	if in.Role != nil {
		in, out := &in.Role, &out.Role
		*out = new(string)
		**out = **in
	}
	if in.Zone != nil {
		in, out := &in.Zone, &out.Zone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DBNodeSetInitParameters.
func (in *DBNodeSetInitParameters) DeepCopy() *DBNodeSetInitParameters {
	if in == nil {
		return nil
	}
	out := new(DBNodeSetInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DBNodeSetObservation) DeepCopyInto(out *DBNodeSetObservation) {
	*out = *in
	if in.DedicatedClusterID != nil {
		in, out := &in.DedicatedClusterID, &out.DedicatedClusterID
		*out = new(string)
		**out = **in
	}
	if in.Role != nil {
		in, out := &in.Role, &out.Role
		*out = new(string)
		**out = **in
	}
	if in.Zone != nil {
		in, out := &in.Zone, &out.Zone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DBNodeSetObservation.
func (in *DBNodeSetObservation) DeepCopy() *DBNodeSetObservation {
	if in == nil {
		return nil
	}
	out := new(DBNodeSetObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DBNodeSetParameters) DeepCopyInto(out *DBNodeSetParameters) {
	*out = *in
	if in.DedicatedClusterID != nil {
		in, out := &in.DedicatedClusterID, &out.DedicatedClusterID
		*out = new(string)
		**out = **in
	}
	if in.Role != nil {
		in, out := &in.Role, &out.Role
		*out = new(string)
		**out = **in
	}
	if in.Zone != nil {
		in, out := &in.Zone, &out.Zone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DBNodeSetParameters.
func (in *DBNodeSetParameters) DeepCopy() *DBNodeSetParameters {
	if in == nil {
		return nil
	}
	out := new(DBNodeSetParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Instance) DeepCopyInto(out *Instance) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Instance.
func (in *Instance) DeepCopy() *Instance {
	if in == nil {
		return nil
	}
	out := new(Instance)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Instance) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceInitParameters) DeepCopyInto(out *InstanceInitParameters) {
	*out = *in
	if in.AutoRenewFlag != nil {
		in, out := &in.AutoRenewFlag, &out.AutoRenewFlag
		*out = new(float64)
		**out = **in
	}
	if in.AutoVoucher != nil {
		in, out := &in.AutoVoucher, &out.AutoVoucher
		*out = new(float64)
		**out = **in
	}
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.BackupPlan != nil {
		in, out := &in.BackupPlan, &out.BackupPlan
		*out = make([]BackupPlanInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.CPU != nil {
		in, out := &in.CPU, &out.CPU
		*out = new(float64)
		**out = **in
	}
	if in.ChargeType != nil {
		in, out := &in.ChargeType, &out.ChargeType
		*out = new(string)
		**out = **in
	}
	if in.Charset != nil {
		in, out := &in.Charset, &out.Charset
		*out = new(string)
		**out = **in
	}
	if in.DBKernelVersion != nil {
		in, out := &in.DBKernelVersion, &out.DBKernelVersion
		*out = new(string)
		**out = **in
	}
	if in.DBMajorVersion != nil {
		in, out := &in.DBMajorVersion, &out.DBMajorVersion
		*out = new(string)
		**out = **in
	}
	if in.DBNodeSet != nil {
		in, out := &in.DBNodeSet, &out.DBNodeSet
		*out = make([]DBNodeSetInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DeleteProtection != nil {
		in, out := &in.DeleteProtection, &out.DeleteProtection
		*out = new(bool)
		**out = **in
	}
	if in.EngineVersion != nil {
		in, out := &in.EngineVersion, &out.EngineVersion
		*out = new(string)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.KMSRegion != nil {
		in, out := &in.KMSRegion, &out.KMSRegion
		*out = new(string)
		**out = **in
	}
	if in.MaxStandbyArchiveDelay != nil {
		in, out := &in.MaxStandbyArchiveDelay, &out.MaxStandbyArchiveDelay
		*out = new(float64)
		**out = **in
	}
	if in.MaxStandbyStreamingDelay != nil {
		in, out := &in.MaxStandbyStreamingDelay, &out.MaxStandbyStreamingDelay
		*out = new(float64)
		**out = **in
	}
	if in.Memory != nil {
		in, out := &in.Memory, &out.Memory
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NeedSupportTde != nil {
		in, out := &in.NeedSupportTde, &out.NeedSupportTde
		*out = new(float64)
		**out = **in
	}
	if in.Period != nil {
		in, out := &in.Period, &out.Period
		*out = new(float64)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(float64)
		**out = **in
	}
	if in.PublicAccessSwitch != nil {
		in, out := &in.PublicAccessSwitch, &out.PublicAccessSwitch
		*out = new(bool)
		**out = **in
	}
	if in.RootUser != nil {
		in, out := &in.RootUser, &out.RootUser
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroups != nil {
		in, out := &in.SecurityGroups, &out.SecurityGroups
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Storage != nil {
		in, out := &in.Storage, &out.Storage
		*out = new(float64)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.SubnetIDRef != nil {
		in, out := &in.SubnetIDRef, &out.SubnetIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SubnetIDSelector != nil {
		in, out := &in.SubnetIDSelector, &out.SubnetIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
	if in.VPCIDRef != nil {
		in, out := &in.VPCIDRef, &out.VPCIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.VPCIDSelector != nil {
		in, out := &in.VPCIDSelector, &out.VPCIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.VoucherIds != nil {
		in, out := &in.VoucherIds, &out.VoucherIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.WaitSwitch != nil {
		in, out := &in.WaitSwitch, &out.WaitSwitch
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceInitParameters.
func (in *InstanceInitParameters) DeepCopy() *InstanceInitParameters {
	if in == nil {
		return nil
	}
	out := new(InstanceInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceList) DeepCopyInto(out *InstanceList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Instance, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceList.
func (in *InstanceList) DeepCopy() *InstanceList {
	if in == nil {
		return nil
	}
	out := new(InstanceList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *InstanceList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceObservation) DeepCopyInto(out *InstanceObservation) {
	*out = *in
	if in.AutoRenewFlag != nil {
		in, out := &in.AutoRenewFlag, &out.AutoRenewFlag
		*out = new(float64)
		**out = **in
	}
	if in.AutoVoucher != nil {
		in, out := &in.AutoVoucher, &out.AutoVoucher
		*out = new(float64)
		**out = **in
	}
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.BackupPlan != nil {
		in, out := &in.BackupPlan, &out.BackupPlan
		*out = make([]BackupPlanObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.CPU != nil {
		in, out := &in.CPU, &out.CPU
		*out = new(float64)
		**out = **in
	}
	if in.ChargeType != nil {
		in, out := &in.ChargeType, &out.ChargeType
		*out = new(string)
		**out = **in
	}
	if in.Charset != nil {
		in, out := &in.Charset, &out.Charset
		*out = new(string)
		**out = **in
	}
	if in.CreateTime != nil {
		in, out := &in.CreateTime, &out.CreateTime
		*out = new(string)
		**out = **in
	}
	if in.DBKernelVersion != nil {
		in, out := &in.DBKernelVersion, &out.DBKernelVersion
		*out = new(string)
		**out = **in
	}
	if in.DBMajorVersion != nil {
		in, out := &in.DBMajorVersion, &out.DBMajorVersion
		*out = new(string)
		**out = **in
	}
	if in.DBMajorVesion != nil {
		in, out := &in.DBMajorVesion, &out.DBMajorVesion
		*out = new(string)
		**out = **in
	}
	if in.DBNodeSet != nil {
		in, out := &in.DBNodeSet, &out.DBNodeSet
		*out = make([]DBNodeSetObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DeleteProtection != nil {
		in, out := &in.DeleteProtection, &out.DeleteProtection
		*out = new(bool)
		**out = **in
	}
	if in.EngineVersion != nil {
		in, out := &in.EngineVersion, &out.EngineVersion
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.KMSRegion != nil {
		in, out := &in.KMSRegion, &out.KMSRegion
		*out = new(string)
		**out = **in
	}
	if in.MaxStandbyArchiveDelay != nil {
		in, out := &in.MaxStandbyArchiveDelay, &out.MaxStandbyArchiveDelay
		*out = new(float64)
		**out = **in
	}
	if in.MaxStandbyStreamingDelay != nil {
		in, out := &in.MaxStandbyStreamingDelay, &out.MaxStandbyStreamingDelay
		*out = new(float64)
		**out = **in
	}
	if in.Memory != nil {
		in, out := &in.Memory, &out.Memory
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NeedSupportTde != nil {
		in, out := &in.NeedSupportTde, &out.NeedSupportTde
		*out = new(float64)
		**out = **in
	}
	if in.Period != nil {
		in, out := &in.Period, &out.Period
		*out = new(float64)
		**out = **in
	}
	if in.PrivateAccessIP != nil {
		in, out := &in.PrivateAccessIP, &out.PrivateAccessIP
		*out = new(string)
		**out = **in
	}
	if in.PrivateAccessPort != nil {
		in, out := &in.PrivateAccessPort, &out.PrivateAccessPort
		*out = new(float64)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(float64)
		**out = **in
	}
	if in.PublicAccessHost != nil {
		in, out := &in.PublicAccessHost, &out.PublicAccessHost
		*out = new(string)
		**out = **in
	}
	if in.PublicAccessPort != nil {
		in, out := &in.PublicAccessPort, &out.PublicAccessPort
		*out = new(float64)
		**out = **in
	}
	if in.PublicAccessSwitch != nil {
		in, out := &in.PublicAccessSwitch, &out.PublicAccessSwitch
		*out = new(bool)
		**out = **in
	}
	if in.RootUser != nil {
		in, out := &in.RootUser, &out.RootUser
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroups != nil {
		in, out := &in.SecurityGroups, &out.SecurityGroups
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Storage != nil {
		in, out := &in.Storage, &out.Storage
		*out = new(float64)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.UID != nil {
		in, out := &in.UID, &out.UID
		*out = new(float64)
		**out = **in
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
	if in.VoucherIds != nil {
		in, out := &in.VoucherIds, &out.VoucherIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.WaitSwitch != nil {
		in, out := &in.WaitSwitch, &out.WaitSwitch
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceObservation.
func (in *InstanceObservation) DeepCopy() *InstanceObservation {
	if in == nil {
		return nil
	}
	out := new(InstanceObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceParameters) DeepCopyInto(out *InstanceParameters) {
	*out = *in
	if in.AutoRenewFlag != nil {
		in, out := &in.AutoRenewFlag, &out.AutoRenewFlag
		*out = new(float64)
		**out = **in
	}
	if in.AutoVoucher != nil {
		in, out := &in.AutoVoucher, &out.AutoVoucher
		*out = new(float64)
		**out = **in
	}
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.BackupPlan != nil {
		in, out := &in.BackupPlan, &out.BackupPlan
		*out = make([]BackupPlanParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.CPU != nil {
		in, out := &in.CPU, &out.CPU
		*out = new(float64)
		**out = **in
	}
	if in.ChargeType != nil {
		in, out := &in.ChargeType, &out.ChargeType
		*out = new(string)
		**out = **in
	}
	if in.Charset != nil {
		in, out := &in.Charset, &out.Charset
		*out = new(string)
		**out = **in
	}
	if in.DBKernelVersion != nil {
		in, out := &in.DBKernelVersion, &out.DBKernelVersion
		*out = new(string)
		**out = **in
	}
	if in.DBMajorVersion != nil {
		in, out := &in.DBMajorVersion, &out.DBMajorVersion
		*out = new(string)
		**out = **in
	}
	if in.DBNodeSet != nil {
		in, out := &in.DBNodeSet, &out.DBNodeSet
		*out = make([]DBNodeSetParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DeleteProtection != nil {
		in, out := &in.DeleteProtection, &out.DeleteProtection
		*out = new(bool)
		**out = **in
	}
	if in.EngineVersion != nil {
		in, out := &in.EngineVersion, &out.EngineVersion
		*out = new(string)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.KMSRegion != nil {
		in, out := &in.KMSRegion, &out.KMSRegion
		*out = new(string)
		**out = **in
	}
	if in.MaxStandbyArchiveDelay != nil {
		in, out := &in.MaxStandbyArchiveDelay, &out.MaxStandbyArchiveDelay
		*out = new(float64)
		**out = **in
	}
	if in.MaxStandbyStreamingDelay != nil {
		in, out := &in.MaxStandbyStreamingDelay, &out.MaxStandbyStreamingDelay
		*out = new(float64)
		**out = **in
	}
	if in.Memory != nil {
		in, out := &in.Memory, &out.Memory
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NeedSupportTde != nil {
		in, out := &in.NeedSupportTde, &out.NeedSupportTde
		*out = new(float64)
		**out = **in
	}
	if in.Period != nil {
		in, out := &in.Period, &out.Period
		*out = new(float64)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(float64)
		**out = **in
	}
	if in.PublicAccessSwitch != nil {
		in, out := &in.PublicAccessSwitch, &out.PublicAccessSwitch
		*out = new(bool)
		**out = **in
	}
	out.RootPasswordSecretRef = in.RootPasswordSecretRef
	if in.RootUser != nil {
		in, out := &in.RootUser, &out.RootUser
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroups != nil {
		in, out := &in.SecurityGroups, &out.SecurityGroups
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Storage != nil {
		in, out := &in.Storage, &out.Storage
		*out = new(float64)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.SubnetIDRef != nil {
		in, out := &in.SubnetIDRef, &out.SubnetIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SubnetIDSelector != nil {
		in, out := &in.SubnetIDSelector, &out.SubnetIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
	if in.VPCIDRef != nil {
		in, out := &in.VPCIDRef, &out.VPCIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.VPCIDSelector != nil {
		in, out := &in.VPCIDSelector, &out.VPCIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.VoucherIds != nil {
		in, out := &in.VoucherIds, &out.VoucherIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.WaitSwitch != nil {
		in, out := &in.WaitSwitch, &out.WaitSwitch
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceParameters.
func (in *InstanceParameters) DeepCopy() *InstanceParameters {
	if in == nil {
		return nil
	}
	out := new(InstanceParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceSpec) DeepCopyInto(out *InstanceSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceSpec.
func (in *InstanceSpec) DeepCopy() *InstanceSpec {
	if in == nil {
		return nil
	}
	out := new(InstanceSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceStatus) DeepCopyInto(out *InstanceStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceStatus.
func (in *InstanceStatus) DeepCopy() *InstanceStatus {
	if in == nil {
		return nil
	}
	out := new(InstanceStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NetInfoListInitParameters) DeepCopyInto(out *NetInfoListInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NetInfoListInitParameters.
func (in *NetInfoListInitParameters) DeepCopy() *NetInfoListInitParameters {
	if in == nil {
		return nil
	}
	out := new(NetInfoListInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NetInfoListObservation) DeepCopyInto(out *NetInfoListObservation) {
	*out = *in
	if in.IP != nil {
		in, out := &in.IP, &out.IP
		*out = new(string)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NetInfoListObservation.
func (in *NetInfoListObservation) DeepCopy() *NetInfoListObservation {
	if in == nil {
		return nil
	}
	out := new(NetInfoListObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NetInfoListParameters) DeepCopyInto(out *NetInfoListParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NetInfoListParameters.
func (in *NetInfoListParameters) DeepCopy() *NetInfoListParameters {
	if in == nil {
		return nil
	}
	out := new(NetInfoListParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReadonlyAttachment) DeepCopyInto(out *ReadonlyAttachment) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReadonlyAttachment.
func (in *ReadonlyAttachment) DeepCopy() *ReadonlyAttachment {
	if in == nil {
		return nil
	}
	out := new(ReadonlyAttachment)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ReadonlyAttachment) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReadonlyAttachmentInitParameters) DeepCopyInto(out *ReadonlyAttachmentInitParameters) {
	*out = *in
	if in.DBInstanceID != nil {
		in, out := &in.DBInstanceID, &out.DBInstanceID
		*out = new(string)
		**out = **in
	}
	if in.DBInstanceIDRef != nil {
		in, out := &in.DBInstanceIDRef, &out.DBInstanceIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.DBInstanceIDSelector != nil {
		in, out := &in.DBInstanceIDSelector, &out.DBInstanceIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ReadOnlyGroupID != nil {
		in, out := &in.ReadOnlyGroupID, &out.ReadOnlyGroupID
		*out = new(string)
		**out = **in
	}
	if in.ReadOnlyGroupIDRef != nil {
		in, out := &in.ReadOnlyGroupIDRef, &out.ReadOnlyGroupIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ReadOnlyGroupIDSelector != nil {
		in, out := &in.ReadOnlyGroupIDSelector, &out.ReadOnlyGroupIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReadonlyAttachmentInitParameters.
func (in *ReadonlyAttachmentInitParameters) DeepCopy() *ReadonlyAttachmentInitParameters {
	if in == nil {
		return nil
	}
	out := new(ReadonlyAttachmentInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReadonlyAttachmentList) DeepCopyInto(out *ReadonlyAttachmentList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ReadonlyAttachment, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReadonlyAttachmentList.
func (in *ReadonlyAttachmentList) DeepCopy() *ReadonlyAttachmentList {
	if in == nil {
		return nil
	}
	out := new(ReadonlyAttachmentList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ReadonlyAttachmentList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReadonlyAttachmentObservation) DeepCopyInto(out *ReadonlyAttachmentObservation) {
	*out = *in
	if in.DBInstanceID != nil {
		in, out := &in.DBInstanceID, &out.DBInstanceID
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.ReadOnlyGroupID != nil {
		in, out := &in.ReadOnlyGroupID, &out.ReadOnlyGroupID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReadonlyAttachmentObservation.
func (in *ReadonlyAttachmentObservation) DeepCopy() *ReadonlyAttachmentObservation {
	if in == nil {
		return nil
	}
	out := new(ReadonlyAttachmentObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReadonlyAttachmentParameters) DeepCopyInto(out *ReadonlyAttachmentParameters) {
	*out = *in
	if in.DBInstanceID != nil {
		in, out := &in.DBInstanceID, &out.DBInstanceID
		*out = new(string)
		**out = **in
	}
	if in.DBInstanceIDRef != nil {
		in, out := &in.DBInstanceIDRef, &out.DBInstanceIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.DBInstanceIDSelector != nil {
		in, out := &in.DBInstanceIDSelector, &out.DBInstanceIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ReadOnlyGroupID != nil {
		in, out := &in.ReadOnlyGroupID, &out.ReadOnlyGroupID
		*out = new(string)
		**out = **in
	}
	if in.ReadOnlyGroupIDRef != nil {
		in, out := &in.ReadOnlyGroupIDRef, &out.ReadOnlyGroupIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ReadOnlyGroupIDSelector != nil {
		in, out := &in.ReadOnlyGroupIDSelector, &out.ReadOnlyGroupIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReadonlyAttachmentParameters.
func (in *ReadonlyAttachmentParameters) DeepCopy() *ReadonlyAttachmentParameters {
	if in == nil {
		return nil
	}
	out := new(ReadonlyAttachmentParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReadonlyAttachmentSpec) DeepCopyInto(out *ReadonlyAttachmentSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReadonlyAttachmentSpec.
func (in *ReadonlyAttachmentSpec) DeepCopy() *ReadonlyAttachmentSpec {
	if in == nil {
		return nil
	}
	out := new(ReadonlyAttachmentSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReadonlyAttachmentStatus) DeepCopyInto(out *ReadonlyAttachmentStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReadonlyAttachmentStatus.
func (in *ReadonlyAttachmentStatus) DeepCopy() *ReadonlyAttachmentStatus {
	if in == nil {
		return nil
	}
	out := new(ReadonlyAttachmentStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReadonlyGroup) DeepCopyInto(out *ReadonlyGroup) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReadonlyGroup.
func (in *ReadonlyGroup) DeepCopy() *ReadonlyGroup {
	if in == nil {
		return nil
	}
	out := new(ReadonlyGroup)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ReadonlyGroup) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReadonlyGroupInitParameters) DeepCopyInto(out *ReadonlyGroupInitParameters) {
	*out = *in
	if in.MasterDBInstanceID != nil {
		in, out := &in.MasterDBInstanceID, &out.MasterDBInstanceID
		*out = new(string)
		**out = **in
	}
	if in.MaxReplayLag != nil {
		in, out := &in.MaxReplayLag, &out.MaxReplayLag
		*out = new(float64)
		**out = **in
	}
	if in.MaxReplayLatency != nil {
		in, out := &in.MaxReplayLatency, &out.MaxReplayLatency
		*out = new(float64)
		**out = **in
	}
	if in.MinDelayEliminateReserve != nil {
		in, out := &in.MinDelayEliminateReserve, &out.MinDelayEliminateReserve
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(float64)
		**out = **in
	}
	if in.ReplayLagEliminate != nil {
		in, out := &in.ReplayLagEliminate, &out.ReplayLagEliminate
		*out = new(float64)
		**out = **in
	}
	if in.ReplayLatencyEliminate != nil {
		in, out := &in.ReplayLatencyEliminate, &out.ReplayLatencyEliminate
		*out = new(float64)
		**out = **in
	}
	if in.SecurityGroupsIds != nil {
		in, out := &in.SecurityGroupsIds, &out.SecurityGroupsIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.SubnetIDRef != nil {
		in, out := &in.SubnetIDRef, &out.SubnetIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SubnetIDSelector != nil {
		in, out := &in.SubnetIDSelector, &out.SubnetIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
	if in.VPCIDRef != nil {
		in, out := &in.VPCIDRef, &out.VPCIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.VPCIDSelector != nil {
		in, out := &in.VPCIDSelector, &out.VPCIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReadonlyGroupInitParameters.
func (in *ReadonlyGroupInitParameters) DeepCopy() *ReadonlyGroupInitParameters {
	if in == nil {
		return nil
	}
	out := new(ReadonlyGroupInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReadonlyGroupList) DeepCopyInto(out *ReadonlyGroupList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ReadonlyGroup, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReadonlyGroupList.
func (in *ReadonlyGroupList) DeepCopy() *ReadonlyGroupList {
	if in == nil {
		return nil
	}
	out := new(ReadonlyGroupList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ReadonlyGroupList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReadonlyGroupObservation) DeepCopyInto(out *ReadonlyGroupObservation) {
	*out = *in
	if in.CreateTime != nil {
		in, out := &in.CreateTime, &out.CreateTime
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.MasterDBInstanceID != nil {
		in, out := &in.MasterDBInstanceID, &out.MasterDBInstanceID
		*out = new(string)
		**out = **in
	}
	if in.MaxReplayLag != nil {
		in, out := &in.MaxReplayLag, &out.MaxReplayLag
		*out = new(float64)
		**out = **in
	}
	if in.MaxReplayLatency != nil {
		in, out := &in.MaxReplayLatency, &out.MaxReplayLatency
		*out = new(float64)
		**out = **in
	}
	if in.MinDelayEliminateReserve != nil {
		in, out := &in.MinDelayEliminateReserve, &out.MinDelayEliminateReserve
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NetInfoList != nil {
		in, out := &in.NetInfoList, &out.NetInfoList
		*out = make([]NetInfoListObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(float64)
		**out = **in
	}
	if in.ReplayLagEliminate != nil {
		in, out := &in.ReplayLagEliminate, &out.ReplayLagEliminate
		*out = new(float64)
		**out = **in
	}
	if in.ReplayLatencyEliminate != nil {
		in, out := &in.ReplayLatencyEliminate, &out.ReplayLatencyEliminate
		*out = new(float64)
		**out = **in
	}
	if in.SecurityGroupsIds != nil {
		in, out := &in.SecurityGroupsIds, &out.SecurityGroupsIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReadonlyGroupObservation.
func (in *ReadonlyGroupObservation) DeepCopy() *ReadonlyGroupObservation {
	if in == nil {
		return nil
	}
	out := new(ReadonlyGroupObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReadonlyGroupParameters) DeepCopyInto(out *ReadonlyGroupParameters) {
	*out = *in
	if in.MasterDBInstanceID != nil {
		in, out := &in.MasterDBInstanceID, &out.MasterDBInstanceID
		*out = new(string)
		**out = **in
	}
	if in.MaxReplayLag != nil {
		in, out := &in.MaxReplayLag, &out.MaxReplayLag
		*out = new(float64)
		**out = **in
	}
	if in.MaxReplayLatency != nil {
		in, out := &in.MaxReplayLatency, &out.MaxReplayLatency
		*out = new(float64)
		**out = **in
	}
	if in.MinDelayEliminateReserve != nil {
		in, out := &in.MinDelayEliminateReserve, &out.MinDelayEliminateReserve
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(float64)
		**out = **in
	}
	if in.ReplayLagEliminate != nil {
		in, out := &in.ReplayLagEliminate, &out.ReplayLagEliminate
		*out = new(float64)
		**out = **in
	}
	if in.ReplayLatencyEliminate != nil {
		in, out := &in.ReplayLatencyEliminate, &out.ReplayLatencyEliminate
		*out = new(float64)
		**out = **in
	}
	if in.SecurityGroupsIds != nil {
		in, out := &in.SecurityGroupsIds, &out.SecurityGroupsIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.SubnetIDRef != nil {
		in, out := &in.SubnetIDRef, &out.SubnetIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SubnetIDSelector != nil {
		in, out := &in.SubnetIDSelector, &out.SubnetIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
	if in.VPCIDRef != nil {
		in, out := &in.VPCIDRef, &out.VPCIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.VPCIDSelector != nil {
		in, out := &in.VPCIDSelector, &out.VPCIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReadonlyGroupParameters.
func (in *ReadonlyGroupParameters) DeepCopy() *ReadonlyGroupParameters {
	if in == nil {
		return nil
	}
	out := new(ReadonlyGroupParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReadonlyGroupSpec) DeepCopyInto(out *ReadonlyGroupSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReadonlyGroupSpec.
func (in *ReadonlyGroupSpec) DeepCopy() *ReadonlyGroupSpec {
	if in == nil {
		return nil
	}
	out := new(ReadonlyGroupSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReadonlyGroupStatus) DeepCopyInto(out *ReadonlyGroupStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReadonlyGroupStatus.
func (in *ReadonlyGroupStatus) DeepCopy() *ReadonlyGroupStatus {
	if in == nil {
		return nil
	}
	out := new(ReadonlyGroupStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReadonlyInstance) DeepCopyInto(out *ReadonlyInstance) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReadonlyInstance.
func (in *ReadonlyInstance) DeepCopy() *ReadonlyInstance {
	if in == nil {
		return nil
	}
	out := new(ReadonlyInstance)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ReadonlyInstance) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReadonlyInstanceInitParameters) DeepCopyInto(out *ReadonlyInstanceInitParameters) {
	*out = *in
	if in.AutoRenewFlag != nil {
		in, out := &in.AutoRenewFlag, &out.AutoRenewFlag
		*out = new(float64)
		**out = **in
	}
	if in.AutoVoucher != nil {
		in, out := &in.AutoVoucher, &out.AutoVoucher
		*out = new(float64)
		**out = **in
	}
	if in.CPU != nil {
		in, out := &in.CPU, &out.CPU
		*out = new(float64)
		**out = **in
	}
	if in.DBVersion != nil {
		in, out := &in.DBVersion, &out.DBVersion
		*out = new(string)
		**out = **in
	}
	if in.DedicatedClusterID != nil {
		in, out := &in.DedicatedClusterID, &out.DedicatedClusterID
		*out = new(string)
		**out = **in
	}
	if in.InstanceChargeType != nil {
		in, out := &in.InstanceChargeType, &out.InstanceChargeType
		*out = new(string)
		**out = **in
	}
	if in.MasterDBInstanceID != nil {
		in, out := &in.MasterDBInstanceID, &out.MasterDBInstanceID
		*out = new(string)
		**out = **in
	}
	if in.Memory != nil {
		in, out := &in.Memory, &out.Memory
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NeedSupportIPv6 != nil {
		in, out := &in.NeedSupportIPv6, &out.NeedSupportIPv6
		*out = new(float64)
		**out = **in
	}
	if in.Period != nil {
		in, out := &in.Period, &out.Period
		*out = new(float64)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(float64)
		**out = **in
	}
	if in.ReadOnlyGroupID != nil {
		in, out := &in.ReadOnlyGroupID, &out.ReadOnlyGroupID
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupsIds != nil {
		in, out := &in.SecurityGroupsIds, &out.SecurityGroupsIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SecurityGroupsIdsRefs != nil {
		in, out := &in.SecurityGroupsIdsRefs, &out.SecurityGroupsIdsRefs
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SecurityGroupsIdsSelector != nil {
		in, out := &in.SecurityGroupsIdsSelector, &out.SecurityGroupsIdsSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Storage != nil {
		in, out := &in.Storage, &out.Storage
		*out = new(float64)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.SubnetIDRef != nil {
		in, out := &in.SubnetIDRef, &out.SubnetIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SubnetIDSelector != nil {
		in, out := &in.SubnetIDSelector, &out.SubnetIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
	if in.VPCIDRef != nil {
		in, out := &in.VPCIDRef, &out.VPCIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.VPCIDSelector != nil {
		in, out := &in.VPCIDSelector, &out.VPCIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.VoucherIds != nil {
		in, out := &in.VoucherIds, &out.VoucherIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.WaitSwitch != nil {
		in, out := &in.WaitSwitch, &out.WaitSwitch
		*out = new(float64)
		**out = **in
	}
	if in.Zone != nil {
		in, out := &in.Zone, &out.Zone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReadonlyInstanceInitParameters.
func (in *ReadonlyInstanceInitParameters) DeepCopy() *ReadonlyInstanceInitParameters {
	if in == nil {
		return nil
	}
	out := new(ReadonlyInstanceInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReadonlyInstanceList) DeepCopyInto(out *ReadonlyInstanceList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ReadonlyInstance, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReadonlyInstanceList.
func (in *ReadonlyInstanceList) DeepCopy() *ReadonlyInstanceList {
	if in == nil {
		return nil
	}
	out := new(ReadonlyInstanceList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ReadonlyInstanceList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReadonlyInstanceObservation) DeepCopyInto(out *ReadonlyInstanceObservation) {
	*out = *in
	if in.AutoRenewFlag != nil {
		in, out := &in.AutoRenewFlag, &out.AutoRenewFlag
		*out = new(float64)
		**out = **in
	}
	if in.AutoVoucher != nil {
		in, out := &in.AutoVoucher, &out.AutoVoucher
		*out = new(float64)
		**out = **in
	}
	if in.CPU != nil {
		in, out := &in.CPU, &out.CPU
		*out = new(float64)
		**out = **in
	}
	if in.CreateTime != nil {
		in, out := &in.CreateTime, &out.CreateTime
		*out = new(string)
		**out = **in
	}
	if in.DBVersion != nil {
		in, out := &in.DBVersion, &out.DBVersion
		*out = new(string)
		**out = **in
	}
	if in.DedicatedClusterID != nil {
		in, out := &in.DedicatedClusterID, &out.DedicatedClusterID
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.InstanceChargeType != nil {
		in, out := &in.InstanceChargeType, &out.InstanceChargeType
		*out = new(string)
		**out = **in
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.MasterDBInstanceID != nil {
		in, out := &in.MasterDBInstanceID, &out.MasterDBInstanceID
		*out = new(string)
		**out = **in
	}
	if in.Memory != nil {
		in, out := &in.Memory, &out.Memory
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NeedSupportIPv6 != nil {
		in, out := &in.NeedSupportIPv6, &out.NeedSupportIPv6
		*out = new(float64)
		**out = **in
	}
	if in.Period != nil {
		in, out := &in.Period, &out.Period
		*out = new(float64)
		**out = **in
	}
	if in.PrivateAccessIP != nil {
		in, out := &in.PrivateAccessIP, &out.PrivateAccessIP
		*out = new(string)
		**out = **in
	}
	if in.PrivateAccessPort != nil {
		in, out := &in.PrivateAccessPort, &out.PrivateAccessPort
		*out = new(float64)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(float64)
		**out = **in
	}
	if in.ReadOnlyGroupID != nil {
		in, out := &in.ReadOnlyGroupID, &out.ReadOnlyGroupID
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupsIds != nil {
		in, out := &in.SecurityGroupsIds, &out.SecurityGroupsIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Storage != nil {
		in, out := &in.Storage, &out.Storage
		*out = new(float64)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
	if in.VoucherIds != nil {
		in, out := &in.VoucherIds, &out.VoucherIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.WaitSwitch != nil {
		in, out := &in.WaitSwitch, &out.WaitSwitch
		*out = new(float64)
		**out = **in
	}
	if in.Zone != nil {
		in, out := &in.Zone, &out.Zone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReadonlyInstanceObservation.
func (in *ReadonlyInstanceObservation) DeepCopy() *ReadonlyInstanceObservation {
	if in == nil {
		return nil
	}
	out := new(ReadonlyInstanceObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReadonlyInstanceParameters) DeepCopyInto(out *ReadonlyInstanceParameters) {
	*out = *in
	if in.AutoRenewFlag != nil {
		in, out := &in.AutoRenewFlag, &out.AutoRenewFlag
		*out = new(float64)
		**out = **in
	}
	if in.AutoVoucher != nil {
		in, out := &in.AutoVoucher, &out.AutoVoucher
		*out = new(float64)
		**out = **in
	}
	if in.CPU != nil {
		in, out := &in.CPU, &out.CPU
		*out = new(float64)
		**out = **in
	}
	if in.DBVersion != nil {
		in, out := &in.DBVersion, &out.DBVersion
		*out = new(string)
		**out = **in
	}
	if in.DedicatedClusterID != nil {
		in, out := &in.DedicatedClusterID, &out.DedicatedClusterID
		*out = new(string)
		**out = **in
	}
	if in.InstanceChargeType != nil {
		in, out := &in.InstanceChargeType, &out.InstanceChargeType
		*out = new(string)
		**out = **in
	}
	if in.MasterDBInstanceID != nil {
		in, out := &in.MasterDBInstanceID, &out.MasterDBInstanceID
		*out = new(string)
		**out = **in
	}
	if in.Memory != nil {
		in, out := &in.Memory, &out.Memory
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NeedSupportIPv6 != nil {
		in, out := &in.NeedSupportIPv6, &out.NeedSupportIPv6
		*out = new(float64)
		**out = **in
	}
	if in.Period != nil {
		in, out := &in.Period, &out.Period
		*out = new(float64)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(float64)
		**out = **in
	}
	if in.ReadOnlyGroupID != nil {
		in, out := &in.ReadOnlyGroupID, &out.ReadOnlyGroupID
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupsIds != nil {
		in, out := &in.SecurityGroupsIds, &out.SecurityGroupsIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SecurityGroupsIdsRefs != nil {
		in, out := &in.SecurityGroupsIdsRefs, &out.SecurityGroupsIdsRefs
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SecurityGroupsIdsSelector != nil {
		in, out := &in.SecurityGroupsIdsSelector, &out.SecurityGroupsIdsSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Storage != nil {
		in, out := &in.Storage, &out.Storage
		*out = new(float64)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.SubnetIDRef != nil {
		in, out := &in.SubnetIDRef, &out.SubnetIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SubnetIDSelector != nil {
		in, out := &in.SubnetIDSelector, &out.SubnetIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
	if in.VPCIDRef != nil {
		in, out := &in.VPCIDRef, &out.VPCIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.VPCIDSelector != nil {
		in, out := &in.VPCIDSelector, &out.VPCIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.VoucherIds != nil {
		in, out := &in.VoucherIds, &out.VoucherIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.WaitSwitch != nil {
		in, out := &in.WaitSwitch, &out.WaitSwitch
		*out = new(float64)
		**out = **in
	}
	if in.Zone != nil {
		in, out := &in.Zone, &out.Zone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReadonlyInstanceParameters.
func (in *ReadonlyInstanceParameters) DeepCopy() *ReadonlyInstanceParameters {
	if in == nil {
		return nil
	}
	out := new(ReadonlyInstanceParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReadonlyInstanceSpec) DeepCopyInto(out *ReadonlyInstanceSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReadonlyInstanceSpec.
func (in *ReadonlyInstanceSpec) DeepCopy() *ReadonlyInstanceSpec {
	if in == nil {
		return nil
	}
	out := new(ReadonlyInstanceSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReadonlyInstanceStatus) DeepCopyInto(out *ReadonlyInstanceStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReadonlyInstanceStatus.
func (in *ReadonlyInstanceStatus) DeepCopy() *ReadonlyInstanceStatus {
	if in == nil {
		return nil
	}
	out := new(ReadonlyInstanceStatus)
	in.DeepCopyInto(out)
	return out
}
