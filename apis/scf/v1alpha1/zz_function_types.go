/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CfsConfigInitParameters struct {

	// File system instance ID.
	// File system instance ID.
	CfsID *string `json:"cfsId,omitempty" tf:"cfs_id,omitempty"`

	// Local mount directory.
	// Local mount directory.
	LocalMountDir *string `json:"localMountDir,omitempty" tf:"local_mount_dir,omitempty"`

	// File system mount instance ID.
	// File system mount instance ID.
	MountInsID *string `json:"mountInsId,omitempty" tf:"mount_ins_id,omitempty"`

	// Remote mount directory.
	// Remote mount directory.
	RemoteMountDir *string `json:"remoteMountDir,omitempty" tf:"remote_mount_dir,omitempty"`

	// ID of user group.
	// ID of user group.
	UserGroupID *string `json:"userGroupId,omitempty" tf:"user_group_id,omitempty"`

	// ID of user.
	// ID of user.
	UserID *string `json:"userId,omitempty" tf:"user_id,omitempty"`
}

type CfsConfigObservation struct {

	// File system instance ID.
	// File system instance ID.
	CfsID *string `json:"cfsId,omitempty" tf:"cfs_id,omitempty"`

	// (Readonly) File system ip address.
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// Local mount directory.
	// Local mount directory.
	LocalMountDir *string `json:"localMountDir,omitempty" tf:"local_mount_dir,omitempty"`

	// File system mount instance ID.
	// File system mount instance ID.
	MountInsID *string `json:"mountInsId,omitempty" tf:"mount_ins_id,omitempty"`

	// Subnet ID of the SCF function.
	// (Readonly) File system subnet ID.
	MountSubnetID *string `json:"mountSubnetId,omitempty" tf:"mount_subnet_id,omitempty"`

	// VPC ID of the SCF function.
	// (Readonly) File system virtual private network ID.
	MountVPCID *string `json:"mountVpcId,omitempty" tf:"mount_vpc_id,omitempty"`

	// Remote mount directory.
	// Remote mount directory.
	RemoteMountDir *string `json:"remoteMountDir,omitempty" tf:"remote_mount_dir,omitempty"`

	// ID of user group.
	// ID of user group.
	UserGroupID *string `json:"userGroupId,omitempty" tf:"user_group_id,omitempty"`

	// ID of user.
	// ID of user.
	UserID *string `json:"userId,omitempty" tf:"user_id,omitempty"`
}

type CfsConfigParameters struct {

	// File system instance ID.
	// File system instance ID.
	// +kubebuilder:validation:Optional
	CfsID *string `json:"cfsId" tf:"cfs_id,omitempty"`

	// Local mount directory.
	// Local mount directory.
	// +kubebuilder:validation:Optional
	LocalMountDir *string `json:"localMountDir" tf:"local_mount_dir,omitempty"`

	// File system mount instance ID.
	// File system mount instance ID.
	// +kubebuilder:validation:Optional
	MountInsID *string `json:"mountInsId" tf:"mount_ins_id,omitempty"`

	// Remote mount directory.
	// Remote mount directory.
	// +kubebuilder:validation:Optional
	RemoteMountDir *string `json:"remoteMountDir" tf:"remote_mount_dir,omitempty"`

	// ID of user group.
	// ID of user group.
	// +kubebuilder:validation:Optional
	UserGroupID *string `json:"userGroupId" tf:"user_group_id,omitempty"`

	// ID of user.
	// ID of user.
	// +kubebuilder:validation:Optional
	UserID *string `json:"userId" tf:"user_id,omitempty"`
}

type FunctionInitParameters struct {

	// Whether SCF function asynchronous attribute is enabled. TRUE is open, FALSE is close.
	// Whether SCF function asynchronous attribute is enabled. `TRUE` is open, `FALSE` is close.
	AsyncRunEnable *string `json:"asyncRunEnable,omitempty" tf:"async_run_enable,omitempty"`

	// List of CFS configurations.
	// List of CFS configurations.
	CfsConfig []CfsConfigInitParameters `json:"cfsConfig,omitempty" tf:"cfs_config,omitempty"`

	// cls logset id of the SCF function.
	// cls logset id of the SCF function.
	ClsLogsetID *string `json:"clsLogsetId,omitempty" tf:"cls_logset_id,omitempty"`

	// cls topic id of the SCF function.
	// cls topic id of the SCF function.
	ClsTopicID *string `json:"clsTopicId,omitempty" tf:"cls_topic_id,omitempty"`

	// Cos bucket name of the SCF function, such as cos-1234567890, conflict with zip_file.
	// Cos bucket name of the SCF function, such as `cos-1234567890`, conflict with `zip_file`.
	CosBucketName *string `json:"cosBucketName,omitempty" tf:"cos_bucket_name,omitempty"`

	// Cos bucket region of the SCF function, conflict with zip_file.
	// Cos bucket region of the SCF function, conflict with `zip_file`.
	CosBucketRegion *string `json:"cosBucketRegion,omitempty" tf:"cos_bucket_region,omitempty"`

	// Cos object name of the SCF function, should have suffix .zip or .jar, conflict with zip_file.
	// Cos object name of the SCF function, should have suffix `.zip` or `.jar`, conflict with `zip_file`.
	CosObjectName *string `json:"cosObjectName,omitempty" tf:"cos_object_name,omitempty"`

	// Whether to enable Dns caching capability, only the EVENT function is supported. Default is false.
	// Whether to enable Dns caching capability, only the EVENT function is supported. Default is false.
	DNSCache *bool `json:"dnsCache,omitempty" tf:"dns_cache,omitempty"`

	// Description of the SCF function. Description supports English letters, numbers, spaces, commas, newlines, periods and Chinese, the maximum length is 1000.
	// Description of the SCF function. Description supports English letters, numbers, spaces, commas, newlines, periods and Chinese, the maximum length is 1000.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Indicates whether EIP config set to ENABLE when enable_public_net was true. Default false.
	// Indicates whether EIP config set to `ENABLE` when `enable_public_net` was true. Default `false`.
	EnableEIPConfig *bool `json:"enableEipConfig,omitempty" tf:"enable_eip_config,omitempty"`

	// Indicates whether public net config enabled. Default false. NOTE: only vpc_id specified can disable public net config.
	// Indicates whether public net config enabled. Default `false`. NOTE: only `vpc_id` specified can disable public net config.
	EnablePublicNet *bool `json:"enablePublicNet,omitempty" tf:"enable_public_net,omitempty"`

	// Environment of the SCF function.
	// Environment of the SCF function.
	// +mapType=granular
	Environment map[string]*string `json:"environment,omitempty" tf:"environment,omitempty"`

	// Function type. The default value is Event. Enter Event if you need to create a trigger function. Enter HTTP if you need to create an HTTP function service.
	// Function type. The default value is Event. Enter Event if you need to create a trigger function. Enter HTTP if you need to create an HTTP function service.
	FuncType *string `json:"funcType,omitempty" tf:"func_type,omitempty"`

	// Handler of the SCF function. The format of name is <filename>.<method_name>, and it supports 26 English letters, numbers, connectors, and underscores, it should start with a letter. The last character cannot be - or _. Available length is 2-60.
	// Handler of the SCF function. The format of name is `<filename>.<method_name>`, and it supports 26 English letters, numbers, connectors, and underscores, it should start with a letter. The last character cannot be `-` or `_`. Available length is 2-60.
	Handler *string `json:"handler,omitempty" tf:"handler,omitempty"`

	// Image of the SCF function, conflict with cos_bucket_name, cos_object_name, cos_bucket_region, zip_file.
	// Image of the SCF function, conflict with `cos_bucket_name`, `cos_object_name`, `cos_bucket_region`, `zip_file`.
	ImageConfig []ImageConfigInitParameters `json:"imageConfig,omitempty" tf:"image_config,omitempty"`

	// Intranet access configuration.
	// Intranet access configuration.
	IntranetConfig []IntranetConfigInitParameters `json:"intranetConfig,omitempty" tf:"intranet_config,omitempty"`

	// Enable L5 for SCF function, default is false.
	// Enable L5 for SCF function, default is `false`.
	L5Enable *bool `json:"l5Enable,omitempty" tf:"l5_enable,omitempty"`

	// The list of association layers.
	// The list of association layers.
	Layers []LayersInitParameters `json:"layers,omitempty" tf:"layers,omitempty"`

	// Memory size of the SCF function, unit is MB. The default is 128MB. The ladder is 128M.
	// Memory size of the SCF function, unit is MB. The default is `128`MB. The ladder is 128M.
	MemSize *float64 `json:"memSize,omitempty" tf:"mem_size,omitempty"`

	// Name of the SCF function. Name supports 26 English letters, numbers, connectors, and underscores, it should start with a letter. The last character cannot be - or _. Available length is 2-60.
	// Name of the SCF function. Name supports 26 English letters, numbers, connectors, and underscores, it should start with a letter. The last character cannot be `-` or `_`. Available length is 2-60.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Namespace of the SCF function, default is default.
	// Namespace of the SCF function, default is `default`.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Role of the SCF function.
	// Role of the SCF function.
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// Runtime of the SCF function, only supports Python2.7, Python3.6, Nodejs6.10, Nodejs8.9, Nodejs10.15, Nodejs12.16, Php5.2, Php7.4, Go1, Java8, and CustomRuntime, default is Python2.7.
	// Runtime of the SCF function, only supports `Python2.7`, `Python3.6`, `Nodejs6.10`, `Nodejs8.9`, `Nodejs10.15`, `Nodejs12.16`, `Php5.2`, `Php7.4`, `Go1`, `Java8`, and `CustomRuntime`, default is `Python2.7`.
	Runtime *string `json:"runtime,omitempty" tf:"runtime,omitempty"`

	// Subnet ID of the SCF function.
	// Subnet ID of the SCF function.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Tags of the SCF function.
	// Tags of the SCF function.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Timeout of the SCF function, unit is second. Default 3. Available value is 1-900.
	// Timeout of the SCF function, unit is second. Default `3`. Available value is 1-900.
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// Trigger list of the SCF function, note that if you modify the trigger list, all existing triggers will be deleted, and then create triggers in the new list. Each element contains the following attributes:
	// Trigger list of the SCF function, note that if you modify the trigger list, all existing triggers will be deleted, and then create triggers in the new list. Each element contains the following attributes:
	Triggers []TriggersInitParameters `json:"triggers,omitempty" tf:"triggers,omitempty"`

	// VPC ID of the SCF function.
	// VPC ID of the SCF function.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// Zip file of the SCF function, conflict with cos_bucket_name, cos_object_name, cos_bucket_region.
	// Zip file of the SCF function, conflict with `cos_bucket_name`, `cos_object_name`, `cos_bucket_region`.
	ZipFile *string `json:"zipFile,omitempty" tf:"zip_file,omitempty"`
}

type FunctionObservation struct {

	// Whether SCF function asynchronous attribute is enabled. TRUE is open, FALSE is close.
	// Whether SCF function asynchronous attribute is enabled. `TRUE` is open, `FALSE` is close.
	AsyncRunEnable *string `json:"asyncRunEnable,omitempty" tf:"async_run_enable,omitempty"`

	// List of CFS configurations.
	// List of CFS configurations.
	CfsConfig []CfsConfigObservation `json:"cfsConfig,omitempty" tf:"cfs_config,omitempty"`

	// cls logset id of the SCF function.
	// cls logset id of the SCF function.
	ClsLogsetID *string `json:"clsLogsetId,omitempty" tf:"cls_logset_id,omitempty"`

	// cls topic id of the SCF function.
	// cls topic id of the SCF function.
	ClsTopicID *string `json:"clsTopicId,omitempty" tf:"cls_topic_id,omitempty"`

	// SCF function code error message.
	// SCF function code error message.
	CodeError *string `json:"codeError,omitempty" tf:"code_error,omitempty"`

	// SCF function code is correct.
	// SCF function code is correct.
	CodeResult *string `json:"codeResult,omitempty" tf:"code_result,omitempty"`

	// SCF function code size, unit is M.
	// SCF function code size, unit is M.
	CodeSize *float64 `json:"codeSize,omitempty" tf:"code_size,omitempty"`

	// Cos bucket name of the SCF function, such as cos-1234567890, conflict with zip_file.
	// Cos bucket name of the SCF function, such as `cos-1234567890`, conflict with `zip_file`.
	CosBucketName *string `json:"cosBucketName,omitempty" tf:"cos_bucket_name,omitempty"`

	// Cos bucket region of the SCF function, conflict with zip_file.
	// Cos bucket region of the SCF function, conflict with `zip_file`.
	CosBucketRegion *string `json:"cosBucketRegion,omitempty" tf:"cos_bucket_region,omitempty"`

	// Cos object name of the SCF function, should have suffix .zip or .jar, conflict with zip_file.
	// Cos object name of the SCF function, should have suffix `.zip` or `.jar`, conflict with `zip_file`.
	CosObjectName *string `json:"cosObjectName,omitempty" tf:"cos_object_name,omitempty"`

	// Whether to enable Dns caching capability, only the EVENT function is supported. Default is false.
	// Whether to enable Dns caching capability, only the EVENT function is supported. Default is false.
	DNSCache *bool `json:"dnsCache,omitempty" tf:"dns_cache,omitempty"`

	// Description of the SCF function. Description supports English letters, numbers, spaces, commas, newlines, periods and Chinese, the maximum length is 1000.
	// Description of the SCF function. Description supports English letters, numbers, spaces, commas, newlines, periods and Chinese, the maximum length is 1000.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Whether EIP is a fixed IP.
	// Whether EIP is a fixed IP.
	EIPFixed *bool `json:"eipFixed,omitempty" tf:"eip_fixed,omitempty"`

	// SCF function EIP list.
	// SCF function EIP list.
	Eips []*string `json:"eips,omitempty" tf:"eips,omitempty"`

	// Indicates whether EIP config set to ENABLE when enable_public_net was true. Default false.
	// Indicates whether EIP config set to `ENABLE` when `enable_public_net` was true. Default `false`.
	EnableEIPConfig *bool `json:"enableEipConfig,omitempty" tf:"enable_eip_config,omitempty"`

	// Indicates whether public net config enabled. Default false. NOTE: only vpc_id specified can disable public net config.
	// Indicates whether public net config enabled. Default `false`. NOTE: only `vpc_id` specified can disable public net config.
	EnablePublicNet *bool `json:"enablePublicNet,omitempty" tf:"enable_public_net,omitempty"`

	// Environment of the SCF function.
	// Environment of the SCF function.
	// +mapType=granular
	Environment map[string]*string `json:"environment,omitempty" tf:"environment,omitempty"`

	// SCF function code error code.
	// SCF function code error code.
	ErrNo *float64 `json:"errNo,omitempty" tf:"err_no,omitempty"`

	// Function type. The default value is Event. Enter Event if you need to create a trigger function. Enter HTTP if you need to create an HTTP function service.
	// Function type. The default value is Event. Enter Event if you need to create a trigger function. Enter HTTP if you need to create an HTTP function service.
	FuncType *string `json:"funcType,omitempty" tf:"func_type,omitempty"`

	// function ID.
	// function ID.
	FunctionID *string `json:"functionId,omitempty" tf:"function_id,omitempty"`

	// Handler of the SCF function. The format of name is <filename>.<method_name>, and it supports 26 English letters, numbers, connectors, and underscores, it should start with a letter. The last character cannot be - or _. Available length is 2-60.
	// Handler of the SCF function. The format of name is `<filename>.<method_name>`, and it supports 26 English letters, numbers, connectors, and underscores, it should start with a letter. The last character cannot be `-` or `_`. Available length is 2-60.
	Handler *string `json:"handler,omitempty" tf:"handler,omitempty"`

	// SCF function domain name.
	// SCF function domain name.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Image of the SCF function, conflict with cos_bucket_name, cos_object_name, cos_bucket_region, zip_file.
	// Image of the SCF function, conflict with `cos_bucket_name`, `cos_object_name`, `cos_bucket_region`, `zip_file`.
	ImageConfig []ImageConfigObservation `json:"imageConfig,omitempty" tf:"image_config,omitempty"`

	// Whether to automatically install dependencies.
	// Whether to automatically install dependencies.
	InstallDependency *bool `json:"installDependency,omitempty" tf:"install_dependency,omitempty"`

	// Intranet access configuration.
	// Intranet access configuration.
	IntranetConfig []IntranetConfigObservation `json:"intranetConfig,omitempty" tf:"intranet_config,omitempty"`

	// Enable L5 for SCF function, default is false.
	// Enable L5 for SCF function, default is `false`.
	L5Enable *bool `json:"l5Enable,omitempty" tf:"l5_enable,omitempty"`

	// The list of association layers.
	// The list of association layers.
	Layers []LayersObservation `json:"layers,omitempty" tf:"layers,omitempty"`

	// Memory size of the SCF function, unit is MB. The default is 128MB. The ladder is 128M.
	// Memory size of the SCF function, unit is MB. The default is `128`MB. The ladder is 128M.
	MemSize *float64 `json:"memSize,omitempty" tf:"mem_size,omitempty"`

	// SCF function last modified time.
	// SCF function last modified time.
	ModifyTime *string `json:"modifyTime,omitempty" tf:"modify_time,omitempty"`

	// Name of the SCF function. Name supports 26 English letters, numbers, connectors, and underscores, it should start with a letter. The last character cannot be - or _. Available length is 2-60.
	// Name of the SCF function. Name supports 26 English letters, numbers, connectors, and underscores, it should start with a letter. The last character cannot be `-` or `_`. Available length is 2-60.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Namespace of the SCF function, default is default.
	// Namespace of the SCF function, default is `default`.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Role of the SCF function.
	// Role of the SCF function.
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// Runtime of the SCF function, only supports Python2.7, Python3.6, Nodejs6.10, Nodejs8.9, Nodejs10.15, Nodejs12.16, Php5.2, Php7.4, Go1, Java8, and CustomRuntime, default is Python2.7.
	// Runtime of the SCF function, only supports `Python2.7`, `Python3.6`, `Nodejs6.10`, `Nodejs8.9`, `Nodejs10.15`, `Nodejs12.16`, `Php5.2`, `Php7.4`, `Go1`, `Java8`, and `CustomRuntime`, default is `Python2.7`.
	Runtime *string `json:"runtime,omitempty" tf:"runtime,omitempty"`

	// SCF function status.
	// SCF function status.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// SCF status description.
	// SCF status description.
	StatusDesc *string `json:"statusDesc,omitempty" tf:"status_desc,omitempty"`

	// Subnet ID of the SCF function.
	// Subnet ID of the SCF function.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Tags of the SCF function.
	// Tags of the SCF function.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Timeout of the SCF function, unit is second. Default 3. Available value is 1-900.
	// Timeout of the SCF function, unit is second. Default `3`. Available value is 1-900.
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// SCF trigger details list. Each element contains the following attributes:
	// SCF trigger details list. Each element contains the following attributes:
	TriggerInfo []TriggerInfoObservation `json:"triggerInfo,omitempty" tf:"trigger_info,omitempty"`

	// Trigger list of the SCF function, note that if you modify the trigger list, all existing triggers will be deleted, and then create triggers in the new list. Each element contains the following attributes:
	// Trigger list of the SCF function, note that if you modify the trigger list, all existing triggers will be deleted, and then create triggers in the new list. Each element contains the following attributes:
	Triggers []TriggersObservation `json:"triggers,omitempty" tf:"triggers,omitempty"`

	// VPC ID of the SCF function.
	// VPC ID of the SCF function.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// SCF function vip.
	// SCF function vip.
	Vip *string `json:"vip,omitempty" tf:"vip,omitempty"`

	// Zip file of the SCF function, conflict with cos_bucket_name, cos_object_name, cos_bucket_region.
	// Zip file of the SCF function, conflict with `cos_bucket_name`, `cos_object_name`, `cos_bucket_region`.
	ZipFile *string `json:"zipFile,omitempty" tf:"zip_file,omitempty"`
}

type FunctionParameters struct {

	// Whether SCF function asynchronous attribute is enabled. TRUE is open, FALSE is close.
	// Whether SCF function asynchronous attribute is enabled. `TRUE` is open, `FALSE` is close.
	// +kubebuilder:validation:Optional
	AsyncRunEnable *string `json:"asyncRunEnable,omitempty" tf:"async_run_enable,omitempty"`

	// List of CFS configurations.
	// List of CFS configurations.
	// +kubebuilder:validation:Optional
	CfsConfig []CfsConfigParameters `json:"cfsConfig,omitempty" tf:"cfs_config,omitempty"`

	// cls logset id of the SCF function.
	// cls logset id of the SCF function.
	// +kubebuilder:validation:Optional
	ClsLogsetID *string `json:"clsLogsetId,omitempty" tf:"cls_logset_id,omitempty"`

	// cls topic id of the SCF function.
	// cls topic id of the SCF function.
	// +kubebuilder:validation:Optional
	ClsTopicID *string `json:"clsTopicId,omitempty" tf:"cls_topic_id,omitempty"`

	// Cos bucket name of the SCF function, such as cos-1234567890, conflict with zip_file.
	// Cos bucket name of the SCF function, such as `cos-1234567890`, conflict with `zip_file`.
	// +kubebuilder:validation:Optional
	CosBucketName *string `json:"cosBucketName,omitempty" tf:"cos_bucket_name,omitempty"`

	// Cos bucket region of the SCF function, conflict with zip_file.
	// Cos bucket region of the SCF function, conflict with `zip_file`.
	// +kubebuilder:validation:Optional
	CosBucketRegion *string `json:"cosBucketRegion,omitempty" tf:"cos_bucket_region,omitempty"`

	// Cos object name of the SCF function, should have suffix .zip or .jar, conflict with zip_file.
	// Cos object name of the SCF function, should have suffix `.zip` or `.jar`, conflict with `zip_file`.
	// +kubebuilder:validation:Optional
	CosObjectName *string `json:"cosObjectName,omitempty" tf:"cos_object_name,omitempty"`

	// Whether to enable Dns caching capability, only the EVENT function is supported. Default is false.
	// Whether to enable Dns caching capability, only the EVENT function is supported. Default is false.
	// +kubebuilder:validation:Optional
	DNSCache *bool `json:"dnsCache,omitempty" tf:"dns_cache,omitempty"`

	// Description of the SCF function. Description supports English letters, numbers, spaces, commas, newlines, periods and Chinese, the maximum length is 1000.
	// Description of the SCF function. Description supports English letters, numbers, spaces, commas, newlines, periods and Chinese, the maximum length is 1000.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Indicates whether EIP config set to ENABLE when enable_public_net was true. Default false.
	// Indicates whether EIP config set to `ENABLE` when `enable_public_net` was true. Default `false`.
	// +kubebuilder:validation:Optional
	EnableEIPConfig *bool `json:"enableEipConfig,omitempty" tf:"enable_eip_config,omitempty"`

	// Indicates whether public net config enabled. Default false. NOTE: only vpc_id specified can disable public net config.
	// Indicates whether public net config enabled. Default `false`. NOTE: only `vpc_id` specified can disable public net config.
	// +kubebuilder:validation:Optional
	EnablePublicNet *bool `json:"enablePublicNet,omitempty" tf:"enable_public_net,omitempty"`

	// Environment of the SCF function.
	// Environment of the SCF function.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Environment map[string]*string `json:"environment,omitempty" tf:"environment,omitempty"`

	// Function type. The default value is Event. Enter Event if you need to create a trigger function. Enter HTTP if you need to create an HTTP function service.
	// Function type. The default value is Event. Enter Event if you need to create a trigger function. Enter HTTP if you need to create an HTTP function service.
	// +kubebuilder:validation:Optional
	FuncType *string `json:"funcType,omitempty" tf:"func_type,omitempty"`

	// Handler of the SCF function. The format of name is <filename>.<method_name>, and it supports 26 English letters, numbers, connectors, and underscores, it should start with a letter. The last character cannot be - or _. Available length is 2-60.
	// Handler of the SCF function. The format of name is `<filename>.<method_name>`, and it supports 26 English letters, numbers, connectors, and underscores, it should start with a letter. The last character cannot be `-` or `_`. Available length is 2-60.
	// +kubebuilder:validation:Optional
	Handler *string `json:"handler,omitempty" tf:"handler,omitempty"`

	// Image of the SCF function, conflict with cos_bucket_name, cos_object_name, cos_bucket_region, zip_file.
	// Image of the SCF function, conflict with `cos_bucket_name`, `cos_object_name`, `cos_bucket_region`, `zip_file`.
	// +kubebuilder:validation:Optional
	ImageConfig []ImageConfigParameters `json:"imageConfig,omitempty" tf:"image_config,omitempty"`

	// Intranet access configuration.
	// Intranet access configuration.
	// +kubebuilder:validation:Optional
	IntranetConfig []IntranetConfigParameters `json:"intranetConfig,omitempty" tf:"intranet_config,omitempty"`

	// Enable L5 for SCF function, default is false.
	// Enable L5 for SCF function, default is `false`.
	// +kubebuilder:validation:Optional
	L5Enable *bool `json:"l5Enable,omitempty" tf:"l5_enable,omitempty"`

	// The list of association layers.
	// The list of association layers.
	// +kubebuilder:validation:Optional
	Layers []LayersParameters `json:"layers,omitempty" tf:"layers,omitempty"`

	// Memory size of the SCF function, unit is MB. The default is 128MB. The ladder is 128M.
	// Memory size of the SCF function, unit is MB. The default is `128`MB. The ladder is 128M.
	// +kubebuilder:validation:Optional
	MemSize *float64 `json:"memSize,omitempty" tf:"mem_size,omitempty"`

	// Name of the SCF function. Name supports 26 English letters, numbers, connectors, and underscores, it should start with a letter. The last character cannot be - or _. Available length is 2-60.
	// Name of the SCF function. Name supports 26 English letters, numbers, connectors, and underscores, it should start with a letter. The last character cannot be `-` or `_`. Available length is 2-60.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Namespace of the SCF function, default is default.
	// Namespace of the SCF function, default is `default`.
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Role of the SCF function.
	// Role of the SCF function.
	// +kubebuilder:validation:Optional
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// Runtime of the SCF function, only supports Python2.7, Python3.6, Nodejs6.10, Nodejs8.9, Nodejs10.15, Nodejs12.16, Php5.2, Php7.4, Go1, Java8, and CustomRuntime, default is Python2.7.
	// Runtime of the SCF function, only supports `Python2.7`, `Python3.6`, `Nodejs6.10`, `Nodejs8.9`, `Nodejs10.15`, `Nodejs12.16`, `Php5.2`, `Php7.4`, `Go1`, `Java8`, and `CustomRuntime`, default is `Python2.7`.
	// +kubebuilder:validation:Optional
	Runtime *string `json:"runtime,omitempty" tf:"runtime,omitempty"`

	// Subnet ID of the SCF function.
	// Subnet ID of the SCF function.
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Tags of the SCF function.
	// Tags of the SCF function.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Timeout of the SCF function, unit is second. Default 3. Available value is 1-900.
	// Timeout of the SCF function, unit is second. Default `3`. Available value is 1-900.
	// +kubebuilder:validation:Optional
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// Trigger list of the SCF function, note that if you modify the trigger list, all existing triggers will be deleted, and then create triggers in the new list. Each element contains the following attributes:
	// Trigger list of the SCF function, note that if you modify the trigger list, all existing triggers will be deleted, and then create triggers in the new list. Each element contains the following attributes:
	// +kubebuilder:validation:Optional
	Triggers []TriggersParameters `json:"triggers,omitempty" tf:"triggers,omitempty"`

	// VPC ID of the SCF function.
	// VPC ID of the SCF function.
	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// Zip file of the SCF function, conflict with cos_bucket_name, cos_object_name, cos_bucket_region.
	// Zip file of the SCF function, conflict with `cos_bucket_name`, `cos_object_name`, `cos_bucket_region`.
	// +kubebuilder:validation:Optional
	ZipFile *string `json:"zipFile,omitempty" tf:"zip_file,omitempty"`
}

type ImageConfigInitParameters struct {

	// the parameters of command.
	// the parameters of command.
	Args *string `json:"args,omitempty" tf:"args,omitempty"`

	// The command of entrypoint.
	// The command of entrypoint.
	Command *string `json:"command,omitempty" tf:"command,omitempty"`

	// Image accelerate switch.
	// Image accelerate switch.
	ContainerImageAccelerate *bool `json:"containerImageAccelerate,omitempty" tf:"container_image_accelerate,omitempty"`

	// The entrypoint of app.
	// The entrypoint of app.
	EntryPoint *string `json:"entryPoint,omitempty" tf:"entry_point,omitempty"`

	// Image function port setting. Default is 9000, -1 indicates no port mirroring function. Other value ranges 0 ~ 65535.
	// Image function port setting. Default is `9000`, -1 indicates no port mirroring function. Other value ranges 0 ~ 65535.
	ImagePort *float64 `json:"imagePort,omitempty" tf:"image_port,omitempty"`

	// The image type. personal or enterprise.
	// The image type. personal or enterprise.
	ImageType *string `json:"imageType,omitempty" tf:"image_type,omitempty"`

	// The uri of image.
	// The uri of image.
	ImageURI *string `json:"imageUri,omitempty" tf:"image_uri,omitempty"`

	// The registry id of TCR. When image type is enterprise, it must be set.
	// The registry id of TCR. When image type is enterprise, it must be set.
	RegistryID *string `json:"registryId,omitempty" tf:"registry_id,omitempty"`
}

type ImageConfigObservation struct {

	// the parameters of command.
	// the parameters of command.
	Args *string `json:"args,omitempty" tf:"args,omitempty"`

	// The command of entrypoint.
	// The command of entrypoint.
	Command *string `json:"command,omitempty" tf:"command,omitempty"`

	// Image accelerate switch.
	// Image accelerate switch.
	ContainerImageAccelerate *bool `json:"containerImageAccelerate,omitempty" tf:"container_image_accelerate,omitempty"`

	// The entrypoint of app.
	// The entrypoint of app.
	EntryPoint *string `json:"entryPoint,omitempty" tf:"entry_point,omitempty"`

	// Image function port setting. Default is 9000, -1 indicates no port mirroring function. Other value ranges 0 ~ 65535.
	// Image function port setting. Default is `9000`, -1 indicates no port mirroring function. Other value ranges 0 ~ 65535.
	ImagePort *float64 `json:"imagePort,omitempty" tf:"image_port,omitempty"`

	// The image type. personal or enterprise.
	// The image type. personal or enterprise.
	ImageType *string `json:"imageType,omitempty" tf:"image_type,omitempty"`

	// The uri of image.
	// The uri of image.
	ImageURI *string `json:"imageUri,omitempty" tf:"image_uri,omitempty"`

	// The registry id of TCR. When image type is enterprise, it must be set.
	// The registry id of TCR. When image type is enterprise, it must be set.
	RegistryID *string `json:"registryId,omitempty" tf:"registry_id,omitempty"`
}

type ImageConfigParameters struct {

	// the parameters of command.
	// the parameters of command.
	// +kubebuilder:validation:Optional
	Args *string `json:"args,omitempty" tf:"args,omitempty"`

	// The command of entrypoint.
	// The command of entrypoint.
	// +kubebuilder:validation:Optional
	Command *string `json:"command,omitempty" tf:"command,omitempty"`

	// Image accelerate switch.
	// Image accelerate switch.
	// +kubebuilder:validation:Optional
	ContainerImageAccelerate *bool `json:"containerImageAccelerate,omitempty" tf:"container_image_accelerate,omitempty"`

	// The entrypoint of app.
	// The entrypoint of app.
	// +kubebuilder:validation:Optional
	EntryPoint *string `json:"entryPoint,omitempty" tf:"entry_point,omitempty"`

	// Image function port setting. Default is 9000, -1 indicates no port mirroring function. Other value ranges 0 ~ 65535.
	// Image function port setting. Default is `9000`, -1 indicates no port mirroring function. Other value ranges 0 ~ 65535.
	// +kubebuilder:validation:Optional
	ImagePort *float64 `json:"imagePort,omitempty" tf:"image_port,omitempty"`

	// The image type. personal or enterprise.
	// The image type. personal or enterprise.
	// +kubebuilder:validation:Optional
	ImageType *string `json:"imageType" tf:"image_type,omitempty"`

	// The uri of image.
	// The uri of image.
	// +kubebuilder:validation:Optional
	ImageURI *string `json:"imageUri" tf:"image_uri,omitempty"`

	// The registry id of TCR. When image type is enterprise, it must be set.
	// The registry id of TCR. When image type is enterprise, it must be set.
	// +kubebuilder:validation:Optional
	RegistryID *string `json:"registryId,omitempty" tf:"registry_id,omitempty"`
}

type IntranetConfigInitParameters struct {

	// Whether to enable fixed intranet IP, ENABLE is enabled, DISABLE is disabled.
	// Whether to enable fixed intranet IP, ENABLE is enabled, DISABLE is disabled.
	IPFixed *string `json:"ipFixed,omitempty" tf:"ip_fixed,omitempty"`
}

type IntranetConfigObservation struct {

	// If fixed intranet IP is enabled, this field returns the IP list used.
	IPAddress []*string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// Whether to enable fixed intranet IP, ENABLE is enabled, DISABLE is disabled.
	// Whether to enable fixed intranet IP, ENABLE is enabled, DISABLE is disabled.
	IPFixed *string `json:"ipFixed,omitempty" tf:"ip_fixed,omitempty"`
}

type IntranetConfigParameters struct {

	// Whether to enable fixed intranet IP, ENABLE is enabled, DISABLE is disabled.
	// Whether to enable fixed intranet IP, ENABLE is enabled, DISABLE is disabled.
	// +kubebuilder:validation:Optional
	IPFixed *string `json:"ipFixed" tf:"ip_fixed,omitempty"`
}

type LayersInitParameters struct {

	// The name of Layer.
	// The name of Layer.
	LayerName *string `json:"layerName,omitempty" tf:"layer_name,omitempty"`

	// The version of layer.
	// The version of layer.
	LayerVersion *float64 `json:"layerVersion,omitempty" tf:"layer_version,omitempty"`
}

type LayersObservation struct {

	// The name of Layer.
	// The name of Layer.
	LayerName *string `json:"layerName,omitempty" tf:"layer_name,omitempty"`

	// The version of layer.
	// The version of layer.
	LayerVersion *float64 `json:"layerVersion,omitempty" tf:"layer_version,omitempty"`
}

type LayersParameters struct {

	// The name of Layer.
	// The name of Layer.
	// +kubebuilder:validation:Optional
	LayerName *string `json:"layerName" tf:"layer_name,omitempty"`

	// The version of layer.
	// The version of layer.
	// +kubebuilder:validation:Optional
	LayerVersion *float64 `json:"layerVersion" tf:"layer_version,omitempty"`
}

type TriggerInfoInitParameters struct {
}

type TriggerInfoObservation struct {

	// Create time of SCF function trigger.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// User-defined parameters of SCF function trigger.
	CustomArgument *string `json:"customArgument,omitempty" tf:"custom_argument,omitempty"`

	// Whether SCF function trigger is enable.
	Enable *bool `json:"enable,omitempty" tf:"enable,omitempty"`

	// SCF function last modified time.
	ModifyTime *string `json:"modifyTime,omitempty" tf:"modify_time,omitempty"`

	// Name of the SCF function. Name supports 26 English letters, numbers, connectors, and underscores, it should start with a letter. The last character cannot be - or _. Available length is 2-60.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// TriggerDesc of the SCF function trigger, parameter format of timer is linux cron expression; parameter of cos type is json string {"bucketUrl":"<name-appid>.cos.<region>.myqcloud.com","event":"cos:ObjectCreated:*","filter":{"Prefix":"","Suffix":""}}, where bucketUrl is cos bucket , event is the cos event trigger, Prefix is the corresponding file prefix filter condition, Suffix is the suffix filter condition, if not need filter condition can not pass; cmq type does not pass this parameter; ckafka type parameter format is json string {"maxMsgNum":"1","offset":"latest"}; apigw type parameter format is json string {"api":{"authRequired":"FALSE","requestConfig":{"method":"ANY"},"isIntegratedResponse":"FALSE"},"service":{"serviceId":"service-dqzh68sg"},"release":{"environmentName":"test"}}.
	TriggerDesc *string `json:"triggerDesc,omitempty" tf:"trigger_desc,omitempty"`

	// Type of the SCF function trigger, support timer, ckafka, custom_kafka, apigw, cmq, cos, mqtt, cls, clb, mps, vod, cm, eb, http.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TriggerInfoParameters struct {
}

type TriggersInitParameters struct {

	// Region of cos bucket. if type is cos, cos_region is required.
	// Region of cos bucket. if `type` is `cos`, `cos_region` is required.
	CosRegion *string `json:"cosRegion,omitempty" tf:"cos_region,omitempty"`

	// Name of the SCF function. Name supports 26 English letters, numbers, connectors, and underscores, it should start with a letter. The last character cannot be - or _. Available length is 2-60.
	// Name of the SCF function trigger, if `type` is `ckafka`, the format of name must be `<ckafkaInstanceId>-<topicId>`; if `type` is `cos`, the name is cos bucket id, other In any case, it can be combined arbitrarily. It can only contain English letters, numbers, connectors and underscores. The maximum length is 100.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// TriggerDesc of the SCF function trigger, parameter format of timer is linux cron expression; parameter of cos type is json string {"bucketUrl":"<name-appid>.cos.<region>.myqcloud.com","event":"cos:ObjectCreated:*","filter":{"Prefix":"","Suffix":""}}, where bucketUrl is cos bucket , event is the cos event trigger, Prefix is the corresponding file prefix filter condition, Suffix is the suffix filter condition, if not need filter condition can not pass; cmq type does not pass this parameter; ckafka type parameter format is json string {"maxMsgNum":"1","offset":"latest"}; apigw type parameter format is json string {"api":{"authRequired":"FALSE","requestConfig":{"method":"ANY"},"isIntegratedResponse":"FALSE"},"service":{"serviceId":"service-dqzh68sg"},"release":{"environmentName":"test"}}.
	// TriggerDesc of the SCF function trigger, parameter format of `timer` is linux cron expression; parameter of `cos` type is json string `{"bucketUrl":"<name-appid>.cos.<region>.myqcloud.com","event":"cos:ObjectCreated:*","filter":{"Prefix":"","Suffix":""}}`, where `bucketUrl` is cos bucket (optional), `event` is the cos event trigger, `Prefix` is the corresponding file prefix filter condition, `Suffix` is the suffix filter condition, if not need filter condition can not pass; `cmq` type does not pass this parameter; `ckafka` type parameter format is json string `{"maxMsgNum":"1","offset":"latest"}`; `apigw` type parameter format is json string `{"api":{"authRequired":"FALSE","requestConfig":{"method":"ANY"},"isIntegratedResponse":"FALSE"},"service":{"serviceId":"service-dqzh68sg"},"release":{"environmentName":"test"}}`.
	TriggerDesc *string `json:"triggerDesc,omitempty" tf:"trigger_desc,omitempty"`

	// Type of the SCF function trigger, support timer, ckafka, custom_kafka, apigw, cmq, cos, mqtt, cls, clb, mps, vod, cm, eb, http.
	// Type of the SCF function trigger, support `timer`, `ckafka`, `custom_kafka`, `apigw`, `cmq`, `cos`, `mqtt`, `cls`, `clb`, `mps`, `vod`, `cm`, `eb`, `http`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TriggersObservation struct {

	// Region of cos bucket. if type is cos, cos_region is required.
	// Region of cos bucket. if `type` is `cos`, `cos_region` is required.
	CosRegion *string `json:"cosRegion,omitempty" tf:"cos_region,omitempty"`

	// Name of the SCF function. Name supports 26 English letters, numbers, connectors, and underscores, it should start with a letter. The last character cannot be - or _. Available length is 2-60.
	// Name of the SCF function trigger, if `type` is `ckafka`, the format of name must be `<ckafkaInstanceId>-<topicId>`; if `type` is `cos`, the name is cos bucket id, other In any case, it can be combined arbitrarily. It can only contain English letters, numbers, connectors and underscores. The maximum length is 100.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// TriggerDesc of the SCF function trigger, parameter format of timer is linux cron expression; parameter of cos type is json string {"bucketUrl":"<name-appid>.cos.<region>.myqcloud.com","event":"cos:ObjectCreated:*","filter":{"Prefix":"","Suffix":""}}, where bucketUrl is cos bucket , event is the cos event trigger, Prefix is the corresponding file prefix filter condition, Suffix is the suffix filter condition, if not need filter condition can not pass; cmq type does not pass this parameter; ckafka type parameter format is json string {"maxMsgNum":"1","offset":"latest"}; apigw type parameter format is json string {"api":{"authRequired":"FALSE","requestConfig":{"method":"ANY"},"isIntegratedResponse":"FALSE"},"service":{"serviceId":"service-dqzh68sg"},"release":{"environmentName":"test"}}.
	// TriggerDesc of the SCF function trigger, parameter format of `timer` is linux cron expression; parameter of `cos` type is json string `{"bucketUrl":"<name-appid>.cos.<region>.myqcloud.com","event":"cos:ObjectCreated:*","filter":{"Prefix":"","Suffix":""}}`, where `bucketUrl` is cos bucket (optional), `event` is the cos event trigger, `Prefix` is the corresponding file prefix filter condition, `Suffix` is the suffix filter condition, if not need filter condition can not pass; `cmq` type does not pass this parameter; `ckafka` type parameter format is json string `{"maxMsgNum":"1","offset":"latest"}`; `apigw` type parameter format is json string `{"api":{"authRequired":"FALSE","requestConfig":{"method":"ANY"},"isIntegratedResponse":"FALSE"},"service":{"serviceId":"service-dqzh68sg"},"release":{"environmentName":"test"}}`.
	TriggerDesc *string `json:"triggerDesc,omitempty" tf:"trigger_desc,omitempty"`

	// Type of the SCF function trigger, support timer, ckafka, custom_kafka, apigw, cmq, cos, mqtt, cls, clb, mps, vod, cm, eb, http.
	// Type of the SCF function trigger, support `timer`, `ckafka`, `custom_kafka`, `apigw`, `cmq`, `cos`, `mqtt`, `cls`, `clb`, `mps`, `vod`, `cm`, `eb`, `http`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TriggersParameters struct {

	// Region of cos bucket. if type is cos, cos_region is required.
	// Region of cos bucket. if `type` is `cos`, `cos_region` is required.
	// +kubebuilder:validation:Optional
	CosRegion *string `json:"cosRegion,omitempty" tf:"cos_region,omitempty"`

	// Name of the SCF function. Name supports 26 English letters, numbers, connectors, and underscores, it should start with a letter. The last character cannot be - or _. Available length is 2-60.
	// Name of the SCF function trigger, if `type` is `ckafka`, the format of name must be `<ckafkaInstanceId>-<topicId>`; if `type` is `cos`, the name is cos bucket id, other In any case, it can be combined arbitrarily. It can only contain English letters, numbers, connectors and underscores. The maximum length is 100.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// TriggerDesc of the SCF function trigger, parameter format of timer is linux cron expression; parameter of cos type is json string {"bucketUrl":"<name-appid>.cos.<region>.myqcloud.com","event":"cos:ObjectCreated:*","filter":{"Prefix":"","Suffix":""}}, where bucketUrl is cos bucket , event is the cos event trigger, Prefix is the corresponding file prefix filter condition, Suffix is the suffix filter condition, if not need filter condition can not pass; cmq type does not pass this parameter; ckafka type parameter format is json string {"maxMsgNum":"1","offset":"latest"}; apigw type parameter format is json string {"api":{"authRequired":"FALSE","requestConfig":{"method":"ANY"},"isIntegratedResponse":"FALSE"},"service":{"serviceId":"service-dqzh68sg"},"release":{"environmentName":"test"}}.
	// TriggerDesc of the SCF function trigger, parameter format of `timer` is linux cron expression; parameter of `cos` type is json string `{"bucketUrl":"<name-appid>.cos.<region>.myqcloud.com","event":"cos:ObjectCreated:*","filter":{"Prefix":"","Suffix":""}}`, where `bucketUrl` is cos bucket (optional), `event` is the cos event trigger, `Prefix` is the corresponding file prefix filter condition, `Suffix` is the suffix filter condition, if not need filter condition can not pass; `cmq` type does not pass this parameter; `ckafka` type parameter format is json string `{"maxMsgNum":"1","offset":"latest"}`; `apigw` type parameter format is json string `{"api":{"authRequired":"FALSE","requestConfig":{"method":"ANY"},"isIntegratedResponse":"FALSE"},"service":{"serviceId":"service-dqzh68sg"},"release":{"environmentName":"test"}}`.
	// +kubebuilder:validation:Optional
	TriggerDesc *string `json:"triggerDesc" tf:"trigger_desc,omitempty"`

	// Type of the SCF function trigger, support timer, ckafka, custom_kafka, apigw, cmq, cos, mqtt, cls, clb, mps, vod, cm, eb, http.
	// Type of the SCF function trigger, support `timer`, `ckafka`, `custom_kafka`, `apigw`, `cmq`, `cos`, `mqtt`, `cls`, `clb`, `mps`, `vod`, `cm`, `eb`, `http`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

// FunctionSpec defines the desired state of Function
type FunctionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FunctionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider FunctionInitParameters `json:"initProvider,omitempty"`
}

// FunctionStatus defines the observed state of Function.
type FunctionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FunctionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Function is the Schema for the Functions API. Provide a resource to create a SCF function.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type Function struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   FunctionSpec   `json:"spec"`
	Status FunctionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FunctionList contains a list of Functions
type FunctionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Function `json:"items"`
}

// Repository type metadata.
var (
	Function_Kind             = "Function"
	Function_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Function_Kind}.String()
	Function_KindAPIVersion   = Function_Kind + "." + CRDGroupVersion.String()
	Function_GroupVersionKind = CRDGroupVersion.WithKind(Function_Kind)
)

func init() {
	SchemeBuilder.Register(&Function{}, &FunctionList{})
}
