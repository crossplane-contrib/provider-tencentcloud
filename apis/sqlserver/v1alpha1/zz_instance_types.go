/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type InstanceInitParameters struct {

	// Automatic renewal sign. 0 for normal renewal, 1 for automatic renewal (Default). Only valid when purchasing a prepaid instance.
	// Automatic renewal sign. 0 for normal renewal, 1 for automatic renewal (Default). Only valid when purchasing a prepaid instance.
	AutoRenew *float64 `json:"autoRenew,omitempty" tf:"auto_renew,omitempty"`

	// Whether to use the voucher automatically; 1 for yes, 0 for no, the default is 0.
	// Whether to use the voucher automatically; 1 for yes, 0 for no, the default is 0.
	AutoVoucher *float64 `json:"autoVoucher,omitempty" tf:"auto_voucher,omitempty"`

	// Availability zone.
	// Availability zone.
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// Pay type of the SQL Server instance. Available values PREPAID, POSTPAID_BY_HOUR.
	// Pay type of the SQL Server instance. Available values `PREPAID`, `POSTPAID_BY_HOUR`.
	ChargeType *string `json:"chargeType,omitempty" tf:"charge_type,omitempty"`

	// Version of the SQL Server database engine. Allowed values are 2008R2(SQL Server 2008 Enterprise), 2012SP3(SQL Server 2012 Enterprise), 2016SP1 (SQL Server 2016 Enterprise), 201602(SQL Server 2016 Standard) and 2017(SQL Server 2017 Enterprise). Default is 2008R2.
	// Version of the SQL Server database engine. Allowed values are `2008R2`(SQL Server 2008 Enterprise), `2012SP3`(SQL Server 2012 Enterprise), `2016SP1` (SQL Server 2016 Enterprise), `201602`(SQL Server 2016 Standard) and `2017`(SQL Server 2017 Enterprise). Default is `2008R2`.
	EngineVersion *string `json:"engineVersion,omitempty" tf:"engine_version,omitempty"`

	// It has been deprecated from version 1.81.136. Instance type. DUAL (dual-server high availability), CLUSTER (cluster). Default is DUAL.
	// Instance type. `DUAL` (dual-server high availability), `CLUSTER` (cluster). Default is `DUAL`.
	HaType *string `json:"haType,omitempty" tf:"ha_type,omitempty"`

	// Start time of the maintenance in one day, format like HH:mm.
	// Start time of the maintenance in one day, format like `HH:mm`.
	MaintenanceStartTime *string `json:"maintenanceStartTime,omitempty" tf:"maintenance_start_time,omitempty"`

	// The timespan of maintenance in one day, unit is hour.
	// The timespan of maintenance in one day, unit is hour.
	MaintenanceTimeSpan *float64 `json:"maintenanceTimeSpan,omitempty" tf:"maintenance_time_span,omitempty"`

	// A list of integer indicates weekly maintenance. For example, [2,7] presents do weekly maintenance on every Tuesday and Sunday.
	// A list of integer indicates weekly maintenance. For example, [2,7] presents do weekly maintenance on every Tuesday and Sunday.
	// +listType=set
	MaintenanceWeekSet []*float64 `json:"maintenanceWeekSet,omitempty" tf:"maintenance_week_set,omitempty"`

	// Memory size (in GB). Allowed value must be larger than memory that data source tencentcloud_sqlserver_specinfos provides.
	// Memory size (in GB). Allowed value must be larger than `memory` that data source `tencentcloud_sqlserver_specinfos` provides.
	Memory *float64 `json:"memory,omitempty" tf:"memory,omitempty"`

	// Indicate whether to deploy across availability zones.
	// Indicate whether to deploy across availability zones.
	MultiZones *bool `json:"multiZones,omitempty" tf:"multi_zones,omitempty"`

	// Name of the SQL Server instance.
	// Name of the SQL Server instance.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Purchase instance period in month. The value does not exceed 48.
	// Purchase instance period in month. The value does not exceed 48.
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// Project ID, default value is 0.
	// Project ID, default value is 0.
	ProjectID *float64 `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Security group bound to the instance.
	// Security group bound to the instance.
	// +listType=set
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// Disk size (in GB). Allowed value must be a multiple of 10. The storage must be set with the limit of storage_min and storage_max which data source tencentcloud_sqlserver_specinfos provides.
	// Disk size (in GB). Allowed value must be a multiple of 10. The storage must be set with the limit of `storage_min` and `storage_max` which data source `tencentcloud_sqlserver_specinfos` provides.
	Storage *float64 `json:"storage,omitempty" tf:"storage,omitempty"`

	// ID of subnet.
	// ID of subnet.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-tencentcloud/apis/vpc/v1alpha1.Subnet
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`

	// The tags of the SQL Server.
	// The tags of the SQL Server.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// System time zone, default: China Standard Time.
	// System time zone, default: `China Standard Time`.
	TimeZone *string `json:"timeZone,omitempty" tf:"time_zone,omitempty"`

	// ID of VPC.
	// ID of VPC.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-tencentcloud/apis/vpc/v1alpha1.VPC
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// Reference to a VPC in vpc to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDRef *v1.Reference `json:"vpcIdRef,omitempty" tf:"-"`

	// Selector for a VPC in vpc to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDSelector *v1.Selector `json:"vpcIdSelector,omitempty" tf:"-"`

	// An array of voucher IDs, currently only one can be used for a single order.
	// An array of voucher IDs, currently only one can be used for a single order.
	// +listType=set
	VoucherIds []*string `json:"voucherIds,omitempty" tf:"voucher_ids,omitempty"`

	// It has been deprecated from version 1.81.2. The way to execute the allocation. Supported values include: 0 - execute immediately, 1 - execute in maintenance window.
	// The way to execute the allocation. Supported values include: 0 - execute immediately, 1 - execute in maintenance window.
	WaitSwitch *float64 `json:"waitSwitch,omitempty" tf:"wait_switch,omitempty"`
}

type InstanceObservation struct {

	// Automatic renewal sign. 0 for normal renewal, 1 for automatic renewal (Default). Only valid when purchasing a prepaid instance.
	// Automatic renewal sign. 0 for normal renewal, 1 for automatic renewal (Default). Only valid when purchasing a prepaid instance.
	AutoRenew *float64 `json:"autoRenew,omitempty" tf:"auto_renew,omitempty"`

	// Whether to use the voucher automatically; 1 for yes, 0 for no, the default is 0.
	// Whether to use the voucher automatically; 1 for yes, 0 for no, the default is 0.
	AutoVoucher *float64 `json:"autoVoucher,omitempty" tf:"auto_voucher,omitempty"`

	// Availability zone.
	// Availability zone.
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// Pay type of the SQL Server instance. Available values PREPAID, POSTPAID_BY_HOUR.
	// Pay type of the SQL Server instance. Available values `PREPAID`, `POSTPAID_BY_HOUR`.
	ChargeType *string `json:"chargeType,omitempty" tf:"charge_type,omitempty"`

	// Create time of the SQL Server instance.
	// Create time of the SQL Server instance.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// Internet address domain name.
	// Internet address domain name.
	DNSPodDomain *string `json:"dnsPodDomain,omitempty" tf:"dns_pod_domain,omitempty"`

	// Version of the SQL Server database engine. Allowed values are 2008R2(SQL Server 2008 Enterprise), 2012SP3(SQL Server 2012 Enterprise), 2016SP1 (SQL Server 2016 Enterprise), 201602(SQL Server 2016 Standard) and 2017(SQL Server 2017 Enterprise). Default is 2008R2.
	// Version of the SQL Server database engine. Allowed values are `2008R2`(SQL Server 2008 Enterprise), `2012SP3`(SQL Server 2012 Enterprise), `2016SP1` (SQL Server 2016 Enterprise), `201602`(SQL Server 2016 Standard) and `2017`(SQL Server 2017 Enterprise). Default is `2008R2`.
	EngineVersion *string `json:"engineVersion,omitempty" tf:"engine_version,omitempty"`

	// It has been deprecated from version 1.81.136. Instance type. DUAL (dual-server high availability), CLUSTER (cluster). Default is DUAL.
	// Instance type. `DUAL` (dual-server high availability), `CLUSTER` (cluster). Default is `DUAL`.
	HaType *string `json:"haType,omitempty" tf:"ha_type,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Start time of the maintenance in one day, format like HH:mm.
	// Start time of the maintenance in one day, format like `HH:mm`.
	MaintenanceStartTime *string `json:"maintenanceStartTime,omitempty" tf:"maintenance_start_time,omitempty"`

	// The timespan of maintenance in one day, unit is hour.
	// The timespan of maintenance in one day, unit is hour.
	MaintenanceTimeSpan *float64 `json:"maintenanceTimeSpan,omitempty" tf:"maintenance_time_span,omitempty"`

	// A list of integer indicates weekly maintenance. For example, [2,7] presents do weekly maintenance on every Tuesday and Sunday.
	// A list of integer indicates weekly maintenance. For example, [2,7] presents do weekly maintenance on every Tuesday and Sunday.
	// +listType=set
	MaintenanceWeekSet []*float64 `json:"maintenanceWeekSet,omitempty" tf:"maintenance_week_set,omitempty"`

	// Memory size (in GB). Allowed value must be larger than memory that data source tencentcloud_sqlserver_specinfos provides.
	// Memory size (in GB). Allowed value must be larger than `memory` that data source `tencentcloud_sqlserver_specinfos` provides.
	Memory *float64 `json:"memory,omitempty" tf:"memory,omitempty"`

	// Indicate whether to deploy across availability zones.
	// Indicate whether to deploy across availability zones.
	MultiZones *bool `json:"multiZones,omitempty" tf:"multi_zones,omitempty"`

	// Name of the SQL Server instance.
	// Name of the SQL Server instance.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Purchase instance period in month. The value does not exceed 48.
	// Purchase instance period in month. The value does not exceed 48.
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// Project ID, default value is 0.
	// Project ID, default value is 0.
	ProjectID *float64 `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Readonly flag. RO (read-only instance), MASTER (primary instance with read-only instances). If it is left empty, it refers to an instance which is not read-only and has no RO group.
	// Readonly flag. `RO` (read-only instance), `MASTER` (primary instance with read-only instances). If it is left empty, it refers to an instance which is not read-only and has no RO group.
	RoFlag *string `json:"roFlag,omitempty" tf:"ro_flag,omitempty"`

	// Security group bound to the instance.
	// Security group bound to the instance.
	// +listType=set
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// Status of the SQL Server instance. 1 for applying, 2 for running, 3 for running with limit, 4 for isolated, 5 for recycling, 6 for recycled, 7 for running with task, 8 for off-line, 9 for expanding, 10 for migrating, 11 for readonly, 12 for rebooting.
	// Status of the SQL Server instance. 1 for applying, 2 for running, 3 for running with limit, 4 for isolated, 5 for recycling, 6 for recycled, 7 for running with task, 8 for off-line, 9 for expanding, 10 for migrating, 11 for readonly, 12 for rebooting.
	Status *float64 `json:"status,omitempty" tf:"status,omitempty"`

	// Disk size (in GB). Allowed value must be a multiple of 10. The storage must be set with the limit of storage_min and storage_max which data source tencentcloud_sqlserver_specinfos provides.
	// Disk size (in GB). Allowed value must be a multiple of 10. The storage must be set with the limit of `storage_min` and `storage_max` which data source `tencentcloud_sqlserver_specinfos` provides.
	Storage *float64 `json:"storage,omitempty" tf:"storage,omitempty"`

	// ID of subnet.
	// ID of subnet.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// The tags of the SQL Server.
	// The tags of the SQL Server.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// External port number.
	// External port number.
	TgwWanVport *float64 `json:"tgwWanVport,omitempty" tf:"tgw_wan_vport,omitempty"`

	// System time zone, default: China Standard Time.
	// System time zone, default: `China Standard Time`.
	TimeZone *string `json:"timeZone,omitempty" tf:"time_zone,omitempty"`

	// ID of VPC.
	// ID of VPC.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// IP for private access.
	// IP for private access.
	Vip *string `json:"vip,omitempty" tf:"vip,omitempty"`

	// An array of voucher IDs, currently only one can be used for a single order.
	// An array of voucher IDs, currently only one can be used for a single order.
	// +listType=set
	VoucherIds []*string `json:"voucherIds,omitempty" tf:"voucher_ids,omitempty"`

	// Port for private access.
	// Port for private access.
	Vport *float64 `json:"vport,omitempty" tf:"vport,omitempty"`

	// It has been deprecated from version 1.81.2. The way to execute the allocation. Supported values include: 0 - execute immediately, 1 - execute in maintenance window.
	// The way to execute the allocation. Supported values include: 0 - execute immediately, 1 - execute in maintenance window.
	WaitSwitch *float64 `json:"waitSwitch,omitempty" tf:"wait_switch,omitempty"`
}

type InstanceParameters struct {

	// Automatic renewal sign. 0 for normal renewal, 1 for automatic renewal (Default). Only valid when purchasing a prepaid instance.
	// Automatic renewal sign. 0 for normal renewal, 1 for automatic renewal (Default). Only valid when purchasing a prepaid instance.
	// +kubebuilder:validation:Optional
	AutoRenew *float64 `json:"autoRenew,omitempty" tf:"auto_renew,omitempty"`

	// Whether to use the voucher automatically; 1 for yes, 0 for no, the default is 0.
	// Whether to use the voucher automatically; 1 for yes, 0 for no, the default is 0.
	// +kubebuilder:validation:Optional
	AutoVoucher *float64 `json:"autoVoucher,omitempty" tf:"auto_voucher,omitempty"`

	// Availability zone.
	// Availability zone.
	// +kubebuilder:validation:Optional
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// Pay type of the SQL Server instance. Available values PREPAID, POSTPAID_BY_HOUR.
	// Pay type of the SQL Server instance. Available values `PREPAID`, `POSTPAID_BY_HOUR`.
	// +kubebuilder:validation:Optional
	ChargeType *string `json:"chargeType,omitempty" tf:"charge_type,omitempty"`

	// Version of the SQL Server database engine. Allowed values are 2008R2(SQL Server 2008 Enterprise), 2012SP3(SQL Server 2012 Enterprise), 2016SP1 (SQL Server 2016 Enterprise), 201602(SQL Server 2016 Standard) and 2017(SQL Server 2017 Enterprise). Default is 2008R2.
	// Version of the SQL Server database engine. Allowed values are `2008R2`(SQL Server 2008 Enterprise), `2012SP3`(SQL Server 2012 Enterprise), `2016SP1` (SQL Server 2016 Enterprise), `201602`(SQL Server 2016 Standard) and `2017`(SQL Server 2017 Enterprise). Default is `2008R2`.
	// +kubebuilder:validation:Optional
	EngineVersion *string `json:"engineVersion,omitempty" tf:"engine_version,omitempty"`

	// It has been deprecated from version 1.81.136. Instance type. DUAL (dual-server high availability), CLUSTER (cluster). Default is DUAL.
	// Instance type. `DUAL` (dual-server high availability), `CLUSTER` (cluster). Default is `DUAL`.
	// +kubebuilder:validation:Optional
	HaType *string `json:"haType,omitempty" tf:"ha_type,omitempty"`

	// Start time of the maintenance in one day, format like HH:mm.
	// Start time of the maintenance in one day, format like `HH:mm`.
	// +kubebuilder:validation:Optional
	MaintenanceStartTime *string `json:"maintenanceStartTime,omitempty" tf:"maintenance_start_time,omitempty"`

	// The timespan of maintenance in one day, unit is hour.
	// The timespan of maintenance in one day, unit is hour.
	// +kubebuilder:validation:Optional
	MaintenanceTimeSpan *float64 `json:"maintenanceTimeSpan,omitempty" tf:"maintenance_time_span,omitempty"`

	// A list of integer indicates weekly maintenance. For example, [2,7] presents do weekly maintenance on every Tuesday and Sunday.
	// A list of integer indicates weekly maintenance. For example, [2,7] presents do weekly maintenance on every Tuesday and Sunday.
	// +kubebuilder:validation:Optional
	// +listType=set
	MaintenanceWeekSet []*float64 `json:"maintenanceWeekSet,omitempty" tf:"maintenance_week_set,omitempty"`

	// Memory size (in GB). Allowed value must be larger than memory that data source tencentcloud_sqlserver_specinfos provides.
	// Memory size (in GB). Allowed value must be larger than `memory` that data source `tencentcloud_sqlserver_specinfos` provides.
	// +kubebuilder:validation:Optional
	Memory *float64 `json:"memory,omitempty" tf:"memory,omitempty"`

	// Indicate whether to deploy across availability zones.
	// Indicate whether to deploy across availability zones.
	// +kubebuilder:validation:Optional
	MultiZones *bool `json:"multiZones,omitempty" tf:"multi_zones,omitempty"`

	// Name of the SQL Server instance.
	// Name of the SQL Server instance.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Purchase instance period in month. The value does not exceed 48.
	// Purchase instance period in month. The value does not exceed 48.
	// +kubebuilder:validation:Optional
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// Project ID, default value is 0.
	// Project ID, default value is 0.
	// +kubebuilder:validation:Optional
	ProjectID *float64 `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Security group bound to the instance.
	// Security group bound to the instance.
	// +kubebuilder:validation:Optional
	// +listType=set
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// Disk size (in GB). Allowed value must be a multiple of 10. The storage must be set with the limit of storage_min and storage_max which data source tencentcloud_sqlserver_specinfos provides.
	// Disk size (in GB). Allowed value must be a multiple of 10. The storage must be set with the limit of `storage_min` and `storage_max` which data source `tencentcloud_sqlserver_specinfos` provides.
	// +kubebuilder:validation:Optional
	Storage *float64 `json:"storage,omitempty" tf:"storage,omitempty"`

	// ID of subnet.
	// ID of subnet.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-tencentcloud/apis/vpc/v1alpha1.Subnet
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`

	// The tags of the SQL Server.
	// The tags of the SQL Server.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// System time zone, default: China Standard Time.
	// System time zone, default: `China Standard Time`.
	// +kubebuilder:validation:Optional
	TimeZone *string `json:"timeZone,omitempty" tf:"time_zone,omitempty"`

	// ID of VPC.
	// ID of VPC.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-tencentcloud/apis/vpc/v1alpha1.VPC
	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// Reference to a VPC in vpc to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDRef *v1.Reference `json:"vpcIdRef,omitempty" tf:"-"`

	// Selector for a VPC in vpc to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDSelector *v1.Selector `json:"vpcIdSelector,omitempty" tf:"-"`

	// An array of voucher IDs, currently only one can be used for a single order.
	// An array of voucher IDs, currently only one can be used for a single order.
	// +kubebuilder:validation:Optional
	// +listType=set
	VoucherIds []*string `json:"voucherIds,omitempty" tf:"voucher_ids,omitempty"`

	// It has been deprecated from version 1.81.2. The way to execute the allocation. Supported values include: 0 - execute immediately, 1 - execute in maintenance window.
	// The way to execute the allocation. Supported values include: 0 - execute immediately, 1 - execute in maintenance window.
	// +kubebuilder:validation:Optional
	WaitSwitch *float64 `json:"waitSwitch,omitempty" tf:"wait_switch,omitempty"`
}

// InstanceSpec defines the desired state of Instance
type InstanceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     InstanceParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider InstanceInitParameters `json:"initProvider,omitempty"`
}

// InstanceStatus defines the observed state of Instance.
type InstanceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InstanceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Instance is the Schema for the Instances API. Use this resource to create SQL Server instance
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type Instance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.memory) || (has(self.initProvider) && has(self.initProvider.memory))",message="spec.forProvider.memory is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.storage) || (has(self.initProvider) && has(self.initProvider.storage))",message="spec.forProvider.storage is a required parameter"
	Spec   InstanceSpec   `json:"spec"`
	Status InstanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InstanceList contains a list of Instances
type InstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Instance `json:"items"`
}

// Repository type metadata.
var (
	Instance_Kind             = "Instance"
	Instance_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Instance_Kind}.String()
	Instance_KindAPIVersion   = Instance_Kind + "." + CRDGroupVersion.String()
	Instance_GroupVersionKind = CRDGroupVersion.WithKind(Instance_Kind)
)

func init() {
	SchemeBuilder.Register(&Instance{}, &InstanceList{})
}
