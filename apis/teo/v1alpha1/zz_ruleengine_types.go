/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ActionsCodeActionInitParameters struct {

	// Feature name. You can call the DescribeRulesSetting API to view the requirements for entering the feature name.
	// Feature name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the feature name.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Operation parameter.
	// Operation parameter.
	Parameters []CodeActionParametersInitParameters `json:"parameters,omitempty" tf:"parameters,omitempty"`
}

type ActionsCodeActionObservation struct {

	// Feature name. You can call the DescribeRulesSetting API to view the requirements for entering the feature name.
	// Feature name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the feature name.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Operation parameter.
	// Operation parameter.
	Parameters []CodeActionParametersObservation `json:"parameters,omitempty" tf:"parameters,omitempty"`
}

type ActionsCodeActionParameters struct {

	// Feature name. You can call the DescribeRulesSetting API to view the requirements for entering the feature name.
	// Feature name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the feature name.
	// +kubebuilder:validation:Optional
	Action *string `json:"action" tf:"action,omitempty"`

	// Operation parameter.
	// Operation parameter.
	// +kubebuilder:validation:Optional
	Parameters []CodeActionParametersParameters `json:"parameters" tf:"parameters,omitempty"`
}

type ActionsInitParameters struct {

	// Feature operation with a status code. Features of this type include:
	// Feature operation with a status code. Features of this type include:
	// - `ErrorPage`: Custom error page.
	// - `StatusCodeCache`: Status code cache TTL.
	// Note: This field may return null, indicating that no valid values can be obtained.
	CodeAction []CodeActionInitParameters `json:"codeAction,omitempty" tf:"code_action,omitempty"`

	// Common operation. Values:
	// Common operation. Values:
	// - `AccessUrlRedirect`: Access URL rewrite.
	// - `UpstreamUrlRedirect`: Origin-pull URL rewrite.
	// - `QUIC`: QUIC.
	// - `WebSocket`: WebSocket.
	// - `VideoSeek`: Video dragging.
	// - `Authentication`: Token authentication.
	// - `CacheKey`: Custom cache key.
	// - `Cache`: Node cache TTL.
	// - `MaxAge`: Browser cache TTL.
	// - `OfflineCache`: Offline cache.
	// - `SmartRouting`: Smart acceleration.
	// - `RangeOriginPull`: Range GETs.
	// - `UpstreamHttp2`: HTTP/2 forwarding.
	// - `HostHeader`: Host header rewrite.
	// - `ForceRedirect`: Force HTTPS.
	// - `OriginPullProtocol`: Origin-pull HTTPS.
	// - `CachePrefresh`: Cache prefresh.
	// - `Compression`: Smart compression.
	// - `Hsts`.
	// - `ClientIpHeader`.
	// - `SslTlsSecureConf`.
	// - `OcspStapling`.
	// - `Http2`: HTTP/2 access.
	// - `UpstreamFollowRedirect`: Follow origin redirect.
	// - `Origin`: Origin.
	// Note: This field may return `null`, indicating that no valid value can be obtained.
	NormalAction []NormalActionInitParameters `json:"normalAction,omitempty" tf:"normal_action,omitempty"`

	// Feature operation with a request/response header. Features of this type include:
	// Feature operation with a request/response header. Features of this type include:
	// - `RequestHeader`: HTTP request header modification.
	// - `ResponseHeader`: HTTP response header modification.
	// Note: This field may return null, indicating that no valid values can be obtained.
	RewriteAction []RewriteActionInitParameters `json:"rewriteAction,omitempty" tf:"rewrite_action,omitempty"`
}

type ActionsNormalActionInitParameters struct {

	// Feature name. You can call the DescribeRulesSetting API to view the requirements for entering the feature name.
	// Feature name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the feature name.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Operation parameter.
	// Parameter.
	Parameters []ActionsNormalActionParametersInitParameters `json:"parameters,omitempty" tf:"parameters,omitempty"`
}

type ActionsNormalActionObservation struct {

	// Feature name. You can call the DescribeRulesSetting API to view the requirements for entering the feature name.
	// Feature name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the feature name.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Operation parameter.
	// Parameter.
	Parameters []ActionsNormalActionParametersObservation `json:"parameters,omitempty" tf:"parameters,omitempty"`
}

type ActionsNormalActionParameters struct {

	// Feature name. You can call the DescribeRulesSetting API to view the requirements for entering the feature name.
	// Feature name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the feature name.
	// +kubebuilder:validation:Optional
	Action *string `json:"action" tf:"action,omitempty"`

	// Operation parameter.
	// Parameter.
	// +kubebuilder:validation:Optional
	Parameters []ActionsNormalActionParametersParameters `json:"parameters" tf:"parameters,omitempty"`
}

type ActionsNormalActionParametersInitParameters struct {

	// The parameter name of the match type. This field is required only when Target=query_string/request_header.
	// Parameter name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the parameter name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The parameter value of the match type. It can be an empty string only when Target=query string/request header and Operator=exist/notexist.
	// The parameter value.
	// +listType=set
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type ActionsNormalActionParametersObservation struct {

	// The parameter name of the match type. This field is required only when Target=query_string/request_header.
	// Parameter name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the parameter name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The parameter value of the match type. It can be an empty string only when Target=query string/request header and Operator=exist/notexist.
	// The parameter value.
	// +listType=set
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type ActionsNormalActionParametersParameters struct {

	// The parameter name of the match type. This field is required only when Target=query_string/request_header.
	// Parameter name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the parameter name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// The parameter value of the match type. It can be an empty string only when Target=query string/request header and Operator=exist/notexist.
	// The parameter value.
	// +kubebuilder:validation:Optional
	// +listType=set
	Values []*string `json:"values" tf:"values,omitempty"`
}

type ActionsObservation struct {

	// Feature operation with a status code. Features of this type include:
	// Feature operation with a status code. Features of this type include:
	// - `ErrorPage`: Custom error page.
	// - `StatusCodeCache`: Status code cache TTL.
	// Note: This field may return null, indicating that no valid values can be obtained.
	CodeAction []CodeActionObservation `json:"codeAction,omitempty" tf:"code_action,omitempty"`

	// Common operation. Values:
	// Common operation. Values:
	// - `AccessUrlRedirect`: Access URL rewrite.
	// - `UpstreamUrlRedirect`: Origin-pull URL rewrite.
	// - `QUIC`: QUIC.
	// - `WebSocket`: WebSocket.
	// - `VideoSeek`: Video dragging.
	// - `Authentication`: Token authentication.
	// - `CacheKey`: Custom cache key.
	// - `Cache`: Node cache TTL.
	// - `MaxAge`: Browser cache TTL.
	// - `OfflineCache`: Offline cache.
	// - `SmartRouting`: Smart acceleration.
	// - `RangeOriginPull`: Range GETs.
	// - `UpstreamHttp2`: HTTP/2 forwarding.
	// - `HostHeader`: Host header rewrite.
	// - `ForceRedirect`: Force HTTPS.
	// - `OriginPullProtocol`: Origin-pull HTTPS.
	// - `CachePrefresh`: Cache prefresh.
	// - `Compression`: Smart compression.
	// - `Hsts`.
	// - `ClientIpHeader`.
	// - `SslTlsSecureConf`.
	// - `OcspStapling`.
	// - `Http2`: HTTP/2 access.
	// - `UpstreamFollowRedirect`: Follow origin redirect.
	// - `Origin`: Origin.
	// Note: This field may return `null`, indicating that no valid value can be obtained.
	NormalAction []NormalActionObservation `json:"normalAction,omitempty" tf:"normal_action,omitempty"`

	// Feature operation with a request/response header. Features of this type include:
	// Feature operation with a request/response header. Features of this type include:
	// - `RequestHeader`: HTTP request header modification.
	// - `ResponseHeader`: HTTP response header modification.
	// Note: This field may return null, indicating that no valid values can be obtained.
	RewriteAction []RewriteActionObservation `json:"rewriteAction,omitempty" tf:"rewrite_action,omitempty"`
}

type ActionsParameters struct {

	// Feature operation with a status code. Features of this type include:
	// Feature operation with a status code. Features of this type include:
	// - `ErrorPage`: Custom error page.
	// - `StatusCodeCache`: Status code cache TTL.
	// Note: This field may return null, indicating that no valid values can be obtained.
	// +kubebuilder:validation:Optional
	CodeAction []CodeActionParameters `json:"codeAction,omitempty" tf:"code_action,omitempty"`

	// Common operation. Values:
	// Common operation. Values:
	// - `AccessUrlRedirect`: Access URL rewrite.
	// - `UpstreamUrlRedirect`: Origin-pull URL rewrite.
	// - `QUIC`: QUIC.
	// - `WebSocket`: WebSocket.
	// - `VideoSeek`: Video dragging.
	// - `Authentication`: Token authentication.
	// - `CacheKey`: Custom cache key.
	// - `Cache`: Node cache TTL.
	// - `MaxAge`: Browser cache TTL.
	// - `OfflineCache`: Offline cache.
	// - `SmartRouting`: Smart acceleration.
	// - `RangeOriginPull`: Range GETs.
	// - `UpstreamHttp2`: HTTP/2 forwarding.
	// - `HostHeader`: Host header rewrite.
	// - `ForceRedirect`: Force HTTPS.
	// - `OriginPullProtocol`: Origin-pull HTTPS.
	// - `CachePrefresh`: Cache prefresh.
	// - `Compression`: Smart compression.
	// - `Hsts`.
	// - `ClientIpHeader`.
	// - `SslTlsSecureConf`.
	// - `OcspStapling`.
	// - `Http2`: HTTP/2 access.
	// - `UpstreamFollowRedirect`: Follow origin redirect.
	// - `Origin`: Origin.
	// Note: This field may return `null`, indicating that no valid value can be obtained.
	// +kubebuilder:validation:Optional
	NormalAction []NormalActionParameters `json:"normalAction,omitempty" tf:"normal_action,omitempty"`

	// Feature operation with a request/response header. Features of this type include:
	// Feature operation with a request/response header. Features of this type include:
	// - `RequestHeader`: HTTP request header modification.
	// - `ResponseHeader`: HTTP response header modification.
	// Note: This field may return null, indicating that no valid values can be obtained.
	// +kubebuilder:validation:Optional
	RewriteAction []RewriteActionParameters `json:"rewriteAction,omitempty" tf:"rewrite_action,omitempty"`
}

type ActionsRewriteActionInitParameters struct {

	// Feature name. You can call the DescribeRulesSetting API to view the requirements for entering the feature name.
	// Feature name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the feature name.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Operation parameter.
	// Parameter.
	Parameters []ActionsRewriteActionParametersInitParameters `json:"parameters,omitempty" tf:"parameters,omitempty"`
}

type ActionsRewriteActionObservation struct {

	// Feature name. You can call the DescribeRulesSetting API to view the requirements for entering the feature name.
	// Feature name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the feature name.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Operation parameter.
	// Parameter.
	Parameters []ActionsRewriteActionParametersObservation `json:"parameters,omitempty" tf:"parameters,omitempty"`
}

type ActionsRewriteActionParameters struct {

	// Feature name. You can call the DescribeRulesSetting API to view the requirements for entering the feature name.
	// Feature name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the feature name.
	// +kubebuilder:validation:Optional
	Action *string `json:"action" tf:"action,omitempty"`

	// Operation parameter.
	// Parameter.
	// +kubebuilder:validation:Optional
	Parameters []ActionsRewriteActionParametersParameters `json:"parameters" tf:"parameters,omitempty"`
}

type ActionsRewriteActionParametersInitParameters struct {

	// Feature name. You can call the DescribeRulesSetting API to view the requirements for entering the feature name.
	// Feature parameter name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the parameter name, which has three values:
	// - add: Add the HTTP header.
	// - set: Rewrite the HTTP header.
	// - del: Delete the HTTP header.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// The parameter name of the match type. This field is required only when Target=query_string/request_header.
	// Parameter name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The parameter value of the match type. It can be an empty string only when Target=query string/request header and Operator=exist/notexist.
	// Parameter value.
	// +listType=set
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type ActionsRewriteActionParametersObservation struct {

	// Feature name. You can call the DescribeRulesSetting API to view the requirements for entering the feature name.
	// Feature parameter name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the parameter name, which has three values:
	// - add: Add the HTTP header.
	// - set: Rewrite the HTTP header.
	// - del: Delete the HTTP header.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// The parameter name of the match type. This field is required only when Target=query_string/request_header.
	// Parameter name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The parameter value of the match type. It can be an empty string only when Target=query string/request header and Operator=exist/notexist.
	// Parameter value.
	// +listType=set
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type ActionsRewriteActionParametersParameters struct {

	// Feature name. You can call the DescribeRulesSetting API to view the requirements for entering the feature name.
	// Feature parameter name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the parameter name, which has three values:
	// - add: Add the HTTP header.
	// - set: Rewrite the HTTP header.
	// - del: Delete the HTTP header.
	// +kubebuilder:validation:Optional
	Action *string `json:"action" tf:"action,omitempty"`

	// The parameter name of the match type. This field is required only when Target=query_string/request_header.
	// Parameter name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// The parameter value of the match type. It can be an empty string only when Target=query string/request header and Operator=exist/notexist.
	// Parameter value.
	// +kubebuilder:validation:Optional
	// +listType=set
	Values []*string `json:"values" tf:"values,omitempty"`
}

type AndInitParameters struct {

	// Whether the parameter value is case insensitive. Default value: false.
	// Whether the parameter value is case insensitive. Default value: false.
	IgnoreCase *bool `json:"ignoreCase,omitempty" tf:"ignore_case,omitempty"`

	// The parameter name of the match type. This field is required only when Target=query_string/request_header.
	// The parameter name of the match type. This field is required only when `Target=query_string/request_header`.
	// - `query_string`: Name of the query string, such as "lang" and "version" in "lang=cn&version=1".
	// - `request_header`: Name of the HTTP request header, such as "Accept-Language" in the "Accept-Language:zh-CN,zh;q=0.9" header.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Operator. Valid values:
	// Operator. Valid values:
	// - `equal`: Equal.
	// - `notEqual`: Does not equal.
	// - `exist`: Exists.
	// - `notexist`: Does not exist.
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// The match type. Values:
	// The match type. Values:
	// - `filename`: File name.
	// - `extension`: File extension.
	// - `host`: Host.
	// - `full_url`: Full URL, which indicates the complete URL path under the current site and must contain the HTTP protocol, host, and path.
	// - `url`: Partial URL under the current site.
	// - `client_country`: Country/Region of the client.
	// - `query_string`: Query string in the request URL.
	// - `request_header`: HTTP request header.
	// - `client_ip`: Client IP.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// The parameter value of the match type. It can be an empty string only when Target=query string/request header and Operator=exist/notexist.
	// The parameter value of the match type. It can be an empty string only when `Target=query string/request header` and `Operator=exist/notexist`.
	// - When `Target=extension`, enter the file extension, such as "jpg" and "txt".
	// - When `Target=filename`, enter the file name, such as "foo" in "foo.jpg".
	// - When `Target=all`, it indicates any site request.
	// - When `Target=host`, enter the host under the current site, such as "www.maxx55.com".
	// - When `Target=url`, enter the partial URL path under the current site, such as "/example".
	// - When `Target=full_url`, enter the complete URL under the current site. It must contain the HTTP protocol, host, and path, such as "https://www.maxx55.cn/example".
	// - When `Target=client_country`, enter the ISO-3166 country/region code.
	// - When `Target=query_string`, enter the value of the query string, such as "cn" and "1" in "lang=cn&version=1".
	// - When `Target=request_header`, enter the HTTP request header value, such as "zh-CN,zh;q=0.9" in the "Accept-Language:zh-CN,zh;q=0.9" header.
	// +listType=set
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type AndObservation struct {

	// Whether the parameter value is case insensitive. Default value: false.
	// Whether the parameter value is case insensitive. Default value: false.
	IgnoreCase *bool `json:"ignoreCase,omitempty" tf:"ignore_case,omitempty"`

	// The parameter name of the match type. This field is required only when Target=query_string/request_header.
	// The parameter name of the match type. This field is required only when `Target=query_string/request_header`.
	// - `query_string`: Name of the query string, such as "lang" and "version" in "lang=cn&version=1".
	// - `request_header`: Name of the HTTP request header, such as "Accept-Language" in the "Accept-Language:zh-CN,zh;q=0.9" header.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Operator. Valid values:
	// Operator. Valid values:
	// - `equal`: Equal.
	// - `notEqual`: Does not equal.
	// - `exist`: Exists.
	// - `notexist`: Does not exist.
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// The match type. Values:
	// The match type. Values:
	// - `filename`: File name.
	// - `extension`: File extension.
	// - `host`: Host.
	// - `full_url`: Full URL, which indicates the complete URL path under the current site and must contain the HTTP protocol, host, and path.
	// - `url`: Partial URL under the current site.
	// - `client_country`: Country/Region of the client.
	// - `query_string`: Query string in the request URL.
	// - `request_header`: HTTP request header.
	// - `client_ip`: Client IP.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// The parameter value of the match type. It can be an empty string only when Target=query string/request header and Operator=exist/notexist.
	// The parameter value of the match type. It can be an empty string only when `Target=query string/request header` and `Operator=exist/notexist`.
	// - When `Target=extension`, enter the file extension, such as "jpg" and "txt".
	// - When `Target=filename`, enter the file name, such as "foo" in "foo.jpg".
	// - When `Target=all`, it indicates any site request.
	// - When `Target=host`, enter the host under the current site, such as "www.maxx55.com".
	// - When `Target=url`, enter the partial URL path under the current site, such as "/example".
	// - When `Target=full_url`, enter the complete URL under the current site. It must contain the HTTP protocol, host, and path, such as "https://www.maxx55.cn/example".
	// - When `Target=client_country`, enter the ISO-3166 country/region code.
	// - When `Target=query_string`, enter the value of the query string, such as "cn" and "1" in "lang=cn&version=1".
	// - When `Target=request_header`, enter the HTTP request header value, such as "zh-CN,zh;q=0.9" in the "Accept-Language:zh-CN,zh;q=0.9" header.
	// +listType=set
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type AndParameters struct {

	// Whether the parameter value is case insensitive. Default value: false.
	// Whether the parameter value is case insensitive. Default value: false.
	// +kubebuilder:validation:Optional
	IgnoreCase *bool `json:"ignoreCase,omitempty" tf:"ignore_case,omitempty"`

	// The parameter name of the match type. This field is required only when Target=query_string/request_header.
	// The parameter name of the match type. This field is required only when `Target=query_string/request_header`.
	// - `query_string`: Name of the query string, such as "lang" and "version" in "lang=cn&version=1".
	// - `request_header`: Name of the HTTP request header, such as "Accept-Language" in the "Accept-Language:zh-CN,zh;q=0.9" header.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Operator. Valid values:
	// Operator. Valid values:
	// - `equal`: Equal.
	// - `notEqual`: Does not equal.
	// - `exist`: Exists.
	// - `notexist`: Does not exist.
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// The match type. Values:
	// The match type. Values:
	// - `filename`: File name.
	// - `extension`: File extension.
	// - `host`: Host.
	// - `full_url`: Full URL, which indicates the complete URL path under the current site and must contain the HTTP protocol, host, and path.
	// - `url`: Partial URL under the current site.
	// - `client_country`: Country/Region of the client.
	// - `query_string`: Query string in the request URL.
	// - `request_header`: HTTP request header.
	// - `client_ip`: Client IP.
	// +kubebuilder:validation:Optional
	Target *string `json:"target" tf:"target,omitempty"`

	// The parameter value of the match type. It can be an empty string only when Target=query string/request header and Operator=exist/notexist.
	// The parameter value of the match type. It can be an empty string only when `Target=query string/request header` and `Operator=exist/notexist`.
	// - When `Target=extension`, enter the file extension, such as "jpg" and "txt".
	// - When `Target=filename`, enter the file name, such as "foo" in "foo.jpg".
	// - When `Target=all`, it indicates any site request.
	// - When `Target=host`, enter the host under the current site, such as "www.maxx55.com".
	// - When `Target=url`, enter the partial URL path under the current site, such as "/example".
	// - When `Target=full_url`, enter the complete URL under the current site. It must contain the HTTP protocol, host, and path, such as "https://www.maxx55.cn/example".
	// - When `Target=client_country`, enter the ISO-3166 country/region code.
	// - When `Target=query_string`, enter the value of the query string, such as "cn" and "1" in "lang=cn&version=1".
	// - When `Target=request_header`, enter the HTTP request header value, such as "zh-CN,zh;q=0.9" in the "Accept-Language:zh-CN,zh;q=0.9" header.
	// +kubebuilder:validation:Optional
	// +listType=set
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type CodeActionInitParameters struct {

	// Feature name. You can call the DescribeRulesSetting API to view the requirements for entering the feature name.
	// Feature name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the feature name.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Operation parameter.
	// Operation parameter.
	Parameters []ParametersInitParameters `json:"parameters,omitempty" tf:"parameters,omitempty"`
}

type CodeActionObservation struct {

	// Feature name. You can call the DescribeRulesSetting API to view the requirements for entering the feature name.
	// Feature name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the feature name.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Operation parameter.
	// Operation parameter.
	Parameters []ParametersObservation `json:"parameters,omitempty" tf:"parameters,omitempty"`
}

type CodeActionParameters struct {

	// Feature name. You can call the DescribeRulesSetting API to view the requirements for entering the feature name.
	// Feature name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the feature name.
	// +kubebuilder:validation:Optional
	Action *string `json:"action" tf:"action,omitempty"`

	// Operation parameter.
	// Operation parameter.
	// +kubebuilder:validation:Optional
	Parameters []ParametersParameters `json:"parameters" tf:"parameters,omitempty"`
}

type CodeActionParametersInitParameters struct {

	// The parameter name of the match type. This field is required only when Target=query_string/request_header.
	// The parameter name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the parameter name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The status code.
	// The status code.
	StatusCode *float64 `json:"statusCode,omitempty" tf:"status_code,omitempty"`

	// The parameter value of the match type. It can be an empty string only when Target=query string/request header and Operator=exist/notexist.
	// The parameter value.
	// +listType=set
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type CodeActionParametersObservation struct {

	// The parameter name of the match type. This field is required only when Target=query_string/request_header.
	// The parameter name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the parameter name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The status code.
	// The status code.
	StatusCode *float64 `json:"statusCode,omitempty" tf:"status_code,omitempty"`

	// The parameter value of the match type. It can be an empty string only when Target=query string/request header and Operator=exist/notexist.
	// The parameter value.
	// +listType=set
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type CodeActionParametersParameters struct {

	// The parameter name of the match type. This field is required only when Target=query_string/request_header.
	// The parameter name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the parameter name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// The status code.
	// The status code.
	// +kubebuilder:validation:Optional
	StatusCode *float64 `json:"statusCode" tf:"status_code,omitempty"`

	// The parameter value of the match type. It can be an empty string only when Target=query string/request header and Operator=exist/notexist.
	// The parameter value.
	// +kubebuilder:validation:Optional
	// +listType=set
	Values []*string `json:"values" tf:"values,omitempty"`
}

type NormalActionInitParameters struct {

	// Feature name. You can call the DescribeRulesSetting API to view the requirements for entering the feature name.
	// Feature name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the feature name.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Operation parameter.
	// Parameter.
	Parameters []NormalActionParametersInitParameters `json:"parameters,omitempty" tf:"parameters,omitempty"`
}

type NormalActionObservation struct {

	// Feature name. You can call the DescribeRulesSetting API to view the requirements for entering the feature name.
	// Feature name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the feature name.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Operation parameter.
	// Parameter.
	Parameters []NormalActionParametersObservation `json:"parameters,omitempty" tf:"parameters,omitempty"`
}

type NormalActionParameters struct {

	// Feature name. You can call the DescribeRulesSetting API to view the requirements for entering the feature name.
	// Feature name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the feature name.
	// +kubebuilder:validation:Optional
	Action *string `json:"action" tf:"action,omitempty"`

	// Operation parameter.
	// Parameter.
	// +kubebuilder:validation:Optional
	Parameters []NormalActionParametersParameters `json:"parameters" tf:"parameters,omitempty"`
}

type NormalActionParametersInitParameters struct {

	// The parameter name of the match type. This field is required only when Target=query_string/request_header.
	// Parameter name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the parameter name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The parameter value of the match type. It can be an empty string only when Target=query string/request header and Operator=exist/notexist.
	// The parameter value.
	// +listType=set
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type NormalActionParametersObservation struct {

	// The parameter name of the match type. This field is required only when Target=query_string/request_header.
	// Parameter name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the parameter name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The parameter value of the match type. It can be an empty string only when Target=query string/request header and Operator=exist/notexist.
	// The parameter value.
	// +listType=set
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type NormalActionParametersParameters struct {

	// The parameter name of the match type. This field is required only when Target=query_string/request_header.
	// Parameter name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the parameter name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// The parameter value of the match type. It can be an empty string only when Target=query string/request header and Operator=exist/notexist.
	// The parameter value.
	// +kubebuilder:validation:Optional
	// +listType=set
	Values []*string `json:"values" tf:"values,omitempty"`
}

type OrAndInitParameters struct {

	// Whether the parameter value is case insensitive. Default value: false.
	// Whether the parameter value is case insensitive. Default value: false.
	IgnoreCase *bool `json:"ignoreCase,omitempty" tf:"ignore_case,omitempty"`

	// The parameter name of the match type. This field is required only when Target=query_string/request_header.
	// The parameter name of the match type. This field is required only when `Target=query_string/request_header`.
	// - `query_string`: Name of the query string, such as "lang" and "version" in "lang=cn&version=1".
	// - `request_header`: Name of the HTTP request header, such as "Accept-Language" in the "Accept-Language:zh-CN,zh;q=0.9" header.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Operator. Valid values:
	// Operator. Valid values:
	// - `equal`: Equal.
	// - `notEqual`: Does not equal.
	// - `exist`: Exists.
	// - `notexist`: Does not exist.
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// The match type. Values:
	// The match type. Values:
	// - `filename`: File name.
	// - `extension`: File extension.
	// - `host`: Host.
	// - `full_url`: Full URL, which indicates the complete URL path under the current site and must contain the HTTP protocol, host, and path.
	// - `url`: Partial URL under the current site.  - `client_country`: Country/Region of the client.
	// - `query_string`: Query string in the request URL.
	// - `request_header`: HTTP request header.
	// - `client_ip`: Client IP.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// The parameter value of the match type. It can be an empty string only when Target=query string/request header and Operator=exist/notexist.
	// The parameter value of the match type. It can be an empty string only when `Target=query string/request header` and `Operator=exist/notexist`.
	// - When `Target=extension`, enter the file extension, such as "jpg" and "txt".
	// - When `Target=filename`, enter the file name, such as "foo" in "foo.jpg".
	// - When `Target=all`, it indicates any site request.
	// - When `Target=host`, enter the host under the current site, such as "www.maxx55.com".
	// - When `Target=url`, enter the partial URL path under the current site, such as "/example".
	// - When `Target=full_url`, enter the complete URL under the current site. It must contain the HTTP protocol, host, and path, such as "https://www.maxx55.cn/example".
	// - When `Target=client_country`, enter the ISO-3166 country/region code.
	// - When `Target=query_string`, enter the value of the query string, such as "cn" and "1" in "lang=cn&version=1".
	// - When `Target=request_header`, enter the HTTP request header value, such as "zh-CN,zh;q=0.9" in the "Accept-Language:zh-CN,zh;q=0.9" header.
	// +listType=set
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type OrAndObservation struct {

	// Whether the parameter value is case insensitive. Default value: false.
	// Whether the parameter value is case insensitive. Default value: false.
	IgnoreCase *bool `json:"ignoreCase,omitempty" tf:"ignore_case,omitempty"`

	// The parameter name of the match type. This field is required only when Target=query_string/request_header.
	// The parameter name of the match type. This field is required only when `Target=query_string/request_header`.
	// - `query_string`: Name of the query string, such as "lang" and "version" in "lang=cn&version=1".
	// - `request_header`: Name of the HTTP request header, such as "Accept-Language" in the "Accept-Language:zh-CN,zh;q=0.9" header.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Operator. Valid values:
	// Operator. Valid values:
	// - `equal`: Equal.
	// - `notEqual`: Does not equal.
	// - `exist`: Exists.
	// - `notexist`: Does not exist.
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// The match type. Values:
	// The match type. Values:
	// - `filename`: File name.
	// - `extension`: File extension.
	// - `host`: Host.
	// - `full_url`: Full URL, which indicates the complete URL path under the current site and must contain the HTTP protocol, host, and path.
	// - `url`: Partial URL under the current site.  - `client_country`: Country/Region of the client.
	// - `query_string`: Query string in the request URL.
	// - `request_header`: HTTP request header.
	// - `client_ip`: Client IP.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// The parameter value of the match type. It can be an empty string only when Target=query string/request header and Operator=exist/notexist.
	// The parameter value of the match type. It can be an empty string only when `Target=query string/request header` and `Operator=exist/notexist`.
	// - When `Target=extension`, enter the file extension, such as "jpg" and "txt".
	// - When `Target=filename`, enter the file name, such as "foo" in "foo.jpg".
	// - When `Target=all`, it indicates any site request.
	// - When `Target=host`, enter the host under the current site, such as "www.maxx55.com".
	// - When `Target=url`, enter the partial URL path under the current site, such as "/example".
	// - When `Target=full_url`, enter the complete URL under the current site. It must contain the HTTP protocol, host, and path, such as "https://www.maxx55.cn/example".
	// - When `Target=client_country`, enter the ISO-3166 country/region code.
	// - When `Target=query_string`, enter the value of the query string, such as "cn" and "1" in "lang=cn&version=1".
	// - When `Target=request_header`, enter the HTTP request header value, such as "zh-CN,zh;q=0.9" in the "Accept-Language:zh-CN,zh;q=0.9" header.
	// +listType=set
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type OrAndParameters struct {

	// Whether the parameter value is case insensitive. Default value: false.
	// Whether the parameter value is case insensitive. Default value: false.
	// +kubebuilder:validation:Optional
	IgnoreCase *bool `json:"ignoreCase,omitempty" tf:"ignore_case,omitempty"`

	// The parameter name of the match type. This field is required only when Target=query_string/request_header.
	// The parameter name of the match type. This field is required only when `Target=query_string/request_header`.
	// - `query_string`: Name of the query string, such as "lang" and "version" in "lang=cn&version=1".
	// - `request_header`: Name of the HTTP request header, such as "Accept-Language" in the "Accept-Language:zh-CN,zh;q=0.9" header.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Operator. Valid values:
	// Operator. Valid values:
	// - `equal`: Equal.
	// - `notEqual`: Does not equal.
	// - `exist`: Exists.
	// - `notexist`: Does not exist.
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// The match type. Values:
	// The match type. Values:
	// - `filename`: File name.
	// - `extension`: File extension.
	// - `host`: Host.
	// - `full_url`: Full URL, which indicates the complete URL path under the current site and must contain the HTTP protocol, host, and path.
	// - `url`: Partial URL under the current site.  - `client_country`: Country/Region of the client.
	// - `query_string`: Query string in the request URL.
	// - `request_header`: HTTP request header.
	// - `client_ip`: Client IP.
	// +kubebuilder:validation:Optional
	Target *string `json:"target" tf:"target,omitempty"`

	// The parameter value of the match type. It can be an empty string only when Target=query string/request header and Operator=exist/notexist.
	// The parameter value of the match type. It can be an empty string only when `Target=query string/request header` and `Operator=exist/notexist`.
	// - When `Target=extension`, enter the file extension, such as "jpg" and "txt".
	// - When `Target=filename`, enter the file name, such as "foo" in "foo.jpg".
	// - When `Target=all`, it indicates any site request.
	// - When `Target=host`, enter the host under the current site, such as "www.maxx55.com".
	// - When `Target=url`, enter the partial URL path under the current site, such as "/example".
	// - When `Target=full_url`, enter the complete URL under the current site. It must contain the HTTP protocol, host, and path, such as "https://www.maxx55.cn/example".
	// - When `Target=client_country`, enter the ISO-3166 country/region code.
	// - When `Target=query_string`, enter the value of the query string, such as "cn" and "1" in "lang=cn&version=1".
	// - When `Target=request_header`, enter the HTTP request header value, such as "zh-CN,zh;q=0.9" in the "Accept-Language:zh-CN,zh;q=0.9" header.
	// +kubebuilder:validation:Optional
	// +listType=set
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type OrInitParameters struct {

	// AND Conditions list of the rule. Rule would be triggered if all conditions are true.
	// AND Conditions list of the rule. Rule would be triggered if all conditions are true.
	And []AndInitParameters `json:"and,omitempty" tf:"and,omitempty"`
}

type OrObservation struct {

	// AND Conditions list of the rule. Rule would be triggered if all conditions are true.
	// AND Conditions list of the rule. Rule would be triggered if all conditions are true.
	And []AndObservation `json:"and,omitempty" tf:"and,omitempty"`
}

type OrParameters struct {

	// AND Conditions list of the rule. Rule would be triggered if all conditions are true.
	// AND Conditions list of the rule. Rule would be triggered if all conditions are true.
	// +kubebuilder:validation:Optional
	And []AndParameters `json:"and" tf:"and,omitempty"`
}

type ParametersInitParameters struct {

	// The parameter name of the match type. This field is required only when Target=query_string/request_header.
	// The parameter name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the parameter name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The status code.
	// The status code.
	StatusCode *float64 `json:"statusCode,omitempty" tf:"status_code,omitempty"`

	// The parameter value of the match type. It can be an empty string only when Target=query string/request header and Operator=exist/notexist.
	// The parameter value.
	// +listType=set
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type ParametersObservation struct {

	// The parameter name of the match type. This field is required only when Target=query_string/request_header.
	// The parameter name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the parameter name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The status code.
	// The status code.
	StatusCode *float64 `json:"statusCode,omitempty" tf:"status_code,omitempty"`

	// The parameter value of the match type. It can be an empty string only when Target=query string/request header and Operator=exist/notexist.
	// The parameter value.
	// +listType=set
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type ParametersParameters struct {

	// The parameter name of the match type. This field is required only when Target=query_string/request_header.
	// The parameter name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the parameter name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// The status code.
	// The status code.
	// +kubebuilder:validation:Optional
	StatusCode *float64 `json:"statusCode" tf:"status_code,omitempty"`

	// The parameter value of the match type. It can be an empty string only when Target=query string/request header and Operator=exist/notexist.
	// The parameter value.
	// +kubebuilder:validation:Optional
	// +listType=set
	Values []*string `json:"values" tf:"values,omitempty"`
}

type RewriteActionInitParameters struct {

	// Feature name. You can call the DescribeRulesSetting API to view the requirements for entering the feature name.
	// Feature name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the feature name.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Operation parameter.
	// Parameter.
	Parameters []RewriteActionParametersInitParameters `json:"parameters,omitempty" tf:"parameters,omitempty"`
}

type RewriteActionObservation struct {

	// Feature name. You can call the DescribeRulesSetting API to view the requirements for entering the feature name.
	// Feature name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the feature name.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Operation parameter.
	// Parameter.
	Parameters []RewriteActionParametersObservation `json:"parameters,omitempty" tf:"parameters,omitempty"`
}

type RewriteActionParameters struct {

	// Feature name. You can call the DescribeRulesSetting API to view the requirements for entering the feature name.
	// Feature name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the feature name.
	// +kubebuilder:validation:Optional
	Action *string `json:"action" tf:"action,omitempty"`

	// Operation parameter.
	// Parameter.
	// +kubebuilder:validation:Optional
	Parameters []RewriteActionParametersParameters `json:"parameters" tf:"parameters,omitempty"`
}

type RewriteActionParametersInitParameters struct {

	// Feature name. You can call the DescribeRulesSetting API to view the requirements for entering the feature name.
	// Feature parameter name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the parameter name, which has three values:
	// - add: Add the HTTP header.
	// - set: Rewrite the HTTP header.
	// - del: Delete the HTTP header.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// The parameter name of the match type. This field is required only when Target=query_string/request_header.
	// Parameter name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The parameter value of the match type. It can be an empty string only when Target=query string/request header and Operator=exist/notexist.
	// Parameter value.
	// +listType=set
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type RewriteActionParametersObservation struct {

	// Feature name. You can call the DescribeRulesSetting API to view the requirements for entering the feature name.
	// Feature parameter name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the parameter name, which has three values:
	// - add: Add the HTTP header.
	// - set: Rewrite the HTTP header.
	// - del: Delete the HTTP header.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// The parameter name of the match type. This field is required only when Target=query_string/request_header.
	// Parameter name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The parameter value of the match type. It can be an empty string only when Target=query string/request header and Operator=exist/notexist.
	// Parameter value.
	// +listType=set
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type RewriteActionParametersParameters struct {

	// Feature name. You can call the DescribeRulesSetting API to view the requirements for entering the feature name.
	// Feature parameter name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the parameter name, which has three values:
	// - add: Add the HTTP header.
	// - set: Rewrite the HTTP header.
	// - del: Delete the HTTP header.
	// +kubebuilder:validation:Optional
	Action *string `json:"action" tf:"action,omitempty"`

	// The parameter name of the match type. This field is required only when Target=query_string/request_header.
	// Parameter name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// The parameter value of the match type. It can be an empty string only when Target=query string/request header and Operator=exist/notexist.
	// Parameter value.
	// +kubebuilder:validation:Optional
	// +listType=set
	Values []*string `json:"values" tf:"values,omitempty"`
}

type RuleEngineInitParameters struct {

	// The rule name (1 to 255 characters).
	// The rule name (1 to 255 characters).
	RuleName *string `json:"ruleName,omitempty" tf:"rule_name,omitempty"`

	// Rule items list.
	// Rule items list.
	Rules []RulesInitParameters `json:"rules,omitempty" tf:"rules,omitempty"`

	// Rule status. Values:
	// Rule status. Values:
	// - `enable`: Enabled.
	// - `disable`: Disabled.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// rule tag list.
	// rule tag list.
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// ID of the site.
	// ID of the site.
	// +crossplane:generate:reference:type=Zone
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`

	// Reference to a Zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDRef *v1.Reference `json:"zoneIdRef,omitempty" tf:"-"`

	// Selector for a Zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDSelector *v1.Selector `json:"zoneIdSelector,omitempty" tf:"-"`
}

type RuleEngineObservation struct {

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Rule ID.
	// Rule ID.
	RuleID *string `json:"ruleId,omitempty" tf:"rule_id,omitempty"`

	// The rule name (1 to 255 characters).
	// The rule name (1 to 255 characters).
	RuleName *string `json:"ruleName,omitempty" tf:"rule_name,omitempty"`

	// Rule priority, the larger the value, the higher the priority, the minimum is 1.
	// Rule priority, the larger the value, the higher the priority, the minimum is 1.
	RulePriority *float64 `json:"rulePriority,omitempty" tf:"rule_priority,omitempty"`

	// Rule items list.
	// Rule items list.
	Rules []RulesObservation `json:"rules,omitempty" tf:"rules,omitempty"`

	// Rule status. Values:
	// Rule status. Values:
	// - `enable`: Enabled.
	// - `disable`: Disabled.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// rule tag list.
	// rule tag list.
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// ID of the site.
	// ID of the site.
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type RuleEngineParameters struct {

	// The rule name (1 to 255 characters).
	// The rule name (1 to 255 characters).
	// +kubebuilder:validation:Optional
	RuleName *string `json:"ruleName,omitempty" tf:"rule_name,omitempty"`

	// Rule items list.
	// Rule items list.
	// +kubebuilder:validation:Optional
	Rules []RulesParameters `json:"rules,omitempty" tf:"rules,omitempty"`

	// Rule status. Values:
	// Rule status. Values:
	// - `enable`: Enabled.
	// - `disable`: Disabled.
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// rule tag list.
	// rule tag list.
	// +kubebuilder:validation:Optional
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// ID of the site.
	// ID of the site.
	// +crossplane:generate:reference:type=Zone
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`

	// Reference to a Zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDRef *v1.Reference `json:"zoneIdRef,omitempty" tf:"-"`

	// Selector for a Zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDSelector *v1.Selector `json:"zoneIdSelector,omitempty" tf:"-"`
}

type RulesActionsInitParameters struct {

	// Feature operation with a status code. Features of this type include:
	// Feature operation with a status code. Features of this type include:
	// - `ErrorPage`: Custom error page.
	// - `StatusCodeCache`: Status code cache TTL.
	// Note: This field may return null, indicating that no valid values can be obtained.
	CodeAction []ActionsCodeActionInitParameters `json:"codeAction,omitempty" tf:"code_action,omitempty"`

	// Common operation. Values:
	// Common operation. Values:
	// - `AccessUrlRedirect`: Access URL rewrite.
	// - `UpstreamUrlRedirect`: Origin-pull URL rewrite.
	// - `QUIC`: QUIC.
	// - `WebSocket`: WebSocket.
	// - `VideoSeek`: Video dragging.
	// - `Authentication`: Token authentication.
	// - `CacheKey`: Custom cache key.
	// - `Cache`: Node cache TTL.
	// - `MaxAge`: Browser cache TTL.
	// - `OfflineCache`: Offline cache.
	// - `SmartRouting`: Smart acceleration.
	// - `RangeOriginPull`: Range GETs.
	// - `UpstreamHttp2`: HTTP/2 forwarding.
	// - `HostHeader`: Host header rewrite.
	// - `ForceRedirect`: Force HTTPS.
	// - `OriginPullProtocol`: Origin-pull HTTPS.
	// - `CachePrefresh`: Cache prefresh.
	// - `Compression`: Smart compression.
	// - `Hsts`.
	// - `ClientIpHeader`.
	// - `SslTlsSecureConf`.
	// - `OcspStapling`.
	// - `Http2`: HTTP/2 access.
	// - `UpstreamFollowRedirect`: Follow origin redirect.
	// - `Origin`: Origin.
	// Note: This field may return `null`, indicating that no valid value can be obtained.
	NormalAction []ActionsNormalActionInitParameters `json:"normalAction,omitempty" tf:"normal_action,omitempty"`

	// Feature operation with a request/response header. Features of this type include:
	// Feature operation with a request/response header. Features of this type include:
	// - `RequestHeader`: HTTP request header modification.
	// - `ResponseHeader`: HTTP response header modification.
	// Note: This field may return null, indicating that no valid values can be obtained.
	RewriteAction []ActionsRewriteActionInitParameters `json:"rewriteAction,omitempty" tf:"rewrite_action,omitempty"`
}

type RulesActionsObservation struct {

	// Feature operation with a status code. Features of this type include:
	// Feature operation with a status code. Features of this type include:
	// - `ErrorPage`: Custom error page.
	// - `StatusCodeCache`: Status code cache TTL.
	// Note: This field may return null, indicating that no valid values can be obtained.
	CodeAction []ActionsCodeActionObservation `json:"codeAction,omitempty" tf:"code_action,omitempty"`

	// Common operation. Values:
	// Common operation. Values:
	// - `AccessUrlRedirect`: Access URL rewrite.
	// - `UpstreamUrlRedirect`: Origin-pull URL rewrite.
	// - `QUIC`: QUIC.
	// - `WebSocket`: WebSocket.
	// - `VideoSeek`: Video dragging.
	// - `Authentication`: Token authentication.
	// - `CacheKey`: Custom cache key.
	// - `Cache`: Node cache TTL.
	// - `MaxAge`: Browser cache TTL.
	// - `OfflineCache`: Offline cache.
	// - `SmartRouting`: Smart acceleration.
	// - `RangeOriginPull`: Range GETs.
	// - `UpstreamHttp2`: HTTP/2 forwarding.
	// - `HostHeader`: Host header rewrite.
	// - `ForceRedirect`: Force HTTPS.
	// - `OriginPullProtocol`: Origin-pull HTTPS.
	// - `CachePrefresh`: Cache prefresh.
	// - `Compression`: Smart compression.
	// - `Hsts`.
	// - `ClientIpHeader`.
	// - `SslTlsSecureConf`.
	// - `OcspStapling`.
	// - `Http2`: HTTP/2 access.
	// - `UpstreamFollowRedirect`: Follow origin redirect.
	// - `Origin`: Origin.
	// Note: This field may return `null`, indicating that no valid value can be obtained.
	NormalAction []ActionsNormalActionObservation `json:"normalAction,omitempty" tf:"normal_action,omitempty"`

	// Feature operation with a request/response header. Features of this type include:
	// Feature operation with a request/response header. Features of this type include:
	// - `RequestHeader`: HTTP request header modification.
	// - `ResponseHeader`: HTTP response header modification.
	// Note: This field may return null, indicating that no valid values can be obtained.
	RewriteAction []ActionsRewriteActionObservation `json:"rewriteAction,omitempty" tf:"rewrite_action,omitempty"`
}

type RulesActionsParameters struct {

	// Feature operation with a status code. Features of this type include:
	// Feature operation with a status code. Features of this type include:
	// - `ErrorPage`: Custom error page.
	// - `StatusCodeCache`: Status code cache TTL.
	// Note: This field may return null, indicating that no valid values can be obtained.
	// +kubebuilder:validation:Optional
	CodeAction []ActionsCodeActionParameters `json:"codeAction,omitempty" tf:"code_action,omitempty"`

	// Common operation. Values:
	// Common operation. Values:
	// - `AccessUrlRedirect`: Access URL rewrite.
	// - `UpstreamUrlRedirect`: Origin-pull URL rewrite.
	// - `QUIC`: QUIC.
	// - `WebSocket`: WebSocket.
	// - `VideoSeek`: Video dragging.
	// - `Authentication`: Token authentication.
	// - `CacheKey`: Custom cache key.
	// - `Cache`: Node cache TTL.
	// - `MaxAge`: Browser cache TTL.
	// - `OfflineCache`: Offline cache.
	// - `SmartRouting`: Smart acceleration.
	// - `RangeOriginPull`: Range GETs.
	// - `UpstreamHttp2`: HTTP/2 forwarding.
	// - `HostHeader`: Host header rewrite.
	// - `ForceRedirect`: Force HTTPS.
	// - `OriginPullProtocol`: Origin-pull HTTPS.
	// - `CachePrefresh`: Cache prefresh.
	// - `Compression`: Smart compression.
	// - `Hsts`.
	// - `ClientIpHeader`.
	// - `SslTlsSecureConf`.
	// - `OcspStapling`.
	// - `Http2`: HTTP/2 access.
	// - `UpstreamFollowRedirect`: Follow origin redirect.
	// - `Origin`: Origin.
	// Note: This field may return `null`, indicating that no valid value can be obtained.
	// +kubebuilder:validation:Optional
	NormalAction []ActionsNormalActionParameters `json:"normalAction,omitempty" tf:"normal_action,omitempty"`

	// Feature operation with a request/response header. Features of this type include:
	// Feature operation with a request/response header. Features of this type include:
	// - `RequestHeader`: HTTP request header modification.
	// - `ResponseHeader`: HTTP response header modification.
	// Note: This field may return null, indicating that no valid values can be obtained.
	// +kubebuilder:validation:Optional
	RewriteAction []ActionsRewriteActionParameters `json:"rewriteAction,omitempty" tf:"rewrite_action,omitempty"`
}

type RulesInitParameters struct {

	// The feature to be executed.
	// Feature to be executed.
	Actions []ActionsInitParameters `json:"actions,omitempty" tf:"actions,omitempty"`

	// The condition that determines if a feature should run.
	// Note: If any condition in the array is met, the feature will run.
	// OR Conditions list of the rule. Rule would be triggered if any of the condition is true.
	Or []OrInitParameters `json:"or,omitempty" tf:"or,omitempty"`

	// The nested rule.
	// The nested rule.
	SubRules []SubRulesInitParameters `json:"subRules,omitempty" tf:"sub_rules,omitempty"`
}

type RulesObservation struct {

	// The feature to be executed.
	// Feature to be executed.
	Actions []ActionsObservation `json:"actions,omitempty" tf:"actions,omitempty"`

	// The condition that determines if a feature should run.
	// Note: If any condition in the array is met, the feature will run.
	// OR Conditions list of the rule. Rule would be triggered if any of the condition is true.
	Or []OrObservation `json:"or,omitempty" tf:"or,omitempty"`

	// The nested rule.
	// The nested rule.
	SubRules []SubRulesObservation `json:"subRules,omitempty" tf:"sub_rules,omitempty"`
}

type RulesOrInitParameters struct {

	// AND Conditions list of the rule. Rule would be triggered if all conditions are true.
	// Rule engine condition. This condition will be considered met if all items in the array are met.
	And []OrAndInitParameters `json:"and,omitempty" tf:"and,omitempty"`
}

type RulesOrObservation struct {

	// AND Conditions list of the rule. Rule would be triggered if all conditions are true.
	// Rule engine condition. This condition will be considered met if all items in the array are met.
	And []OrAndObservation `json:"and,omitempty" tf:"and,omitempty"`
}

type RulesOrParameters struct {

	// AND Conditions list of the rule. Rule would be triggered if all conditions are true.
	// Rule engine condition. This condition will be considered met if all items in the array are met.
	// +kubebuilder:validation:Optional
	And []OrAndParameters `json:"and" tf:"and,omitempty"`
}

type RulesParameters struct {

	// The feature to be executed.
	// Feature to be executed.
	// +kubebuilder:validation:Optional
	Actions []ActionsParameters `json:"actions,omitempty" tf:"actions,omitempty"`

	// The condition that determines if a feature should run.
	// Note: If any condition in the array is met, the feature will run.
	// OR Conditions list of the rule. Rule would be triggered if any of the condition is true.
	// +kubebuilder:validation:Optional
	Or []OrParameters `json:"or" tf:"or,omitempty"`

	// The nested rule.
	// The nested rule.
	// +kubebuilder:validation:Optional
	SubRules []SubRulesParameters `json:"subRules,omitempty" tf:"sub_rules,omitempty"`
}

type SubRulesInitParameters struct {

	// Rule items list.
	// Nested rule settings.
	Rules []SubRulesRulesInitParameters `json:"rules,omitempty" tf:"rules,omitempty"`

	// rule tag list.
	// Tag of the rule.
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type SubRulesObservation struct {

	// Rule items list.
	// Nested rule settings.
	Rules []SubRulesRulesObservation `json:"rules,omitempty" tf:"rules,omitempty"`

	// rule tag list.
	// Tag of the rule.
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type SubRulesParameters struct {

	// Rule items list.
	// Nested rule settings.
	// +kubebuilder:validation:Optional
	Rules []SubRulesRulesParameters `json:"rules" tf:"rules,omitempty"`

	// rule tag list.
	// Tag of the rule.
	// +kubebuilder:validation:Optional
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type SubRulesRulesInitParameters struct {

	// The feature to be executed.
	// The feature to be executed.
	Actions []RulesActionsInitParameters `json:"actions,omitempty" tf:"actions,omitempty"`

	// The condition that determines if a feature should run.
	// Note: If any condition in the array is met, the feature will run.
	// The condition that determines if a feature should run.
	// Note: If any condition in the array is met, the feature will run.
	Or []RulesOrInitParameters `json:"or,omitempty" tf:"or,omitempty"`
}

type SubRulesRulesObservation struct {

	// The feature to be executed.
	// The feature to be executed.
	Actions []RulesActionsObservation `json:"actions,omitempty" tf:"actions,omitempty"`

	// The condition that determines if a feature should run.
	// Note: If any condition in the array is met, the feature will run.
	// The condition that determines if a feature should run.
	// Note: If any condition in the array is met, the feature will run.
	Or []RulesOrObservation `json:"or,omitempty" tf:"or,omitempty"`
}

type SubRulesRulesParameters struct {

	// The feature to be executed.
	// The feature to be executed.
	// +kubebuilder:validation:Optional
	Actions []RulesActionsParameters `json:"actions,omitempty" tf:"actions,omitempty"`

	// The condition that determines if a feature should run.
	// Note: If any condition in the array is met, the feature will run.
	// The condition that determines if a feature should run.
	// Note: If any condition in the array is met, the feature will run.
	// +kubebuilder:validation:Optional
	Or []RulesOrParameters `json:"or" tf:"or,omitempty"`
}

// RuleEngineSpec defines the desired state of RuleEngine
type RuleEngineSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RuleEngineParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RuleEngineInitParameters `json:"initProvider,omitempty"`
}

// RuleEngineStatus defines the observed state of RuleEngine.
type RuleEngineStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RuleEngineObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// RuleEngine is the Schema for the RuleEngines API. Provides a resource to create a teo rule_engine
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type RuleEngine struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.ruleName) || (has(self.initProvider) && has(self.initProvider.ruleName))",message="spec.forProvider.ruleName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.rules) || (has(self.initProvider) && has(self.initProvider.rules))",message="spec.forProvider.rules is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.status) || (has(self.initProvider) && has(self.initProvider.status))",message="spec.forProvider.status is a required parameter"
	Spec   RuleEngineSpec   `json:"spec"`
	Status RuleEngineStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RuleEngineList contains a list of RuleEngines
type RuleEngineList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RuleEngine `json:"items"`
}

// Repository type metadata.
var (
	RuleEngine_Kind             = "RuleEngine"
	RuleEngine_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RuleEngine_Kind}.String()
	RuleEngine_KindAPIVersion   = RuleEngine_Kind + "." + CRDGroupVersion.String()
	RuleEngine_GroupVersionKind = CRDGroupVersion.WithKind(RuleEngine_Kind)
)

func init() {
	SchemeBuilder.Register(&RuleEngine{}, &RuleEngineList{})
}
