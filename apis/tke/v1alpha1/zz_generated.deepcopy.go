//go:build !ignore_autogenerated

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AddonAttachment) DeepCopyInto(out *AddonAttachment) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AddonAttachment.
func (in *AddonAttachment) DeepCopy() *AddonAttachment {
	if in == nil {
		return nil
	}
	out := new(AddonAttachment)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *AddonAttachment) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AddonAttachmentInitParameters) DeepCopyInto(out *AddonAttachmentInitParameters) {
	*out = *in
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIDRef != nil {
		in, out := &in.ClusterIDRef, &out.ClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIDSelector != nil {
		in, out := &in.ClusterIDSelector, &out.ClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.RawValues != nil {
		in, out := &in.RawValues, &out.RawValues
		*out = new(string)
		**out = **in
	}
	if in.RawValuesType != nil {
		in, out := &in.RawValuesType, &out.RawValuesType
		*out = new(string)
		**out = **in
	}
	if in.RequestBody != nil {
		in, out := &in.RequestBody, &out.RequestBody
		*out = new(string)
		**out = **in
	}
	if in.Values != nil {
		in, out := &in.Values, &out.Values
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AddonAttachmentInitParameters.
func (in *AddonAttachmentInitParameters) DeepCopy() *AddonAttachmentInitParameters {
	if in == nil {
		return nil
	}
	out := new(AddonAttachmentInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AddonAttachmentList) DeepCopyInto(out *AddonAttachmentList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]AddonAttachment, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AddonAttachmentList.
func (in *AddonAttachmentList) DeepCopy() *AddonAttachmentList {
	if in == nil {
		return nil
	}
	out := new(AddonAttachmentList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *AddonAttachmentList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AddonAttachmentObservation) DeepCopyInto(out *AddonAttachmentObservation) {
	*out = *in
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.RawValues != nil {
		in, out := &in.RawValues, &out.RawValues
		*out = new(string)
		**out = **in
	}
	if in.RawValuesType != nil {
		in, out := &in.RawValuesType, &out.RawValuesType
		*out = new(string)
		**out = **in
	}
	if in.RequestBody != nil {
		in, out := &in.RequestBody, &out.RequestBody
		*out = new(string)
		**out = **in
	}
	if in.ResponseBody != nil {
		in, out := &in.ResponseBody, &out.ResponseBody
		*out = new(string)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Values != nil {
		in, out := &in.Values, &out.Values
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AddonAttachmentObservation.
func (in *AddonAttachmentObservation) DeepCopy() *AddonAttachmentObservation {
	if in == nil {
		return nil
	}
	out := new(AddonAttachmentObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AddonAttachmentParameters) DeepCopyInto(out *AddonAttachmentParameters) {
	*out = *in
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIDRef != nil {
		in, out := &in.ClusterIDRef, &out.ClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIDSelector != nil {
		in, out := &in.ClusterIDSelector, &out.ClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.RawValues != nil {
		in, out := &in.RawValues, &out.RawValues
		*out = new(string)
		**out = **in
	}
	if in.RawValuesType != nil {
		in, out := &in.RawValuesType, &out.RawValuesType
		*out = new(string)
		**out = **in
	}
	if in.RequestBody != nil {
		in, out := &in.RequestBody, &out.RequestBody
		*out = new(string)
		**out = **in
	}
	if in.Values != nil {
		in, out := &in.Values, &out.Values
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AddonAttachmentParameters.
func (in *AddonAttachmentParameters) DeepCopy() *AddonAttachmentParameters {
	if in == nil {
		return nil
	}
	out := new(AddonAttachmentParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AddonAttachmentSpec) DeepCopyInto(out *AddonAttachmentSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AddonAttachmentSpec.
func (in *AddonAttachmentSpec) DeepCopy() *AddonAttachmentSpec {
	if in == nil {
		return nil
	}
	out := new(AddonAttachmentSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AddonAttachmentStatus) DeepCopyInto(out *AddonAttachmentStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AddonAttachmentStatus.
func (in *AddonAttachmentStatus) DeepCopy() *AddonAttachmentStatus {
	if in == nil {
		return nil
	}
	out := new(AddonAttachmentStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AnnotationsInitParameters) DeepCopyInto(out *AnnotationsInitParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AnnotationsInitParameters.
func (in *AnnotationsInitParameters) DeepCopy() *AnnotationsInitParameters {
	if in == nil {
		return nil
	}
	out := new(AnnotationsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AnnotationsObservation) DeepCopyInto(out *AnnotationsObservation) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AnnotationsObservation.
func (in *AnnotationsObservation) DeepCopy() *AnnotationsObservation {
	if in == nil {
		return nil
	}
	out := new(AnnotationsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AnnotationsParameters) DeepCopyInto(out *AnnotationsParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AnnotationsParameters.
func (in *AnnotationsParameters) DeepCopy() *AnnotationsParameters {
	if in == nil {
		return nil
	}
	out := new(AnnotationsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AuthAttachment) DeepCopyInto(out *AuthAttachment) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AuthAttachment.
func (in *AuthAttachment) DeepCopy() *AuthAttachment {
	if in == nil {
		return nil
	}
	out := new(AuthAttachment)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *AuthAttachment) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AuthAttachmentInitParameters) DeepCopyInto(out *AuthAttachmentInitParameters) {
	*out = *in
	if in.AutoCreateClientID != nil {
		in, out := &in.AutoCreateClientID, &out.AutoCreateClientID
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AutoCreateDiscoveryAnonymousAuth != nil {
		in, out := &in.AutoCreateDiscoveryAnonymousAuth, &out.AutoCreateDiscoveryAnonymousAuth
		*out = new(bool)
		**out = **in
	}
	if in.AutoCreateOidcConfig != nil {
		in, out := &in.AutoCreateOidcConfig, &out.AutoCreateOidcConfig
		*out = new(bool)
		**out = **in
	}
	if in.AutoInstallPodIdentityWebhookAddon != nil {
		in, out := &in.AutoInstallPodIdentityWebhookAddon, &out.AutoInstallPodIdentityWebhookAddon
		*out = new(bool)
		**out = **in
	}
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIDRef != nil {
		in, out := &in.ClusterIDRef, &out.ClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIDSelector != nil {
		in, out := &in.ClusterIDSelector, &out.ClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Issuer != nil {
		in, out := &in.Issuer, &out.Issuer
		*out = new(string)
		**out = **in
	}
	if in.JwksURI != nil {
		in, out := &in.JwksURI, &out.JwksURI
		*out = new(string)
		**out = **in
	}
	if in.UseTkeDefault != nil {
		in, out := &in.UseTkeDefault, &out.UseTkeDefault
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AuthAttachmentInitParameters.
func (in *AuthAttachmentInitParameters) DeepCopy() *AuthAttachmentInitParameters {
	if in == nil {
		return nil
	}
	out := new(AuthAttachmentInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AuthAttachmentList) DeepCopyInto(out *AuthAttachmentList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]AuthAttachment, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AuthAttachmentList.
func (in *AuthAttachmentList) DeepCopy() *AuthAttachmentList {
	if in == nil {
		return nil
	}
	out := new(AuthAttachmentList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *AuthAttachmentList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AuthAttachmentObservation) DeepCopyInto(out *AuthAttachmentObservation) {
	*out = *in
	if in.AutoCreateClientID != nil {
		in, out := &in.AutoCreateClientID, &out.AutoCreateClientID
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AutoCreateDiscoveryAnonymousAuth != nil {
		in, out := &in.AutoCreateDiscoveryAnonymousAuth, &out.AutoCreateDiscoveryAnonymousAuth
		*out = new(bool)
		**out = **in
	}
	if in.AutoCreateOidcConfig != nil {
		in, out := &in.AutoCreateOidcConfig, &out.AutoCreateOidcConfig
		*out = new(bool)
		**out = **in
	}
	if in.AutoInstallPodIdentityWebhookAddon != nil {
		in, out := &in.AutoInstallPodIdentityWebhookAddon, &out.AutoInstallPodIdentityWebhookAddon
		*out = new(bool)
		**out = **in
	}
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Issuer != nil {
		in, out := &in.Issuer, &out.Issuer
		*out = new(string)
		**out = **in
	}
	if in.JwksURI != nil {
		in, out := &in.JwksURI, &out.JwksURI
		*out = new(string)
		**out = **in
	}
	if in.TkeDefaultIssuer != nil {
		in, out := &in.TkeDefaultIssuer, &out.TkeDefaultIssuer
		*out = new(string)
		**out = **in
	}
	if in.TkeDefaultJwksURI != nil {
		in, out := &in.TkeDefaultJwksURI, &out.TkeDefaultJwksURI
		*out = new(string)
		**out = **in
	}
	if in.UseTkeDefault != nil {
		in, out := &in.UseTkeDefault, &out.UseTkeDefault
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AuthAttachmentObservation.
func (in *AuthAttachmentObservation) DeepCopy() *AuthAttachmentObservation {
	if in == nil {
		return nil
	}
	out := new(AuthAttachmentObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AuthAttachmentParameters) DeepCopyInto(out *AuthAttachmentParameters) {
	*out = *in
	if in.AutoCreateClientID != nil {
		in, out := &in.AutoCreateClientID, &out.AutoCreateClientID
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AutoCreateDiscoveryAnonymousAuth != nil {
		in, out := &in.AutoCreateDiscoveryAnonymousAuth, &out.AutoCreateDiscoveryAnonymousAuth
		*out = new(bool)
		**out = **in
	}
	if in.AutoCreateOidcConfig != nil {
		in, out := &in.AutoCreateOidcConfig, &out.AutoCreateOidcConfig
		*out = new(bool)
		**out = **in
	}
	if in.AutoInstallPodIdentityWebhookAddon != nil {
		in, out := &in.AutoInstallPodIdentityWebhookAddon, &out.AutoInstallPodIdentityWebhookAddon
		*out = new(bool)
		**out = **in
	}
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIDRef != nil {
		in, out := &in.ClusterIDRef, &out.ClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIDSelector != nil {
		in, out := &in.ClusterIDSelector, &out.ClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Issuer != nil {
		in, out := &in.Issuer, &out.Issuer
		*out = new(string)
		**out = **in
	}
	if in.JwksURI != nil {
		in, out := &in.JwksURI, &out.JwksURI
		*out = new(string)
		**out = **in
	}
	if in.UseTkeDefault != nil {
		in, out := &in.UseTkeDefault, &out.UseTkeDefault
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AuthAttachmentParameters.
func (in *AuthAttachmentParameters) DeepCopy() *AuthAttachmentParameters {
	if in == nil {
		return nil
	}
	out := new(AuthAttachmentParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AuthAttachmentSpec) DeepCopyInto(out *AuthAttachmentSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AuthAttachmentSpec.
func (in *AuthAttachmentSpec) DeepCopy() *AuthAttachmentSpec {
	if in == nil {
		return nil
	}
	out := new(AuthAttachmentSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AuthAttachmentStatus) DeepCopyInto(out *AuthAttachmentStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AuthAttachmentStatus.
func (in *AuthAttachmentStatus) DeepCopy() *AuthAttachmentStatus {
	if in == nil {
		return nil
	}
	out := new(AuthAttachmentStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AuthOptionsInitParameters) DeepCopyInto(out *AuthOptionsInitParameters) {
	*out = *in
	if in.AutoCreateDiscoveryAnonymousAuth != nil {
		in, out := &in.AutoCreateDiscoveryAnonymousAuth, &out.AutoCreateDiscoveryAnonymousAuth
		*out = new(bool)
		**out = **in
	}
	if in.Issuer != nil {
		in, out := &in.Issuer, &out.Issuer
		*out = new(string)
		**out = **in
	}
	if in.JwksURI != nil {
		in, out := &in.JwksURI, &out.JwksURI
		*out = new(string)
		**out = **in
	}
	if in.UseTkeDefault != nil {
		in, out := &in.UseTkeDefault, &out.UseTkeDefault
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AuthOptionsInitParameters.
func (in *AuthOptionsInitParameters) DeepCopy() *AuthOptionsInitParameters {
	if in == nil {
		return nil
	}
	out := new(AuthOptionsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AuthOptionsObservation) DeepCopyInto(out *AuthOptionsObservation) {
	*out = *in
	if in.AutoCreateDiscoveryAnonymousAuth != nil {
		in, out := &in.AutoCreateDiscoveryAnonymousAuth, &out.AutoCreateDiscoveryAnonymousAuth
		*out = new(bool)
		**out = **in
	}
	if in.Issuer != nil {
		in, out := &in.Issuer, &out.Issuer
		*out = new(string)
		**out = **in
	}
	if in.JwksURI != nil {
		in, out := &in.JwksURI, &out.JwksURI
		*out = new(string)
		**out = **in
	}
	if in.UseTkeDefault != nil {
		in, out := &in.UseTkeDefault, &out.UseTkeDefault
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AuthOptionsObservation.
func (in *AuthOptionsObservation) DeepCopy() *AuthOptionsObservation {
	if in == nil {
		return nil
	}
	out := new(AuthOptionsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AuthOptionsParameters) DeepCopyInto(out *AuthOptionsParameters) {
	*out = *in
	if in.AutoCreateDiscoveryAnonymousAuth != nil {
		in, out := &in.AutoCreateDiscoveryAnonymousAuth, &out.AutoCreateDiscoveryAnonymousAuth
		*out = new(bool)
		**out = **in
	}
	if in.Issuer != nil {
		in, out := &in.Issuer, &out.Issuer
		*out = new(string)
		**out = **in
	}
	if in.JwksURI != nil {
		in, out := &in.JwksURI, &out.JwksURI
		*out = new(string)
		**out = **in
	}
	if in.UseTkeDefault != nil {
		in, out := &in.UseTkeDefault, &out.UseTkeDefault
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AuthOptionsParameters.
func (in *AuthOptionsParameters) DeepCopy() *AuthOptionsParameters {
	if in == nil {
		return nil
	}
	out := new(AuthOptionsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoScalingConfigDataDiskInitParameters) DeepCopyInto(out *AutoScalingConfigDataDiskInitParameters) {
	*out = *in
	if in.DeleteWithInstance != nil {
		in, out := &in.DeleteWithInstance, &out.DeleteWithInstance
		*out = new(bool)
		**out = **in
	}
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.DiskType != nil {
		in, out := &in.DiskType, &out.DiskType
		*out = new(string)
		**out = **in
	}
	if in.Encrypt != nil {
		in, out := &in.Encrypt, &out.Encrypt
		*out = new(bool)
		**out = **in
	}
	if in.SnapshotID != nil {
		in, out := &in.SnapshotID, &out.SnapshotID
		*out = new(string)
		**out = **in
	}
	if in.ThroughputPerformance != nil {
		in, out := &in.ThroughputPerformance, &out.ThroughputPerformance
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoScalingConfigDataDiskInitParameters.
func (in *AutoScalingConfigDataDiskInitParameters) DeepCopy() *AutoScalingConfigDataDiskInitParameters {
	if in == nil {
		return nil
	}
	out := new(AutoScalingConfigDataDiskInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoScalingConfigDataDiskObservation) DeepCopyInto(out *AutoScalingConfigDataDiskObservation) {
	*out = *in
	if in.DeleteWithInstance != nil {
		in, out := &in.DeleteWithInstance, &out.DeleteWithInstance
		*out = new(bool)
		**out = **in
	}
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.DiskType != nil {
		in, out := &in.DiskType, &out.DiskType
		*out = new(string)
		**out = **in
	}
	if in.Encrypt != nil {
		in, out := &in.Encrypt, &out.Encrypt
		*out = new(bool)
		**out = **in
	}
	if in.SnapshotID != nil {
		in, out := &in.SnapshotID, &out.SnapshotID
		*out = new(string)
		**out = **in
	}
	if in.ThroughputPerformance != nil {
		in, out := &in.ThroughputPerformance, &out.ThroughputPerformance
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoScalingConfigDataDiskObservation.
func (in *AutoScalingConfigDataDiskObservation) DeepCopy() *AutoScalingConfigDataDiskObservation {
	if in == nil {
		return nil
	}
	out := new(AutoScalingConfigDataDiskObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoScalingConfigDataDiskParameters) DeepCopyInto(out *AutoScalingConfigDataDiskParameters) {
	*out = *in
	if in.DeleteWithInstance != nil {
		in, out := &in.DeleteWithInstance, &out.DeleteWithInstance
		*out = new(bool)
		**out = **in
	}
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.DiskType != nil {
		in, out := &in.DiskType, &out.DiskType
		*out = new(string)
		**out = **in
	}
	if in.Encrypt != nil {
		in, out := &in.Encrypt, &out.Encrypt
		*out = new(bool)
		**out = **in
	}
	if in.SnapshotID != nil {
		in, out := &in.SnapshotID, &out.SnapshotID
		*out = new(string)
		**out = **in
	}
	if in.ThroughputPerformance != nil {
		in, out := &in.ThroughputPerformance, &out.ThroughputPerformance
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoScalingConfigDataDiskParameters.
func (in *AutoScalingConfigDataDiskParameters) DeepCopy() *AutoScalingConfigDataDiskParameters {
	if in == nil {
		return nil
	}
	out := new(AutoScalingConfigDataDiskParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoScalingConfigInitParameters) DeepCopyInto(out *AutoScalingConfigInitParameters) {
	*out = *in
	if in.BackupInstanceTypes != nil {
		in, out := &in.BackupInstanceTypes, &out.BackupInstanceTypes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.BandwidthPackageID != nil {
		in, out := &in.BandwidthPackageID, &out.BandwidthPackageID
		*out = new(string)
		**out = **in
	}
	if in.CamRoleName != nil {
		in, out := &in.CamRoleName, &out.CamRoleName
		*out = new(string)
		**out = **in
	}
	if in.DataDisk != nil {
		in, out := &in.DataDisk, &out.DataDisk
		*out = make([]AutoScalingConfigDataDiskInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.EnhancedMonitorService != nil {
		in, out := &in.EnhancedMonitorService, &out.EnhancedMonitorService
		*out = new(bool)
		**out = **in
	}
	if in.EnhancedSecurityService != nil {
		in, out := &in.EnhancedSecurityService, &out.EnhancedSecurityService
		*out = new(bool)
		**out = **in
	}
	if in.HostName != nil {
		in, out := &in.HostName, &out.HostName
		*out = new(string)
		**out = **in
	}
	if in.HostNameStyle != nil {
		in, out := &in.HostNameStyle, &out.HostNameStyle
		*out = new(string)
		**out = **in
	}
	if in.InstanceChargeType != nil {
		in, out := &in.InstanceChargeType, &out.InstanceChargeType
		*out = new(string)
		**out = **in
	}
	if in.InstanceChargeTypePrepaidPeriod != nil {
		in, out := &in.InstanceChargeTypePrepaidPeriod, &out.InstanceChargeTypePrepaidPeriod
		*out = new(float64)
		**out = **in
	}
	if in.InstanceChargeTypePrepaidRenewFlag != nil {
		in, out := &in.InstanceChargeTypePrepaidRenewFlag, &out.InstanceChargeTypePrepaidRenewFlag
		*out = new(string)
		**out = **in
	}
	if in.InstanceName != nil {
		in, out := &in.InstanceName, &out.InstanceName
		*out = new(string)
		**out = **in
	}
	if in.InstanceNameStyle != nil {
		in, out := &in.InstanceNameStyle, &out.InstanceNameStyle
		*out = new(string)
		**out = **in
	}
	if in.InstanceType != nil {
		in, out := &in.InstanceType, &out.InstanceType
		*out = new(string)
		**out = **in
	}
	if in.InternetChargeType != nil {
		in, out := &in.InternetChargeType, &out.InternetChargeType
		*out = new(string)
		**out = **in
	}
	if in.InternetMaxBandwidthOut != nil {
		in, out := &in.InternetMaxBandwidthOut, &out.InternetMaxBandwidthOut
		*out = new(float64)
		**out = **in
	}
	if in.KeyIds != nil {
		in, out := &in.KeyIds, &out.KeyIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.OrderlySecurityGroupIds != nil {
		in, out := &in.OrderlySecurityGroupIds, &out.OrderlySecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PublicIPAssigned != nil {
		in, out := &in.PublicIPAssigned, &out.PublicIPAssigned
		*out = new(bool)
		**out = **in
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SpotInstanceType != nil {
		in, out := &in.SpotInstanceType, &out.SpotInstanceType
		*out = new(string)
		**out = **in
	}
	if in.SpotMaxPrice != nil {
		in, out := &in.SpotMaxPrice, &out.SpotMaxPrice
		*out = new(string)
		**out = **in
	}
	if in.SystemDiskSize != nil {
		in, out := &in.SystemDiskSize, &out.SystemDiskSize
		*out = new(float64)
		**out = **in
	}
	if in.SystemDiskType != nil {
		in, out := &in.SystemDiskType, &out.SystemDiskType
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoScalingConfigInitParameters.
func (in *AutoScalingConfigInitParameters) DeepCopy() *AutoScalingConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(AutoScalingConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoScalingConfigObservation) DeepCopyInto(out *AutoScalingConfigObservation) {
	*out = *in
	if in.BackupInstanceTypes != nil {
		in, out := &in.BackupInstanceTypes, &out.BackupInstanceTypes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.BandwidthPackageID != nil {
		in, out := &in.BandwidthPackageID, &out.BandwidthPackageID
		*out = new(string)
		**out = **in
	}
	if in.CamRoleName != nil {
		in, out := &in.CamRoleName, &out.CamRoleName
		*out = new(string)
		**out = **in
	}
	if in.DataDisk != nil {
		in, out := &in.DataDisk, &out.DataDisk
		*out = make([]AutoScalingConfigDataDiskObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.EnhancedMonitorService != nil {
		in, out := &in.EnhancedMonitorService, &out.EnhancedMonitorService
		*out = new(bool)
		**out = **in
	}
	if in.EnhancedSecurityService != nil {
		in, out := &in.EnhancedSecurityService, &out.EnhancedSecurityService
		*out = new(bool)
		**out = **in
	}
	if in.HostName != nil {
		in, out := &in.HostName, &out.HostName
		*out = new(string)
		**out = **in
	}
	if in.HostNameStyle != nil {
		in, out := &in.HostNameStyle, &out.HostNameStyle
		*out = new(string)
		**out = **in
	}
	if in.InstanceChargeType != nil {
		in, out := &in.InstanceChargeType, &out.InstanceChargeType
		*out = new(string)
		**out = **in
	}
	if in.InstanceChargeTypePrepaidPeriod != nil {
		in, out := &in.InstanceChargeTypePrepaidPeriod, &out.InstanceChargeTypePrepaidPeriod
		*out = new(float64)
		**out = **in
	}
	if in.InstanceChargeTypePrepaidRenewFlag != nil {
		in, out := &in.InstanceChargeTypePrepaidRenewFlag, &out.InstanceChargeTypePrepaidRenewFlag
		*out = new(string)
		**out = **in
	}
	if in.InstanceName != nil {
		in, out := &in.InstanceName, &out.InstanceName
		*out = new(string)
		**out = **in
	}
	if in.InstanceNameStyle != nil {
		in, out := &in.InstanceNameStyle, &out.InstanceNameStyle
		*out = new(string)
		**out = **in
	}
	if in.InstanceType != nil {
		in, out := &in.InstanceType, &out.InstanceType
		*out = new(string)
		**out = **in
	}
	if in.InternetChargeType != nil {
		in, out := &in.InternetChargeType, &out.InternetChargeType
		*out = new(string)
		**out = **in
	}
	if in.InternetMaxBandwidthOut != nil {
		in, out := &in.InternetMaxBandwidthOut, &out.InternetMaxBandwidthOut
		*out = new(float64)
		**out = **in
	}
	if in.KeyIds != nil {
		in, out := &in.KeyIds, &out.KeyIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.OrderlySecurityGroupIds != nil {
		in, out := &in.OrderlySecurityGroupIds, &out.OrderlySecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PublicIPAssigned != nil {
		in, out := &in.PublicIPAssigned, &out.PublicIPAssigned
		*out = new(bool)
		**out = **in
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SpotInstanceType != nil {
		in, out := &in.SpotInstanceType, &out.SpotInstanceType
		*out = new(string)
		**out = **in
	}
	if in.SpotMaxPrice != nil {
		in, out := &in.SpotMaxPrice, &out.SpotMaxPrice
		*out = new(string)
		**out = **in
	}
	if in.SystemDiskSize != nil {
		in, out := &in.SystemDiskSize, &out.SystemDiskSize
		*out = new(float64)
		**out = **in
	}
	if in.SystemDiskType != nil {
		in, out := &in.SystemDiskType, &out.SystemDiskType
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoScalingConfigObservation.
func (in *AutoScalingConfigObservation) DeepCopy() *AutoScalingConfigObservation {
	if in == nil {
		return nil
	}
	out := new(AutoScalingConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoScalingConfigParameters) DeepCopyInto(out *AutoScalingConfigParameters) {
	*out = *in
	if in.BackupInstanceTypes != nil {
		in, out := &in.BackupInstanceTypes, &out.BackupInstanceTypes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.BandwidthPackageID != nil {
		in, out := &in.BandwidthPackageID, &out.BandwidthPackageID
		*out = new(string)
		**out = **in
	}
	if in.CamRoleName != nil {
		in, out := &in.CamRoleName, &out.CamRoleName
		*out = new(string)
		**out = **in
	}
	if in.DataDisk != nil {
		in, out := &in.DataDisk, &out.DataDisk
		*out = make([]AutoScalingConfigDataDiskParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.EnhancedMonitorService != nil {
		in, out := &in.EnhancedMonitorService, &out.EnhancedMonitorService
		*out = new(bool)
		**out = **in
	}
	if in.EnhancedSecurityService != nil {
		in, out := &in.EnhancedSecurityService, &out.EnhancedSecurityService
		*out = new(bool)
		**out = **in
	}
	if in.HostName != nil {
		in, out := &in.HostName, &out.HostName
		*out = new(string)
		**out = **in
	}
	if in.HostNameStyle != nil {
		in, out := &in.HostNameStyle, &out.HostNameStyle
		*out = new(string)
		**out = **in
	}
	if in.InstanceChargeType != nil {
		in, out := &in.InstanceChargeType, &out.InstanceChargeType
		*out = new(string)
		**out = **in
	}
	if in.InstanceChargeTypePrepaidPeriod != nil {
		in, out := &in.InstanceChargeTypePrepaidPeriod, &out.InstanceChargeTypePrepaidPeriod
		*out = new(float64)
		**out = **in
	}
	if in.InstanceChargeTypePrepaidRenewFlag != nil {
		in, out := &in.InstanceChargeTypePrepaidRenewFlag, &out.InstanceChargeTypePrepaidRenewFlag
		*out = new(string)
		**out = **in
	}
	if in.InstanceName != nil {
		in, out := &in.InstanceName, &out.InstanceName
		*out = new(string)
		**out = **in
	}
	if in.InstanceNameStyle != nil {
		in, out := &in.InstanceNameStyle, &out.InstanceNameStyle
		*out = new(string)
		**out = **in
	}
	if in.InstanceType != nil {
		in, out := &in.InstanceType, &out.InstanceType
		*out = new(string)
		**out = **in
	}
	if in.InternetChargeType != nil {
		in, out := &in.InternetChargeType, &out.InternetChargeType
		*out = new(string)
		**out = **in
	}
	if in.InternetMaxBandwidthOut != nil {
		in, out := &in.InternetMaxBandwidthOut, &out.InternetMaxBandwidthOut
		*out = new(float64)
		**out = **in
	}
	if in.KeyIds != nil {
		in, out := &in.KeyIds, &out.KeyIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.OrderlySecurityGroupIds != nil {
		in, out := &in.OrderlySecurityGroupIds, &out.OrderlySecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.PublicIPAssigned != nil {
		in, out := &in.PublicIPAssigned, &out.PublicIPAssigned
		*out = new(bool)
		**out = **in
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SpotInstanceType != nil {
		in, out := &in.SpotInstanceType, &out.SpotInstanceType
		*out = new(string)
		**out = **in
	}
	if in.SpotMaxPrice != nil {
		in, out := &in.SpotMaxPrice, &out.SpotMaxPrice
		*out = new(string)
		**out = **in
	}
	if in.SystemDiskSize != nil {
		in, out := &in.SystemDiskSize, &out.SystemDiskSize
		*out = new(float64)
		**out = **in
	}
	if in.SystemDiskType != nil {
		in, out := &in.SystemDiskType, &out.SystemDiskType
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoScalingConfigParameters.
func (in *AutoScalingConfigParameters) DeepCopy() *AutoScalingConfigParameters {
	if in == nil {
		return nil
	}
	out := new(AutoScalingConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Cluster) DeepCopyInto(out *Cluster) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Cluster.
func (in *Cluster) DeepCopy() *Cluster {
	if in == nil {
		return nil
	}
	out := new(Cluster)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Cluster) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterAttachment) DeepCopyInto(out *ClusterAttachment) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterAttachment.
func (in *ClusterAttachment) DeepCopy() *ClusterAttachment {
	if in == nil {
		return nil
	}
	out := new(ClusterAttachment)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ClusterAttachment) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterAttachmentInitParameters) DeepCopyInto(out *ClusterAttachmentInitParameters) {
	*out = *in
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIDRef != nil {
		in, out := &in.ClusterIDRef, &out.ClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIDSelector != nil {
		in, out := &in.ClusterIDSelector, &out.ClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Hostname != nil {
		in, out := &in.Hostname, &out.Hostname
		*out = new(string)
		**out = **in
	}
	if in.ImageID != nil {
		in, out := &in.ImageID, &out.ImageID
		*out = new(string)
		**out = **in
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.InstanceIDRef != nil {
		in, out := &in.InstanceIDRef, &out.InstanceIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.InstanceIDSelector != nil {
		in, out := &in.InstanceIDSelector, &out.InstanceIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.KeyIds != nil {
		in, out := &in.KeyIds, &out.KeyIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SecurityGroups != nil {
		in, out := &in.SecurityGroups, &out.SecurityGroups
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.WorkerConfig != nil {
		in, out := &in.WorkerConfig, &out.WorkerConfig
		*out = make([]ClusterAttachmentWorkerConfigInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WorkerConfigOverrides != nil {
		in, out := &in.WorkerConfigOverrides, &out.WorkerConfigOverrides
		*out = make([]WorkerConfigOverridesInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterAttachmentInitParameters.
func (in *ClusterAttachmentInitParameters) DeepCopy() *ClusterAttachmentInitParameters {
	if in == nil {
		return nil
	}
	out := new(ClusterAttachmentInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterAttachmentList) DeepCopyInto(out *ClusterAttachmentList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ClusterAttachment, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterAttachmentList.
func (in *ClusterAttachmentList) DeepCopy() *ClusterAttachmentList {
	if in == nil {
		return nil
	}
	out := new(ClusterAttachmentList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ClusterAttachmentList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterAttachmentObservation) DeepCopyInto(out *ClusterAttachmentObservation) {
	*out = *in
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.Hostname != nil {
		in, out := &in.Hostname, &out.Hostname
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.ImageID != nil {
		in, out := &in.ImageID, &out.ImageID
		*out = new(string)
		**out = **in
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.KeyIds != nil {
		in, out := &in.KeyIds, &out.KeyIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.SecurityGroups != nil {
		in, out := &in.SecurityGroups, &out.SecurityGroups
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(string)
		**out = **in
	}
	if in.Unschedulable != nil {
		in, out := &in.Unschedulable, &out.Unschedulable
		*out = new(float64)
		**out = **in
	}
	if in.WorkerConfig != nil {
		in, out := &in.WorkerConfig, &out.WorkerConfig
		*out = make([]ClusterAttachmentWorkerConfigObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WorkerConfigOverrides != nil {
		in, out := &in.WorkerConfigOverrides, &out.WorkerConfigOverrides
		*out = make([]WorkerConfigOverridesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterAttachmentObservation.
func (in *ClusterAttachmentObservation) DeepCopy() *ClusterAttachmentObservation {
	if in == nil {
		return nil
	}
	out := new(ClusterAttachmentObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterAttachmentParameters) DeepCopyInto(out *ClusterAttachmentParameters) {
	*out = *in
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIDRef != nil {
		in, out := &in.ClusterIDRef, &out.ClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIDSelector != nil {
		in, out := &in.ClusterIDSelector, &out.ClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Hostname != nil {
		in, out := &in.Hostname, &out.Hostname
		*out = new(string)
		**out = **in
	}
	if in.ImageID != nil {
		in, out := &in.ImageID, &out.ImageID
		*out = new(string)
		**out = **in
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.InstanceIDRef != nil {
		in, out := &in.InstanceIDRef, &out.InstanceIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.InstanceIDSelector != nil {
		in, out := &in.InstanceIDSelector, &out.InstanceIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.KeyIds != nil {
		in, out := &in.KeyIds, &out.KeyIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.SecurityGroups != nil {
		in, out := &in.SecurityGroups, &out.SecurityGroups
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.WorkerConfig != nil {
		in, out := &in.WorkerConfig, &out.WorkerConfig
		*out = make([]ClusterAttachmentWorkerConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WorkerConfigOverrides != nil {
		in, out := &in.WorkerConfigOverrides, &out.WorkerConfigOverrides
		*out = make([]WorkerConfigOverridesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterAttachmentParameters.
func (in *ClusterAttachmentParameters) DeepCopy() *ClusterAttachmentParameters {
	if in == nil {
		return nil
	}
	out := new(ClusterAttachmentParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterAttachmentSpec) DeepCopyInto(out *ClusterAttachmentSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterAttachmentSpec.
func (in *ClusterAttachmentSpec) DeepCopy() *ClusterAttachmentSpec {
	if in == nil {
		return nil
	}
	out := new(ClusterAttachmentSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterAttachmentStatus) DeepCopyInto(out *ClusterAttachmentStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterAttachmentStatus.
func (in *ClusterAttachmentStatus) DeepCopy() *ClusterAttachmentStatus {
	if in == nil {
		return nil
	}
	out := new(ClusterAttachmentStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterAttachmentWorkerConfigDataDiskInitParameters) DeepCopyInto(out *ClusterAttachmentWorkerConfigDataDiskInitParameters) {
	*out = *in
	if in.AutoFormatAndMount != nil {
		in, out := &in.AutoFormatAndMount, &out.AutoFormatAndMount
		*out = new(bool)
		**out = **in
	}
	if in.DiskPartition != nil {
		in, out := &in.DiskPartition, &out.DiskPartition
		*out = new(string)
		**out = **in
	}
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.DiskType != nil {
		in, out := &in.DiskType, &out.DiskType
		*out = new(string)
		**out = **in
	}
	if in.FileSystem != nil {
		in, out := &in.FileSystem, &out.FileSystem
		*out = new(string)
		**out = **in
	}
	if in.MountTarget != nil {
		in, out := &in.MountTarget, &out.MountTarget
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterAttachmentWorkerConfigDataDiskInitParameters.
func (in *ClusterAttachmentWorkerConfigDataDiskInitParameters) DeepCopy() *ClusterAttachmentWorkerConfigDataDiskInitParameters {
	if in == nil {
		return nil
	}
	out := new(ClusterAttachmentWorkerConfigDataDiskInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterAttachmentWorkerConfigDataDiskObservation) DeepCopyInto(out *ClusterAttachmentWorkerConfigDataDiskObservation) {
	*out = *in
	if in.AutoFormatAndMount != nil {
		in, out := &in.AutoFormatAndMount, &out.AutoFormatAndMount
		*out = new(bool)
		**out = **in
	}
	if in.DiskPartition != nil {
		in, out := &in.DiskPartition, &out.DiskPartition
		*out = new(string)
		**out = **in
	}
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.DiskType != nil {
		in, out := &in.DiskType, &out.DiskType
		*out = new(string)
		**out = **in
	}
	if in.FileSystem != nil {
		in, out := &in.FileSystem, &out.FileSystem
		*out = new(string)
		**out = **in
	}
	if in.MountTarget != nil {
		in, out := &in.MountTarget, &out.MountTarget
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterAttachmentWorkerConfigDataDiskObservation.
func (in *ClusterAttachmentWorkerConfigDataDiskObservation) DeepCopy() *ClusterAttachmentWorkerConfigDataDiskObservation {
	if in == nil {
		return nil
	}
	out := new(ClusterAttachmentWorkerConfigDataDiskObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterAttachmentWorkerConfigDataDiskParameters) DeepCopyInto(out *ClusterAttachmentWorkerConfigDataDiskParameters) {
	*out = *in
	if in.AutoFormatAndMount != nil {
		in, out := &in.AutoFormatAndMount, &out.AutoFormatAndMount
		*out = new(bool)
		**out = **in
	}
	if in.DiskPartition != nil {
		in, out := &in.DiskPartition, &out.DiskPartition
		*out = new(string)
		**out = **in
	}
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.DiskType != nil {
		in, out := &in.DiskType, &out.DiskType
		*out = new(string)
		**out = **in
	}
	if in.FileSystem != nil {
		in, out := &in.FileSystem, &out.FileSystem
		*out = new(string)
		**out = **in
	}
	if in.MountTarget != nil {
		in, out := &in.MountTarget, &out.MountTarget
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterAttachmentWorkerConfigDataDiskParameters.
func (in *ClusterAttachmentWorkerConfigDataDiskParameters) DeepCopy() *ClusterAttachmentWorkerConfigDataDiskParameters {
	if in == nil {
		return nil
	}
	out := new(ClusterAttachmentWorkerConfigDataDiskParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterAttachmentWorkerConfigInitParameters) DeepCopyInto(out *ClusterAttachmentWorkerConfigInitParameters) {
	*out = *in
	if in.DataDisk != nil {
		in, out := &in.DataDisk, &out.DataDisk
		*out = make([]ClusterAttachmentWorkerConfigDataDiskInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DesiredPodNum != nil {
		in, out := &in.DesiredPodNum, &out.DesiredPodNum
		*out = new(float64)
		**out = **in
	}
	if in.DockerGraphPath != nil {
		in, out := &in.DockerGraphPath, &out.DockerGraphPath
		*out = new(string)
		**out = **in
	}
	if in.ExtraArgs != nil {
		in, out := &in.ExtraArgs, &out.ExtraArgs
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.GpuArgs != nil {
		in, out := &in.GpuArgs, &out.GpuArgs
		*out = make([]WorkerConfigGpuArgsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.IsSchedule != nil {
		in, out := &in.IsSchedule, &out.IsSchedule
		*out = new(bool)
		**out = **in
	}
	if in.MountTarget != nil {
		in, out := &in.MountTarget, &out.MountTarget
		*out = new(string)
		**out = **in
	}
	if in.PreStartUserScript != nil {
		in, out := &in.PreStartUserScript, &out.PreStartUserScript
		*out = new(string)
		**out = **in
	}
	if in.Taints != nil {
		in, out := &in.Taints, &out.Taints
		*out = make([]WorkerConfigTaintsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.UserData != nil {
		in, out := &in.UserData, &out.UserData
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterAttachmentWorkerConfigInitParameters.
func (in *ClusterAttachmentWorkerConfigInitParameters) DeepCopy() *ClusterAttachmentWorkerConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(ClusterAttachmentWorkerConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterAttachmentWorkerConfigObservation) DeepCopyInto(out *ClusterAttachmentWorkerConfigObservation) {
	*out = *in
	if in.DataDisk != nil {
		in, out := &in.DataDisk, &out.DataDisk
		*out = make([]ClusterAttachmentWorkerConfigDataDiskObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DesiredPodNum != nil {
		in, out := &in.DesiredPodNum, &out.DesiredPodNum
		*out = new(float64)
		**out = **in
	}
	if in.DockerGraphPath != nil {
		in, out := &in.DockerGraphPath, &out.DockerGraphPath
		*out = new(string)
		**out = **in
	}
	if in.ExtraArgs != nil {
		in, out := &in.ExtraArgs, &out.ExtraArgs
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.GpuArgs != nil {
		in, out := &in.GpuArgs, &out.GpuArgs
		*out = make([]WorkerConfigGpuArgsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.IsSchedule != nil {
		in, out := &in.IsSchedule, &out.IsSchedule
		*out = new(bool)
		**out = **in
	}
	if in.MountTarget != nil {
		in, out := &in.MountTarget, &out.MountTarget
		*out = new(string)
		**out = **in
	}
	if in.PreStartUserScript != nil {
		in, out := &in.PreStartUserScript, &out.PreStartUserScript
		*out = new(string)
		**out = **in
	}
	if in.Taints != nil {
		in, out := &in.Taints, &out.Taints
		*out = make([]WorkerConfigTaintsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.UserData != nil {
		in, out := &in.UserData, &out.UserData
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterAttachmentWorkerConfigObservation.
func (in *ClusterAttachmentWorkerConfigObservation) DeepCopy() *ClusterAttachmentWorkerConfigObservation {
	if in == nil {
		return nil
	}
	out := new(ClusterAttachmentWorkerConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterAttachmentWorkerConfigParameters) DeepCopyInto(out *ClusterAttachmentWorkerConfigParameters) {
	*out = *in
	if in.DataDisk != nil {
		in, out := &in.DataDisk, &out.DataDisk
		*out = make([]ClusterAttachmentWorkerConfigDataDiskParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DesiredPodNum != nil {
		in, out := &in.DesiredPodNum, &out.DesiredPodNum
		*out = new(float64)
		**out = **in
	}
	if in.DockerGraphPath != nil {
		in, out := &in.DockerGraphPath, &out.DockerGraphPath
		*out = new(string)
		**out = **in
	}
	if in.ExtraArgs != nil {
		in, out := &in.ExtraArgs, &out.ExtraArgs
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.GpuArgs != nil {
		in, out := &in.GpuArgs, &out.GpuArgs
		*out = make([]WorkerConfigGpuArgsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.IsSchedule != nil {
		in, out := &in.IsSchedule, &out.IsSchedule
		*out = new(bool)
		**out = **in
	}
	if in.MountTarget != nil {
		in, out := &in.MountTarget, &out.MountTarget
		*out = new(string)
		**out = **in
	}
	if in.PreStartUserScript != nil {
		in, out := &in.PreStartUserScript, &out.PreStartUserScript
		*out = new(string)
		**out = **in
	}
	if in.Taints != nil {
		in, out := &in.Taints, &out.Taints
		*out = make([]WorkerConfigTaintsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.UserData != nil {
		in, out := &in.UserData, &out.UserData
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterAttachmentWorkerConfigParameters.
func (in *ClusterAttachmentWorkerConfigParameters) DeepCopy() *ClusterAttachmentWorkerConfigParameters {
	if in == nil {
		return nil
	}
	out := new(ClusterAttachmentWorkerConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterAuditInitParameters) DeepCopyInto(out *ClusterAuditInitParameters) {
	*out = *in
	if in.DeleteAuditLogAndTopic != nil {
		in, out := &in.DeleteAuditLogAndTopic, &out.DeleteAuditLogAndTopic
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.LogSetID != nil {
		in, out := &in.LogSetID, &out.LogSetID
		*out = new(string)
		**out = **in
	}
	if in.TopicID != nil {
		in, out := &in.TopicID, &out.TopicID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterAuditInitParameters.
func (in *ClusterAuditInitParameters) DeepCopy() *ClusterAuditInitParameters {
	if in == nil {
		return nil
	}
	out := new(ClusterAuditInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterAuditObservation) DeepCopyInto(out *ClusterAuditObservation) {
	*out = *in
	if in.DeleteAuditLogAndTopic != nil {
		in, out := &in.DeleteAuditLogAndTopic, &out.DeleteAuditLogAndTopic
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.LogSetID != nil {
		in, out := &in.LogSetID, &out.LogSetID
		*out = new(string)
		**out = **in
	}
	if in.TopicID != nil {
		in, out := &in.TopicID, &out.TopicID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterAuditObservation.
func (in *ClusterAuditObservation) DeepCopy() *ClusterAuditObservation {
	if in == nil {
		return nil
	}
	out := new(ClusterAuditObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterAuditParameters) DeepCopyInto(out *ClusterAuditParameters) {
	*out = *in
	if in.DeleteAuditLogAndTopic != nil {
		in, out := &in.DeleteAuditLogAndTopic, &out.DeleteAuditLogAndTopic
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.LogSetID != nil {
		in, out := &in.LogSetID, &out.LogSetID
		*out = new(string)
		**out = **in
	}
	if in.TopicID != nil {
		in, out := &in.TopicID, &out.TopicID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterAuditParameters.
func (in *ClusterAuditParameters) DeepCopy() *ClusterAuditParameters {
	if in == nil {
		return nil
	}
	out := new(ClusterAuditParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterEndpoint) DeepCopyInto(out *ClusterEndpoint) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterEndpoint.
func (in *ClusterEndpoint) DeepCopy() *ClusterEndpoint {
	if in == nil {
		return nil
	}
	out := new(ClusterEndpoint)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ClusterEndpoint) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterEndpointInitParameters) DeepCopyInto(out *ClusterEndpointInitParameters) {
	*out = *in
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIDRef != nil {
		in, out := &in.ClusterIDRef, &out.ClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIDSelector != nil {
		in, out := &in.ClusterIDSelector, &out.ClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterInternet != nil {
		in, out := &in.ClusterInternet, &out.ClusterInternet
		*out = new(bool)
		**out = **in
	}
	if in.ClusterInternetDomain != nil {
		in, out := &in.ClusterInternetDomain, &out.ClusterInternetDomain
		*out = new(string)
		**out = **in
	}
	if in.ClusterInternetSecurityGroup != nil {
		in, out := &in.ClusterInternetSecurityGroup, &out.ClusterInternetSecurityGroup
		*out = new(string)
		**out = **in
	}
	if in.ClusterIntranet != nil {
		in, out := &in.ClusterIntranet, &out.ClusterIntranet
		*out = new(bool)
		**out = **in
	}
	if in.ClusterIntranetDomain != nil {
		in, out := &in.ClusterIntranetDomain, &out.ClusterIntranetDomain
		*out = new(string)
		**out = **in
	}
	if in.ClusterIntranetSubnetID != nil {
		in, out := &in.ClusterIntranetSubnetID, &out.ClusterIntranetSubnetID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIntranetSubnetIDRef != nil {
		in, out := &in.ClusterIntranetSubnetIDRef, &out.ClusterIntranetSubnetIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIntranetSubnetIDSelector != nil {
		in, out := &in.ClusterIntranetSubnetIDSelector, &out.ClusterIntranetSubnetIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ExtensiveParameters != nil {
		in, out := &in.ExtensiveParameters, &out.ExtensiveParameters
		*out = new(string)
		**out = **in
	}
	if in.ManagedClusterInternetSecurityPolicies != nil {
		in, out := &in.ManagedClusterInternetSecurityPolicies, &out.ManagedClusterInternetSecurityPolicies
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterEndpointInitParameters.
func (in *ClusterEndpointInitParameters) DeepCopy() *ClusterEndpointInitParameters {
	if in == nil {
		return nil
	}
	out := new(ClusterEndpointInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterEndpointList) DeepCopyInto(out *ClusterEndpointList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ClusterEndpoint, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterEndpointList.
func (in *ClusterEndpointList) DeepCopy() *ClusterEndpointList {
	if in == nil {
		return nil
	}
	out := new(ClusterEndpointList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ClusterEndpointList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterEndpointObservation) DeepCopyInto(out *ClusterEndpointObservation) {
	*out = *in
	if in.CertificationAuthority != nil {
		in, out := &in.CertificationAuthority, &out.CertificationAuthority
		*out = new(string)
		**out = **in
	}
	if in.ClusterDeployType != nil {
		in, out := &in.ClusterDeployType, &out.ClusterDeployType
		*out = new(string)
		**out = **in
	}
	if in.ClusterExternalEndpoint != nil {
		in, out := &in.ClusterExternalEndpoint, &out.ClusterExternalEndpoint
		*out = new(string)
		**out = **in
	}
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ClusterInternet != nil {
		in, out := &in.ClusterInternet, &out.ClusterInternet
		*out = new(bool)
		**out = **in
	}
	if in.ClusterInternetDomain != nil {
		in, out := &in.ClusterInternetDomain, &out.ClusterInternetDomain
		*out = new(string)
		**out = **in
	}
	if in.ClusterInternetSecurityGroup != nil {
		in, out := &in.ClusterInternetSecurityGroup, &out.ClusterInternetSecurityGroup
		*out = new(string)
		**out = **in
	}
	if in.ClusterIntranet != nil {
		in, out := &in.ClusterIntranet, &out.ClusterIntranet
		*out = new(bool)
		**out = **in
	}
	if in.ClusterIntranetDomain != nil {
		in, out := &in.ClusterIntranetDomain, &out.ClusterIntranetDomain
		*out = new(string)
		**out = **in
	}
	if in.ClusterIntranetSubnetID != nil {
		in, out := &in.ClusterIntranetSubnetID, &out.ClusterIntranetSubnetID
		*out = new(string)
		**out = **in
	}
	if in.Domain != nil {
		in, out := &in.Domain, &out.Domain
		*out = new(string)
		**out = **in
	}
	if in.ExtensiveParameters != nil {
		in, out := &in.ExtensiveParameters, &out.ExtensiveParameters
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.KubeConfig != nil {
		in, out := &in.KubeConfig, &out.KubeConfig
		*out = new(string)
		**out = **in
	}
	if in.KubeConfigIntranet != nil {
		in, out := &in.KubeConfigIntranet, &out.KubeConfigIntranet
		*out = new(string)
		**out = **in
	}
	if in.ManagedClusterInternetSecurityPolicies != nil {
		in, out := &in.ManagedClusterInternetSecurityPolicies, &out.ManagedClusterInternetSecurityPolicies
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PgwEndpoint != nil {
		in, out := &in.PgwEndpoint, &out.PgwEndpoint
		*out = new(string)
		**out = **in
	}
	if in.UserName != nil {
		in, out := &in.UserName, &out.UserName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterEndpointObservation.
func (in *ClusterEndpointObservation) DeepCopy() *ClusterEndpointObservation {
	if in == nil {
		return nil
	}
	out := new(ClusterEndpointObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterEndpointParameters) DeepCopyInto(out *ClusterEndpointParameters) {
	*out = *in
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIDRef != nil {
		in, out := &in.ClusterIDRef, &out.ClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIDSelector != nil {
		in, out := &in.ClusterIDSelector, &out.ClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterInternet != nil {
		in, out := &in.ClusterInternet, &out.ClusterInternet
		*out = new(bool)
		**out = **in
	}
	if in.ClusterInternetDomain != nil {
		in, out := &in.ClusterInternetDomain, &out.ClusterInternetDomain
		*out = new(string)
		**out = **in
	}
	if in.ClusterInternetSecurityGroup != nil {
		in, out := &in.ClusterInternetSecurityGroup, &out.ClusterInternetSecurityGroup
		*out = new(string)
		**out = **in
	}
	if in.ClusterIntranet != nil {
		in, out := &in.ClusterIntranet, &out.ClusterIntranet
		*out = new(bool)
		**out = **in
	}
	if in.ClusterIntranetDomain != nil {
		in, out := &in.ClusterIntranetDomain, &out.ClusterIntranetDomain
		*out = new(string)
		**out = **in
	}
	if in.ClusterIntranetSubnetID != nil {
		in, out := &in.ClusterIntranetSubnetID, &out.ClusterIntranetSubnetID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIntranetSubnetIDRef != nil {
		in, out := &in.ClusterIntranetSubnetIDRef, &out.ClusterIntranetSubnetIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIntranetSubnetIDSelector != nil {
		in, out := &in.ClusterIntranetSubnetIDSelector, &out.ClusterIntranetSubnetIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ExtensiveParameters != nil {
		in, out := &in.ExtensiveParameters, &out.ExtensiveParameters
		*out = new(string)
		**out = **in
	}
	if in.ManagedClusterInternetSecurityPolicies != nil {
		in, out := &in.ManagedClusterInternetSecurityPolicies, &out.ManagedClusterInternetSecurityPolicies
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterEndpointParameters.
func (in *ClusterEndpointParameters) DeepCopy() *ClusterEndpointParameters {
	if in == nil {
		return nil
	}
	out := new(ClusterEndpointParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterEndpointSpec) DeepCopyInto(out *ClusterEndpointSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterEndpointSpec.
func (in *ClusterEndpointSpec) DeepCopy() *ClusterEndpointSpec {
	if in == nil {
		return nil
	}
	out := new(ClusterEndpointSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterEndpointStatus) DeepCopyInto(out *ClusterEndpointStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterEndpointStatus.
func (in *ClusterEndpointStatus) DeepCopy() *ClusterEndpointStatus {
	if in == nil {
		return nil
	}
	out := new(ClusterEndpointStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterExtraArgsInitParameters) DeepCopyInto(out *ClusterExtraArgsInitParameters) {
	*out = *in
	if in.KubeApiserver != nil {
		in, out := &in.KubeApiserver, &out.KubeApiserver
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.KubeControllerManager != nil {
		in, out := &in.KubeControllerManager, &out.KubeControllerManager
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.KubeScheduler != nil {
		in, out := &in.KubeScheduler, &out.KubeScheduler
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterExtraArgsInitParameters.
func (in *ClusterExtraArgsInitParameters) DeepCopy() *ClusterExtraArgsInitParameters {
	if in == nil {
		return nil
	}
	out := new(ClusterExtraArgsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterExtraArgsObservation) DeepCopyInto(out *ClusterExtraArgsObservation) {
	*out = *in
	if in.KubeApiserver != nil {
		in, out := &in.KubeApiserver, &out.KubeApiserver
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.KubeControllerManager != nil {
		in, out := &in.KubeControllerManager, &out.KubeControllerManager
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.KubeScheduler != nil {
		in, out := &in.KubeScheduler, &out.KubeScheduler
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterExtraArgsObservation.
func (in *ClusterExtraArgsObservation) DeepCopy() *ClusterExtraArgsObservation {
	if in == nil {
		return nil
	}
	out := new(ClusterExtraArgsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterExtraArgsParameters) DeepCopyInto(out *ClusterExtraArgsParameters) {
	*out = *in
	if in.KubeApiserver != nil {
		in, out := &in.KubeApiserver, &out.KubeApiserver
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.KubeControllerManager != nil {
		in, out := &in.KubeControllerManager, &out.KubeControllerManager
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.KubeScheduler != nil {
		in, out := &in.KubeScheduler, &out.KubeScheduler
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterExtraArgsParameters.
func (in *ClusterExtraArgsParameters) DeepCopy() *ClusterExtraArgsParameters {
	if in == nil {
		return nil
	}
	out := new(ClusterExtraArgsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterInitParameters) DeepCopyInto(out *ClusterInitParameters) {
	*out = *in
	if in.AcquireClusterAdminRole != nil {
		in, out := &in.AcquireClusterAdminRole, &out.AcquireClusterAdminRole
		*out = new(bool)
		**out = **in
	}
	if in.AuthOptions != nil {
		in, out := &in.AuthOptions, &out.AuthOptions
		*out = make([]AuthOptionsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AutoUpgradeClusterLevel != nil {
		in, out := &in.AutoUpgradeClusterLevel, &out.AutoUpgradeClusterLevel
		*out = new(bool)
		**out = **in
	}
	if in.BasePodNum != nil {
		in, out := &in.BasePodNum, &out.BasePodNum
		*out = new(float64)
		**out = **in
	}
	if in.CdcID != nil {
		in, out := &in.CdcID, &out.CdcID
		*out = new(string)
		**out = **in
	}
	if in.ClaimExpiredSeconds != nil {
		in, out := &in.ClaimExpiredSeconds, &out.ClaimExpiredSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ClusterAudit != nil {
		in, out := &in.ClusterAudit, &out.ClusterAudit
		*out = make([]ClusterAuditInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ClusterCidr != nil {
		in, out := &in.ClusterCidr, &out.ClusterCidr
		*out = new(string)
		**out = **in
	}
	if in.ClusterDeployType != nil {
		in, out := &in.ClusterDeployType, &out.ClusterDeployType
		*out = new(string)
		**out = **in
	}
	if in.ClusterDesc != nil {
		in, out := &in.ClusterDesc, &out.ClusterDesc
		*out = new(string)
		**out = **in
	}
	if in.ClusterExtraArgs != nil {
		in, out := &in.ClusterExtraArgs, &out.ClusterExtraArgs
		*out = make([]ClusterExtraArgsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ClusterInternet != nil {
		in, out := &in.ClusterInternet, &out.ClusterInternet
		*out = new(bool)
		**out = **in
	}
	if in.ClusterInternetDomain != nil {
		in, out := &in.ClusterInternetDomain, &out.ClusterInternetDomain
		*out = new(string)
		**out = **in
	}
	if in.ClusterInternetSecurityGroup != nil {
		in, out := &in.ClusterInternetSecurityGroup, &out.ClusterInternetSecurityGroup
		*out = new(string)
		**out = **in
	}
	if in.ClusterIntranet != nil {
		in, out := &in.ClusterIntranet, &out.ClusterIntranet
		*out = new(bool)
		**out = **in
	}
	if in.ClusterIntranetDomain != nil {
		in, out := &in.ClusterIntranetDomain, &out.ClusterIntranetDomain
		*out = new(string)
		**out = **in
	}
	if in.ClusterIntranetSubnetID != nil {
		in, out := &in.ClusterIntranetSubnetID, &out.ClusterIntranetSubnetID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIpvs != nil {
		in, out := &in.ClusterIpvs, &out.ClusterIpvs
		*out = new(bool)
		**out = **in
	}
	if in.ClusterLevel != nil {
		in, out := &in.ClusterLevel, &out.ClusterLevel
		*out = new(string)
		**out = **in
	}
	if in.ClusterMaxPodNum != nil {
		in, out := &in.ClusterMaxPodNum, &out.ClusterMaxPodNum
		*out = new(float64)
		**out = **in
	}
	if in.ClusterMaxServiceNum != nil {
		in, out := &in.ClusterMaxServiceNum, &out.ClusterMaxServiceNum
		*out = new(float64)
		**out = **in
	}
	if in.ClusterName != nil {
		in, out := &in.ClusterName, &out.ClusterName
		*out = new(string)
		**out = **in
	}
	if in.ClusterOs != nil {
		in, out := &in.ClusterOs, &out.ClusterOs
		*out = new(string)
		**out = **in
	}
	if in.ClusterOsType != nil {
		in, out := &in.ClusterOsType, &out.ClusterOsType
		*out = new(string)
		**out = **in
	}
	if in.ClusterSubnetID != nil {
		in, out := &in.ClusterSubnetID, &out.ClusterSubnetID
		*out = new(string)
		**out = **in
	}
	if in.ClusterVersion != nil {
		in, out := &in.ClusterVersion, &out.ClusterVersion
		*out = new(string)
		**out = **in
	}
	if in.ContainerRuntime != nil {
		in, out := &in.ContainerRuntime, &out.ContainerRuntime
		*out = new(string)
		**out = **in
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.DockerGraphPath != nil {
		in, out := &in.DockerGraphPath, &out.DockerGraphPath
		*out = new(string)
		**out = **in
	}
	if in.EnableCustomizedPodCidr != nil {
		in, out := &in.EnableCustomizedPodCidr, &out.EnableCustomizedPodCidr
		*out = new(bool)
		**out = **in
	}
	if in.EniSubnetIds != nil {
		in, out := &in.EniSubnetIds, &out.EniSubnetIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.EventPersistence != nil {
		in, out := &in.EventPersistence, &out.EventPersistence
		*out = make([]EventPersistenceInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ExistInstance != nil {
		in, out := &in.ExistInstance, &out.ExistInstance
		*out = make([]ExistInstanceInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ExtensionAddon != nil {
		in, out := &in.ExtensionAddon, &out.ExtensionAddon
		*out = make([]ExtensionAddonInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ExtraArgs != nil {
		in, out := &in.ExtraArgs, &out.ExtraArgs
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.GlobeDesiredPodNum != nil {
		in, out := &in.GlobeDesiredPodNum, &out.GlobeDesiredPodNum
		*out = new(float64)
		**out = **in
	}
	if in.IgnoreClusterCidrConflict != nil {
		in, out := &in.IgnoreClusterCidrConflict, &out.IgnoreClusterCidrConflict
		*out = new(bool)
		**out = **in
	}
	if in.IgnoreServiceCidrConflict != nil {
		in, out := &in.IgnoreServiceCidrConflict, &out.IgnoreServiceCidrConflict
		*out = new(bool)
		**out = **in
	}
	if in.InstanceDeleteMode != nil {
		in, out := &in.InstanceDeleteMode, &out.InstanceDeleteMode
		*out = new(string)
		**out = **in
	}
	if in.IsNonStaticIPMode != nil {
		in, out := &in.IsNonStaticIPMode, &out.IsNonStaticIPMode
		*out = new(bool)
		**out = **in
	}
	if in.KubeProxyMode != nil {
		in, out := &in.KubeProxyMode, &out.KubeProxyMode
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.LogAgent != nil {
		in, out := &in.LogAgent, &out.LogAgent
		*out = make([]LogAgentInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ManagedClusterInternetSecurityPolicies != nil {
		in, out := &in.ManagedClusterInternetSecurityPolicies, &out.ManagedClusterInternetSecurityPolicies
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.MasterConfig != nil {
		in, out := &in.MasterConfig, &out.MasterConfig
		*out = make([]ClusterMasterConfigInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MountTarget != nil {
		in, out := &in.MountTarget, &out.MountTarget
		*out = new(string)
		**out = **in
	}
	if in.NetworkType != nil {
		in, out := &in.NetworkType, &out.NetworkType
		*out = new(string)
		**out = **in
	}
	if in.NodeNameType != nil {
		in, out := &in.NodeNameType, &out.NodeNameType
		*out = new(string)
		**out = **in
	}
	if in.NodePoolGlobalConfig != nil {
		in, out := &in.NodePoolGlobalConfig, &out.NodePoolGlobalConfig
		*out = make([]NodePoolGlobalConfigInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PreStartUserScript != nil {
		in, out := &in.PreStartUserScript, &out.PreStartUserScript
		*out = new(string)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(float64)
		**out = **in
	}
	if in.ResourceDeleteOptions != nil {
		in, out := &in.ResourceDeleteOptions, &out.ResourceDeleteOptions
		*out = make([]ResourceDeleteOptionsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RuntimeVersion != nil {
		in, out := &in.RuntimeVersion, &out.RuntimeVersion
		*out = new(string)
		**out = **in
	}
	if in.ServiceCidr != nil {
		in, out := &in.ServiceCidr, &out.ServiceCidr
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Unschedulable != nil {
		in, out := &in.Unschedulable, &out.Unschedulable
		*out = new(float64)
		**out = **in
	}
	if in.UpgradeInstancesFollowCluster != nil {
		in, out := &in.UpgradeInstancesFollowCluster, &out.UpgradeInstancesFollowCluster
		*out = new(bool)
		**out = **in
	}
	if in.VPCCniType != nil {
		in, out := &in.VPCCniType, &out.VPCCniType
		*out = new(string)
		**out = **in
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
	if in.VPCIDRef != nil {
		in, out := &in.VPCIDRef, &out.VPCIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.VPCIDSelector != nil {
		in, out := &in.VPCIDSelector, &out.VPCIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.WorkerConfig != nil {
		in, out := &in.WorkerConfig, &out.WorkerConfig
		*out = make([]WorkerConfigInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterInitParameters.
func (in *ClusterInitParameters) DeepCopy() *ClusterInitParameters {
	if in == nil {
		return nil
	}
	out := new(ClusterInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterList) DeepCopyInto(out *ClusterList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Cluster, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterList.
func (in *ClusterList) DeepCopy() *ClusterList {
	if in == nil {
		return nil
	}
	out := new(ClusterList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ClusterList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterMasterConfigInitParameters) DeepCopyInto(out *ClusterMasterConfigInitParameters) {
	*out = *in
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.BandwidthPackageID != nil {
		in, out := &in.BandwidthPackageID, &out.BandwidthPackageID
		*out = new(string)
		**out = **in
	}
	if in.CamRoleName != nil {
		in, out := &in.CamRoleName, &out.CamRoleName
		*out = new(string)
		**out = **in
	}
	if in.Count != nil {
		in, out := &in.Count, &out.Count
		*out = new(float64)
		**out = **in
	}
	if in.DataDisk != nil {
		in, out := &in.DataDisk, &out.DataDisk
		*out = make([]MasterConfigDataDiskInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DesiredPodNum != nil {
		in, out := &in.DesiredPodNum, &out.DesiredPodNum
		*out = new(float64)
		**out = **in
	}
	if in.DisasterRecoverGroupIds != nil {
		in, out := &in.DisasterRecoverGroupIds, &out.DisasterRecoverGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.EnhancedMonitorService != nil {
		in, out := &in.EnhancedMonitorService, &out.EnhancedMonitorService
		*out = new(bool)
		**out = **in
	}
	if in.EnhancedSecurityService != nil {
		in, out := &in.EnhancedSecurityService, &out.EnhancedSecurityService
		*out = new(bool)
		**out = **in
	}
	if in.Hostname != nil {
		in, out := &in.Hostname, &out.Hostname
		*out = new(string)
		**out = **in
	}
	if in.HpcClusterID != nil {
		in, out := &in.HpcClusterID, &out.HpcClusterID
		*out = new(string)
		**out = **in
	}
	if in.ImgID != nil {
		in, out := &in.ImgID, &out.ImgID
		*out = new(string)
		**out = **in
	}
	if in.InstanceChargeType != nil {
		in, out := &in.InstanceChargeType, &out.InstanceChargeType
		*out = new(string)
		**out = **in
	}
	if in.InstanceChargeTypePrepaidPeriod != nil {
		in, out := &in.InstanceChargeTypePrepaidPeriod, &out.InstanceChargeTypePrepaidPeriod
		*out = new(float64)
		**out = **in
	}
	if in.InstanceChargeTypePrepaidRenewFlag != nil {
		in, out := &in.InstanceChargeTypePrepaidRenewFlag, &out.InstanceChargeTypePrepaidRenewFlag
		*out = new(string)
		**out = **in
	}
	if in.InstanceName != nil {
		in, out := &in.InstanceName, &out.InstanceName
		*out = new(string)
		**out = **in
	}
	if in.InstanceType != nil {
		in, out := &in.InstanceType, &out.InstanceType
		*out = new(string)
		**out = **in
	}
	if in.InternetChargeType != nil {
		in, out := &in.InternetChargeType, &out.InternetChargeType
		*out = new(string)
		**out = **in
	}
	if in.InternetMaxBandwidthOut != nil {
		in, out := &in.InternetMaxBandwidthOut, &out.InternetMaxBandwidthOut
		*out = new(float64)
		**out = **in
	}
	if in.KeyIds != nil {
		in, out := &in.KeyIds, &out.KeyIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PublicIPAssigned != nil {
		in, out := &in.PublicIPAssigned, &out.PublicIPAssigned
		*out = new(bool)
		**out = **in
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.SystemDiskSize != nil {
		in, out := &in.SystemDiskSize, &out.SystemDiskSize
		*out = new(float64)
		**out = **in
	}
	if in.SystemDiskType != nil {
		in, out := &in.SystemDiskType, &out.SystemDiskType
		*out = new(string)
		**out = **in
	}
	if in.UserData != nil {
		in, out := &in.UserData, &out.UserData
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterMasterConfigInitParameters.
func (in *ClusterMasterConfigInitParameters) DeepCopy() *ClusterMasterConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(ClusterMasterConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterMasterConfigObservation) DeepCopyInto(out *ClusterMasterConfigObservation) {
	*out = *in
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.BandwidthPackageID != nil {
		in, out := &in.BandwidthPackageID, &out.BandwidthPackageID
		*out = new(string)
		**out = **in
	}
	if in.CamRoleName != nil {
		in, out := &in.CamRoleName, &out.CamRoleName
		*out = new(string)
		**out = **in
	}
	if in.Count != nil {
		in, out := &in.Count, &out.Count
		*out = new(float64)
		**out = **in
	}
	if in.DataDisk != nil {
		in, out := &in.DataDisk, &out.DataDisk
		*out = make([]MasterConfigDataDiskObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DesiredPodNum != nil {
		in, out := &in.DesiredPodNum, &out.DesiredPodNum
		*out = new(float64)
		**out = **in
	}
	if in.DisasterRecoverGroupIds != nil {
		in, out := &in.DisasterRecoverGroupIds, &out.DisasterRecoverGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.EnhancedMonitorService != nil {
		in, out := &in.EnhancedMonitorService, &out.EnhancedMonitorService
		*out = new(bool)
		**out = **in
	}
	if in.EnhancedSecurityService != nil {
		in, out := &in.EnhancedSecurityService, &out.EnhancedSecurityService
		*out = new(bool)
		**out = **in
	}
	if in.Hostname != nil {
		in, out := &in.Hostname, &out.Hostname
		*out = new(string)
		**out = **in
	}
	if in.HpcClusterID != nil {
		in, out := &in.HpcClusterID, &out.HpcClusterID
		*out = new(string)
		**out = **in
	}
	if in.ImgID != nil {
		in, out := &in.ImgID, &out.ImgID
		*out = new(string)
		**out = **in
	}
	if in.InstanceChargeType != nil {
		in, out := &in.InstanceChargeType, &out.InstanceChargeType
		*out = new(string)
		**out = **in
	}
	if in.InstanceChargeTypePrepaidPeriod != nil {
		in, out := &in.InstanceChargeTypePrepaidPeriod, &out.InstanceChargeTypePrepaidPeriod
		*out = new(float64)
		**out = **in
	}
	if in.InstanceChargeTypePrepaidRenewFlag != nil {
		in, out := &in.InstanceChargeTypePrepaidRenewFlag, &out.InstanceChargeTypePrepaidRenewFlag
		*out = new(string)
		**out = **in
	}
	if in.InstanceName != nil {
		in, out := &in.InstanceName, &out.InstanceName
		*out = new(string)
		**out = **in
	}
	if in.InstanceType != nil {
		in, out := &in.InstanceType, &out.InstanceType
		*out = new(string)
		**out = **in
	}
	if in.InternetChargeType != nil {
		in, out := &in.InternetChargeType, &out.InternetChargeType
		*out = new(string)
		**out = **in
	}
	if in.InternetMaxBandwidthOut != nil {
		in, out := &in.InternetMaxBandwidthOut, &out.InternetMaxBandwidthOut
		*out = new(float64)
		**out = **in
	}
	if in.KeyIds != nil {
		in, out := &in.KeyIds, &out.KeyIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PublicIPAssigned != nil {
		in, out := &in.PublicIPAssigned, &out.PublicIPAssigned
		*out = new(bool)
		**out = **in
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.SystemDiskSize != nil {
		in, out := &in.SystemDiskSize, &out.SystemDiskSize
		*out = new(float64)
		**out = **in
	}
	if in.SystemDiskType != nil {
		in, out := &in.SystemDiskType, &out.SystemDiskType
		*out = new(string)
		**out = **in
	}
	if in.UserData != nil {
		in, out := &in.UserData, &out.UserData
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterMasterConfigObservation.
func (in *ClusterMasterConfigObservation) DeepCopy() *ClusterMasterConfigObservation {
	if in == nil {
		return nil
	}
	out := new(ClusterMasterConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterMasterConfigParameters) DeepCopyInto(out *ClusterMasterConfigParameters) {
	*out = *in
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.BandwidthPackageID != nil {
		in, out := &in.BandwidthPackageID, &out.BandwidthPackageID
		*out = new(string)
		**out = **in
	}
	if in.CamRoleName != nil {
		in, out := &in.CamRoleName, &out.CamRoleName
		*out = new(string)
		**out = **in
	}
	if in.Count != nil {
		in, out := &in.Count, &out.Count
		*out = new(float64)
		**out = **in
	}
	if in.DataDisk != nil {
		in, out := &in.DataDisk, &out.DataDisk
		*out = make([]MasterConfigDataDiskParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DesiredPodNum != nil {
		in, out := &in.DesiredPodNum, &out.DesiredPodNum
		*out = new(float64)
		**out = **in
	}
	if in.DisasterRecoverGroupIds != nil {
		in, out := &in.DisasterRecoverGroupIds, &out.DisasterRecoverGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.EnhancedMonitorService != nil {
		in, out := &in.EnhancedMonitorService, &out.EnhancedMonitorService
		*out = new(bool)
		**out = **in
	}
	if in.EnhancedSecurityService != nil {
		in, out := &in.EnhancedSecurityService, &out.EnhancedSecurityService
		*out = new(bool)
		**out = **in
	}
	if in.Hostname != nil {
		in, out := &in.Hostname, &out.Hostname
		*out = new(string)
		**out = **in
	}
	if in.HpcClusterID != nil {
		in, out := &in.HpcClusterID, &out.HpcClusterID
		*out = new(string)
		**out = **in
	}
	if in.ImgID != nil {
		in, out := &in.ImgID, &out.ImgID
		*out = new(string)
		**out = **in
	}
	if in.InstanceChargeType != nil {
		in, out := &in.InstanceChargeType, &out.InstanceChargeType
		*out = new(string)
		**out = **in
	}
	if in.InstanceChargeTypePrepaidPeriod != nil {
		in, out := &in.InstanceChargeTypePrepaidPeriod, &out.InstanceChargeTypePrepaidPeriod
		*out = new(float64)
		**out = **in
	}
	if in.InstanceChargeTypePrepaidRenewFlag != nil {
		in, out := &in.InstanceChargeTypePrepaidRenewFlag, &out.InstanceChargeTypePrepaidRenewFlag
		*out = new(string)
		**out = **in
	}
	if in.InstanceName != nil {
		in, out := &in.InstanceName, &out.InstanceName
		*out = new(string)
		**out = **in
	}
	if in.InstanceType != nil {
		in, out := &in.InstanceType, &out.InstanceType
		*out = new(string)
		**out = **in
	}
	if in.InternetChargeType != nil {
		in, out := &in.InternetChargeType, &out.InternetChargeType
		*out = new(string)
		**out = **in
	}
	if in.InternetMaxBandwidthOut != nil {
		in, out := &in.InternetMaxBandwidthOut, &out.InternetMaxBandwidthOut
		*out = new(float64)
		**out = **in
	}
	if in.KeyIds != nil {
		in, out := &in.KeyIds, &out.KeyIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.PublicIPAssigned != nil {
		in, out := &in.PublicIPAssigned, &out.PublicIPAssigned
		*out = new(bool)
		**out = **in
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.SystemDiskSize != nil {
		in, out := &in.SystemDiskSize, &out.SystemDiskSize
		*out = new(float64)
		**out = **in
	}
	if in.SystemDiskType != nil {
		in, out := &in.SystemDiskType, &out.SystemDiskType
		*out = new(string)
		**out = **in
	}
	if in.UserData != nil {
		in, out := &in.UserData, &out.UserData
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterMasterConfigParameters.
func (in *ClusterMasterConfigParameters) DeepCopy() *ClusterMasterConfigParameters {
	if in == nil {
		return nil
	}
	out := new(ClusterMasterConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterObservation) DeepCopyInto(out *ClusterObservation) {
	*out = *in
	if in.AcquireClusterAdminRole != nil {
		in, out := &in.AcquireClusterAdminRole, &out.AcquireClusterAdminRole
		*out = new(bool)
		**out = **in
	}
	if in.AuthOptions != nil {
		in, out := &in.AuthOptions, &out.AuthOptions
		*out = make([]AuthOptionsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AutoUpgradeClusterLevel != nil {
		in, out := &in.AutoUpgradeClusterLevel, &out.AutoUpgradeClusterLevel
		*out = new(bool)
		**out = **in
	}
	if in.BasePodNum != nil {
		in, out := &in.BasePodNum, &out.BasePodNum
		*out = new(float64)
		**out = **in
	}
	if in.CdcID != nil {
		in, out := &in.CdcID, &out.CdcID
		*out = new(string)
		**out = **in
	}
	if in.CertificationAuthority != nil {
		in, out := &in.CertificationAuthority, &out.CertificationAuthority
		*out = new(string)
		**out = **in
	}
	if in.ClaimExpiredSeconds != nil {
		in, out := &in.ClaimExpiredSeconds, &out.ClaimExpiredSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ClusterAsEnabled != nil {
		in, out := &in.ClusterAsEnabled, &out.ClusterAsEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ClusterAudit != nil {
		in, out := &in.ClusterAudit, &out.ClusterAudit
		*out = make([]ClusterAuditObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ClusterCidr != nil {
		in, out := &in.ClusterCidr, &out.ClusterCidr
		*out = new(string)
		**out = **in
	}
	if in.ClusterDeployType != nil {
		in, out := &in.ClusterDeployType, &out.ClusterDeployType
		*out = new(string)
		**out = **in
	}
	if in.ClusterDesc != nil {
		in, out := &in.ClusterDesc, &out.ClusterDesc
		*out = new(string)
		**out = **in
	}
	if in.ClusterExternalEndpoint != nil {
		in, out := &in.ClusterExternalEndpoint, &out.ClusterExternalEndpoint
		*out = new(string)
		**out = **in
	}
	if in.ClusterExtraArgs != nil {
		in, out := &in.ClusterExtraArgs, &out.ClusterExtraArgs
		*out = make([]ClusterExtraArgsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ClusterInternet != nil {
		in, out := &in.ClusterInternet, &out.ClusterInternet
		*out = new(bool)
		**out = **in
	}
	if in.ClusterInternetDomain != nil {
		in, out := &in.ClusterInternetDomain, &out.ClusterInternetDomain
		*out = new(string)
		**out = **in
	}
	if in.ClusterInternetSecurityGroup != nil {
		in, out := &in.ClusterInternetSecurityGroup, &out.ClusterInternetSecurityGroup
		*out = new(string)
		**out = **in
	}
	if in.ClusterIntranet != nil {
		in, out := &in.ClusterIntranet, &out.ClusterIntranet
		*out = new(bool)
		**out = **in
	}
	if in.ClusterIntranetDomain != nil {
		in, out := &in.ClusterIntranetDomain, &out.ClusterIntranetDomain
		*out = new(string)
		**out = **in
	}
	if in.ClusterIntranetSubnetID != nil {
		in, out := &in.ClusterIntranetSubnetID, &out.ClusterIntranetSubnetID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIpvs != nil {
		in, out := &in.ClusterIpvs, &out.ClusterIpvs
		*out = new(bool)
		**out = **in
	}
	if in.ClusterLevel != nil {
		in, out := &in.ClusterLevel, &out.ClusterLevel
		*out = new(string)
		**out = **in
	}
	if in.ClusterMaxPodNum != nil {
		in, out := &in.ClusterMaxPodNum, &out.ClusterMaxPodNum
		*out = new(float64)
		**out = **in
	}
	if in.ClusterMaxServiceNum != nil {
		in, out := &in.ClusterMaxServiceNum, &out.ClusterMaxServiceNum
		*out = new(float64)
		**out = **in
	}
	if in.ClusterName != nil {
		in, out := &in.ClusterName, &out.ClusterName
		*out = new(string)
		**out = **in
	}
	if in.ClusterNodeNum != nil {
		in, out := &in.ClusterNodeNum, &out.ClusterNodeNum
		*out = new(float64)
		**out = **in
	}
	if in.ClusterOs != nil {
		in, out := &in.ClusterOs, &out.ClusterOs
		*out = new(string)
		**out = **in
	}
	if in.ClusterOsType != nil {
		in, out := &in.ClusterOsType, &out.ClusterOsType
		*out = new(string)
		**out = **in
	}
	if in.ClusterSubnetID != nil {
		in, out := &in.ClusterSubnetID, &out.ClusterSubnetID
		*out = new(string)
		**out = **in
	}
	if in.ClusterVersion != nil {
		in, out := &in.ClusterVersion, &out.ClusterVersion
		*out = new(string)
		**out = **in
	}
	if in.ContainerRuntime != nil {
		in, out := &in.ContainerRuntime, &out.ContainerRuntime
		*out = new(string)
		**out = **in
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.DockerGraphPath != nil {
		in, out := &in.DockerGraphPath, &out.DockerGraphPath
		*out = new(string)
		**out = **in
	}
	if in.Domain != nil {
		in, out := &in.Domain, &out.Domain
		*out = new(string)
		**out = **in
	}
	if in.EnableCustomizedPodCidr != nil {
		in, out := &in.EnableCustomizedPodCidr, &out.EnableCustomizedPodCidr
		*out = new(bool)
		**out = **in
	}
	if in.EniSubnetIds != nil {
		in, out := &in.EniSubnetIds, &out.EniSubnetIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.EventPersistence != nil {
		in, out := &in.EventPersistence, &out.EventPersistence
		*out = make([]EventPersistenceObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ExistInstance != nil {
		in, out := &in.ExistInstance, &out.ExistInstance
		*out = make([]ExistInstanceObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ExtensionAddon != nil {
		in, out := &in.ExtensionAddon, &out.ExtensionAddon
		*out = make([]ExtensionAddonObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ExtraArgs != nil {
		in, out := &in.ExtraArgs, &out.ExtraArgs
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.GlobeDesiredPodNum != nil {
		in, out := &in.GlobeDesiredPodNum, &out.GlobeDesiredPodNum
		*out = new(float64)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IgnoreClusterCidrConflict != nil {
		in, out := &in.IgnoreClusterCidrConflict, &out.IgnoreClusterCidrConflict
		*out = new(bool)
		**out = **in
	}
	if in.IgnoreServiceCidrConflict != nil {
		in, out := &in.IgnoreServiceCidrConflict, &out.IgnoreServiceCidrConflict
		*out = new(bool)
		**out = **in
	}
	if in.InstanceDeleteMode != nil {
		in, out := &in.InstanceDeleteMode, &out.InstanceDeleteMode
		*out = new(string)
		**out = **in
	}
	if in.IsNonStaticIPMode != nil {
		in, out := &in.IsNonStaticIPMode, &out.IsNonStaticIPMode
		*out = new(bool)
		**out = **in
	}
	if in.KubeConfig != nil {
		in, out := &in.KubeConfig, &out.KubeConfig
		*out = new(string)
		**out = **in
	}
	if in.KubeConfigIntranet != nil {
		in, out := &in.KubeConfigIntranet, &out.KubeConfigIntranet
		*out = new(string)
		**out = **in
	}
	if in.KubeProxyMode != nil {
		in, out := &in.KubeProxyMode, &out.KubeProxyMode
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.LogAgent != nil {
		in, out := &in.LogAgent, &out.LogAgent
		*out = make([]LogAgentObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ManagedClusterInternetSecurityPolicies != nil {
		in, out := &in.ManagedClusterInternetSecurityPolicies, &out.ManagedClusterInternetSecurityPolicies
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.MasterConfig != nil {
		in, out := &in.MasterConfig, &out.MasterConfig
		*out = make([]ClusterMasterConfigObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MountTarget != nil {
		in, out := &in.MountTarget, &out.MountTarget
		*out = new(string)
		**out = **in
	}
	if in.NetworkType != nil {
		in, out := &in.NetworkType, &out.NetworkType
		*out = new(string)
		**out = **in
	}
	if in.NodeNameType != nil {
		in, out := &in.NodeNameType, &out.NodeNameType
		*out = new(string)
		**out = **in
	}
	if in.NodePoolGlobalConfig != nil {
		in, out := &in.NodePoolGlobalConfig, &out.NodePoolGlobalConfig
		*out = make([]NodePoolGlobalConfigObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Password != nil {
		in, out := &in.Password, &out.Password
		*out = new(string)
		**out = **in
	}
	if in.PgwEndpoint != nil {
		in, out := &in.PgwEndpoint, &out.PgwEndpoint
		*out = new(string)
		**out = **in
	}
	if in.PreStartUserScript != nil {
		in, out := &in.PreStartUserScript, &out.PreStartUserScript
		*out = new(string)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(float64)
		**out = **in
	}
	if in.ResourceDeleteOptions != nil {
		in, out := &in.ResourceDeleteOptions, &out.ResourceDeleteOptions
		*out = make([]ResourceDeleteOptionsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RuntimeVersion != nil {
		in, out := &in.RuntimeVersion, &out.RuntimeVersion
		*out = new(string)
		**out = **in
	}
	if in.SecurityPolicy != nil {
		in, out := &in.SecurityPolicy, &out.SecurityPolicy
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ServiceCidr != nil {
		in, out := &in.ServiceCidr, &out.ServiceCidr
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Unschedulable != nil {
		in, out := &in.Unschedulable, &out.Unschedulable
		*out = new(float64)
		**out = **in
	}
	if in.UpgradeInstancesFollowCluster != nil {
		in, out := &in.UpgradeInstancesFollowCluster, &out.UpgradeInstancesFollowCluster
		*out = new(bool)
		**out = **in
	}
	if in.UserName != nil {
		in, out := &in.UserName, &out.UserName
		*out = new(string)
		**out = **in
	}
	if in.VPCCniType != nil {
		in, out := &in.VPCCniType, &out.VPCCniType
		*out = new(string)
		**out = **in
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
	if in.WorkerConfig != nil {
		in, out := &in.WorkerConfig, &out.WorkerConfig
		*out = make([]WorkerConfigObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WorkerInstancesList != nil {
		in, out := &in.WorkerInstancesList, &out.WorkerInstancesList
		*out = make([]WorkerInstancesListObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterObservation.
func (in *ClusterObservation) DeepCopy() *ClusterObservation {
	if in == nil {
		return nil
	}
	out := new(ClusterObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterParameters) DeepCopyInto(out *ClusterParameters) {
	*out = *in
	if in.AcquireClusterAdminRole != nil {
		in, out := &in.AcquireClusterAdminRole, &out.AcquireClusterAdminRole
		*out = new(bool)
		**out = **in
	}
	if in.AuthOptions != nil {
		in, out := &in.AuthOptions, &out.AuthOptions
		*out = make([]AuthOptionsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AutoUpgradeClusterLevel != nil {
		in, out := &in.AutoUpgradeClusterLevel, &out.AutoUpgradeClusterLevel
		*out = new(bool)
		**out = **in
	}
	if in.BasePodNum != nil {
		in, out := &in.BasePodNum, &out.BasePodNum
		*out = new(float64)
		**out = **in
	}
	if in.CdcID != nil {
		in, out := &in.CdcID, &out.CdcID
		*out = new(string)
		**out = **in
	}
	if in.ClaimExpiredSeconds != nil {
		in, out := &in.ClaimExpiredSeconds, &out.ClaimExpiredSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ClusterAudit != nil {
		in, out := &in.ClusterAudit, &out.ClusterAudit
		*out = make([]ClusterAuditParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ClusterCidr != nil {
		in, out := &in.ClusterCidr, &out.ClusterCidr
		*out = new(string)
		**out = **in
	}
	if in.ClusterDeployType != nil {
		in, out := &in.ClusterDeployType, &out.ClusterDeployType
		*out = new(string)
		**out = **in
	}
	if in.ClusterDesc != nil {
		in, out := &in.ClusterDesc, &out.ClusterDesc
		*out = new(string)
		**out = **in
	}
	if in.ClusterExtraArgs != nil {
		in, out := &in.ClusterExtraArgs, &out.ClusterExtraArgs
		*out = make([]ClusterExtraArgsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ClusterInternet != nil {
		in, out := &in.ClusterInternet, &out.ClusterInternet
		*out = new(bool)
		**out = **in
	}
	if in.ClusterInternetDomain != nil {
		in, out := &in.ClusterInternetDomain, &out.ClusterInternetDomain
		*out = new(string)
		**out = **in
	}
	if in.ClusterInternetSecurityGroup != nil {
		in, out := &in.ClusterInternetSecurityGroup, &out.ClusterInternetSecurityGroup
		*out = new(string)
		**out = **in
	}
	if in.ClusterIntranet != nil {
		in, out := &in.ClusterIntranet, &out.ClusterIntranet
		*out = new(bool)
		**out = **in
	}
	if in.ClusterIntranetDomain != nil {
		in, out := &in.ClusterIntranetDomain, &out.ClusterIntranetDomain
		*out = new(string)
		**out = **in
	}
	if in.ClusterIntranetSubnetID != nil {
		in, out := &in.ClusterIntranetSubnetID, &out.ClusterIntranetSubnetID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIpvs != nil {
		in, out := &in.ClusterIpvs, &out.ClusterIpvs
		*out = new(bool)
		**out = **in
	}
	if in.ClusterLevel != nil {
		in, out := &in.ClusterLevel, &out.ClusterLevel
		*out = new(string)
		**out = **in
	}
	if in.ClusterMaxPodNum != nil {
		in, out := &in.ClusterMaxPodNum, &out.ClusterMaxPodNum
		*out = new(float64)
		**out = **in
	}
	if in.ClusterMaxServiceNum != nil {
		in, out := &in.ClusterMaxServiceNum, &out.ClusterMaxServiceNum
		*out = new(float64)
		**out = **in
	}
	if in.ClusterName != nil {
		in, out := &in.ClusterName, &out.ClusterName
		*out = new(string)
		**out = **in
	}
	if in.ClusterOs != nil {
		in, out := &in.ClusterOs, &out.ClusterOs
		*out = new(string)
		**out = **in
	}
	if in.ClusterOsType != nil {
		in, out := &in.ClusterOsType, &out.ClusterOsType
		*out = new(string)
		**out = **in
	}
	if in.ClusterSubnetID != nil {
		in, out := &in.ClusterSubnetID, &out.ClusterSubnetID
		*out = new(string)
		**out = **in
	}
	if in.ClusterVersion != nil {
		in, out := &in.ClusterVersion, &out.ClusterVersion
		*out = new(string)
		**out = **in
	}
	if in.ContainerRuntime != nil {
		in, out := &in.ContainerRuntime, &out.ContainerRuntime
		*out = new(string)
		**out = **in
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.DockerGraphPath != nil {
		in, out := &in.DockerGraphPath, &out.DockerGraphPath
		*out = new(string)
		**out = **in
	}
	if in.EnableCustomizedPodCidr != nil {
		in, out := &in.EnableCustomizedPodCidr, &out.EnableCustomizedPodCidr
		*out = new(bool)
		**out = **in
	}
	if in.EniSubnetIds != nil {
		in, out := &in.EniSubnetIds, &out.EniSubnetIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.EventPersistence != nil {
		in, out := &in.EventPersistence, &out.EventPersistence
		*out = make([]EventPersistenceParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ExistInstance != nil {
		in, out := &in.ExistInstance, &out.ExistInstance
		*out = make([]ExistInstanceParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ExtensionAddon != nil {
		in, out := &in.ExtensionAddon, &out.ExtensionAddon
		*out = make([]ExtensionAddonParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ExtraArgs != nil {
		in, out := &in.ExtraArgs, &out.ExtraArgs
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.GlobeDesiredPodNum != nil {
		in, out := &in.GlobeDesiredPodNum, &out.GlobeDesiredPodNum
		*out = new(float64)
		**out = **in
	}
	if in.IgnoreClusterCidrConflict != nil {
		in, out := &in.IgnoreClusterCidrConflict, &out.IgnoreClusterCidrConflict
		*out = new(bool)
		**out = **in
	}
	if in.IgnoreServiceCidrConflict != nil {
		in, out := &in.IgnoreServiceCidrConflict, &out.IgnoreServiceCidrConflict
		*out = new(bool)
		**out = **in
	}
	if in.InstanceDeleteMode != nil {
		in, out := &in.InstanceDeleteMode, &out.InstanceDeleteMode
		*out = new(string)
		**out = **in
	}
	if in.IsNonStaticIPMode != nil {
		in, out := &in.IsNonStaticIPMode, &out.IsNonStaticIPMode
		*out = new(bool)
		**out = **in
	}
	if in.KubeProxyMode != nil {
		in, out := &in.KubeProxyMode, &out.KubeProxyMode
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.LogAgent != nil {
		in, out := &in.LogAgent, &out.LogAgent
		*out = make([]LogAgentParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ManagedClusterInternetSecurityPolicies != nil {
		in, out := &in.ManagedClusterInternetSecurityPolicies, &out.ManagedClusterInternetSecurityPolicies
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.MasterConfig != nil {
		in, out := &in.MasterConfig, &out.MasterConfig
		*out = make([]ClusterMasterConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MountTarget != nil {
		in, out := &in.MountTarget, &out.MountTarget
		*out = new(string)
		**out = **in
	}
	if in.NetworkType != nil {
		in, out := &in.NetworkType, &out.NetworkType
		*out = new(string)
		**out = **in
	}
	if in.NodeNameType != nil {
		in, out := &in.NodeNameType, &out.NodeNameType
		*out = new(string)
		**out = **in
	}
	if in.NodePoolGlobalConfig != nil {
		in, out := &in.NodePoolGlobalConfig, &out.NodePoolGlobalConfig
		*out = make([]NodePoolGlobalConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PreStartUserScript != nil {
		in, out := &in.PreStartUserScript, &out.PreStartUserScript
		*out = new(string)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(float64)
		**out = **in
	}
	if in.ResourceDeleteOptions != nil {
		in, out := &in.ResourceDeleteOptions, &out.ResourceDeleteOptions
		*out = make([]ResourceDeleteOptionsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RuntimeVersion != nil {
		in, out := &in.RuntimeVersion, &out.RuntimeVersion
		*out = new(string)
		**out = **in
	}
	if in.ServiceCidr != nil {
		in, out := &in.ServiceCidr, &out.ServiceCidr
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Unschedulable != nil {
		in, out := &in.Unschedulable, &out.Unschedulable
		*out = new(float64)
		**out = **in
	}
	if in.UpgradeInstancesFollowCluster != nil {
		in, out := &in.UpgradeInstancesFollowCluster, &out.UpgradeInstancesFollowCluster
		*out = new(bool)
		**out = **in
	}
	if in.VPCCniType != nil {
		in, out := &in.VPCCniType, &out.VPCCniType
		*out = new(string)
		**out = **in
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
	if in.VPCIDRef != nil {
		in, out := &in.VPCIDRef, &out.VPCIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.VPCIDSelector != nil {
		in, out := &in.VPCIDSelector, &out.VPCIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.WorkerConfig != nil {
		in, out := &in.WorkerConfig, &out.WorkerConfig
		*out = make([]WorkerConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterParameters.
func (in *ClusterParameters) DeepCopy() *ClusterParameters {
	if in == nil {
		return nil
	}
	out := new(ClusterParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterSpec) DeepCopyInto(out *ClusterSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterSpec.
func (in *ClusterSpec) DeepCopy() *ClusterSpec {
	if in == nil {
		return nil
	}
	out := new(ClusterSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterStatus) DeepCopyInto(out *ClusterStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterStatus.
func (in *ClusterStatus) DeepCopy() *ClusterStatus {
	if in == nil {
		return nil
	}
	out := new(ClusterStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataDiskInitParameters) DeepCopyInto(out *DataDiskInitParameters) {
	*out = *in
	if in.AutoFormatAndMount != nil {
		in, out := &in.AutoFormatAndMount, &out.AutoFormatAndMount
		*out = new(bool)
		**out = **in
	}
	if in.DiskPartition != nil {
		in, out := &in.DiskPartition, &out.DiskPartition
		*out = new(string)
		**out = **in
	}
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.DiskType != nil {
		in, out := &in.DiskType, &out.DiskType
		*out = new(string)
		**out = **in
	}
	if in.FileSystem != nil {
		in, out := &in.FileSystem, &out.FileSystem
		*out = new(string)
		**out = **in
	}
	if in.MountTarget != nil {
		in, out := &in.MountTarget, &out.MountTarget
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataDiskInitParameters.
func (in *DataDiskInitParameters) DeepCopy() *DataDiskInitParameters {
	if in == nil {
		return nil
	}
	out := new(DataDiskInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataDiskObservation) DeepCopyInto(out *DataDiskObservation) {
	*out = *in
	if in.AutoFormatAndMount != nil {
		in, out := &in.AutoFormatAndMount, &out.AutoFormatAndMount
		*out = new(bool)
		**out = **in
	}
	if in.DiskPartition != nil {
		in, out := &in.DiskPartition, &out.DiskPartition
		*out = new(string)
		**out = **in
	}
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.DiskType != nil {
		in, out := &in.DiskType, &out.DiskType
		*out = new(string)
		**out = **in
	}
	if in.FileSystem != nil {
		in, out := &in.FileSystem, &out.FileSystem
		*out = new(string)
		**out = **in
	}
	if in.MountTarget != nil {
		in, out := &in.MountTarget, &out.MountTarget
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataDiskObservation.
func (in *DataDiskObservation) DeepCopy() *DataDiskObservation {
	if in == nil {
		return nil
	}
	out := new(DataDiskObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataDiskParameters) DeepCopyInto(out *DataDiskParameters) {
	*out = *in
	if in.AutoFormatAndMount != nil {
		in, out := &in.AutoFormatAndMount, &out.AutoFormatAndMount
		*out = new(bool)
		**out = **in
	}
	if in.DiskPartition != nil {
		in, out := &in.DiskPartition, &out.DiskPartition
		*out = new(string)
		**out = **in
	}
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.DiskType != nil {
		in, out := &in.DiskType, &out.DiskType
		*out = new(string)
		**out = **in
	}
	if in.FileSystem != nil {
		in, out := &in.FileSystem, &out.FileSystem
		*out = new(string)
		**out = **in
	}
	if in.MountTarget != nil {
		in, out := &in.MountTarget, &out.MountTarget
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataDiskParameters.
func (in *DataDiskParameters) DeepCopy() *DataDiskParameters {
	if in == nil {
		return nil
	}
	out := new(DataDiskParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EventPersistenceInitParameters) DeepCopyInto(out *EventPersistenceInitParameters) {
	*out = *in
	if in.DeleteEventLogAndTopic != nil {
		in, out := &in.DeleteEventLogAndTopic, &out.DeleteEventLogAndTopic
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.LogSetID != nil {
		in, out := &in.LogSetID, &out.LogSetID
		*out = new(string)
		**out = **in
	}
	if in.TopicID != nil {
		in, out := &in.TopicID, &out.TopicID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EventPersistenceInitParameters.
func (in *EventPersistenceInitParameters) DeepCopy() *EventPersistenceInitParameters {
	if in == nil {
		return nil
	}
	out := new(EventPersistenceInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EventPersistenceObservation) DeepCopyInto(out *EventPersistenceObservation) {
	*out = *in
	if in.DeleteEventLogAndTopic != nil {
		in, out := &in.DeleteEventLogAndTopic, &out.DeleteEventLogAndTopic
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.LogSetID != nil {
		in, out := &in.LogSetID, &out.LogSetID
		*out = new(string)
		**out = **in
	}
	if in.TopicID != nil {
		in, out := &in.TopicID, &out.TopicID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EventPersistenceObservation.
func (in *EventPersistenceObservation) DeepCopy() *EventPersistenceObservation {
	if in == nil {
		return nil
	}
	out := new(EventPersistenceObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EventPersistenceParameters) DeepCopyInto(out *EventPersistenceParameters) {
	*out = *in
	if in.DeleteEventLogAndTopic != nil {
		in, out := &in.DeleteEventLogAndTopic, &out.DeleteEventLogAndTopic
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.LogSetID != nil {
		in, out := &in.LogSetID, &out.LogSetID
		*out = new(string)
		**out = **in
	}
	if in.TopicID != nil {
		in, out := &in.TopicID, &out.TopicID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EventPersistenceParameters.
func (in *EventPersistenceParameters) DeepCopy() *EventPersistenceParameters {
	if in == nil {
		return nil
	}
	out := new(EventPersistenceParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExistInstanceInitParameters) DeepCopyInto(out *ExistInstanceInitParameters) {
	*out = *in
	if in.DesiredPodNumbers != nil {
		in, out := &in.DesiredPodNumbers, &out.DesiredPodNumbers
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.InstancesPara != nil {
		in, out := &in.InstancesPara, &out.InstancesPara
		*out = make([]InstancesParaInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NodeRole != nil {
		in, out := &in.NodeRole, &out.NodeRole
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExistInstanceInitParameters.
func (in *ExistInstanceInitParameters) DeepCopy() *ExistInstanceInitParameters {
	if in == nil {
		return nil
	}
	out := new(ExistInstanceInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExistInstanceObservation) DeepCopyInto(out *ExistInstanceObservation) {
	*out = *in
	if in.DesiredPodNumbers != nil {
		in, out := &in.DesiredPodNumbers, &out.DesiredPodNumbers
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.InstancesPara != nil {
		in, out := &in.InstancesPara, &out.InstancesPara
		*out = make([]InstancesParaObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NodeRole != nil {
		in, out := &in.NodeRole, &out.NodeRole
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExistInstanceObservation.
func (in *ExistInstanceObservation) DeepCopy() *ExistInstanceObservation {
	if in == nil {
		return nil
	}
	out := new(ExistInstanceObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExistInstanceParameters) DeepCopyInto(out *ExistInstanceParameters) {
	*out = *in
	if in.DesiredPodNumbers != nil {
		in, out := &in.DesiredPodNumbers, &out.DesiredPodNumbers
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.InstancesPara != nil {
		in, out := &in.InstancesPara, &out.InstancesPara
		*out = make([]InstancesParaParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NodeRole != nil {
		in, out := &in.NodeRole, &out.NodeRole
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExistInstanceParameters.
func (in *ExistInstanceParameters) DeepCopy() *ExistInstanceParameters {
	if in == nil {
		return nil
	}
	out := new(ExistInstanceParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExtensionAddonInitParameters) DeepCopyInto(out *ExtensionAddonInitParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Param != nil {
		in, out := &in.Param, &out.Param
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExtensionAddonInitParameters.
func (in *ExtensionAddonInitParameters) DeepCopy() *ExtensionAddonInitParameters {
	if in == nil {
		return nil
	}
	out := new(ExtensionAddonInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExtensionAddonObservation) DeepCopyInto(out *ExtensionAddonObservation) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Param != nil {
		in, out := &in.Param, &out.Param
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExtensionAddonObservation.
func (in *ExtensionAddonObservation) DeepCopy() *ExtensionAddonObservation {
	if in == nil {
		return nil
	}
	out := new(ExtensionAddonObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExtensionAddonParameters) DeepCopyInto(out *ExtensionAddonParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Param != nil {
		in, out := &in.Param, &out.Param
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExtensionAddonParameters.
func (in *ExtensionAddonParameters) DeepCopy() *ExtensionAddonParameters {
	if in == nil {
		return nil
	}
	out := new(ExtensionAddonParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExtraArgsInitParameters) DeepCopyInto(out *ExtraArgsInitParameters) {
	*out = *in
	if in.Kubelet != nil {
		in, out := &in.Kubelet, &out.Kubelet
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExtraArgsInitParameters.
func (in *ExtraArgsInitParameters) DeepCopy() *ExtraArgsInitParameters {
	if in == nil {
		return nil
	}
	out := new(ExtraArgsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExtraArgsObservation) DeepCopyInto(out *ExtraArgsObservation) {
	*out = *in
	if in.Kubelet != nil {
		in, out := &in.Kubelet, &out.Kubelet
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExtraArgsObservation.
func (in *ExtraArgsObservation) DeepCopy() *ExtraArgsObservation {
	if in == nil {
		return nil
	}
	out := new(ExtraArgsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExtraArgsParameters) DeepCopyInto(out *ExtraArgsParameters) {
	*out = *in
	if in.Kubelet != nil {
		in, out := &in.Kubelet, &out.Kubelet
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExtraArgsParameters.
func (in *ExtraArgsParameters) DeepCopy() *ExtraArgsParameters {
	if in == nil {
		return nil
	}
	out := new(ExtraArgsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GpuArgsInitParameters) DeepCopyInto(out *GpuArgsInitParameters) {
	*out = *in
	if in.Cuda != nil {
		in, out := &in.Cuda, &out.Cuda
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Cudnn != nil {
		in, out := &in.Cudnn, &out.Cudnn
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.CustomDriver != nil {
		in, out := &in.CustomDriver, &out.CustomDriver
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Driver != nil {
		in, out := &in.Driver, &out.Driver
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MigEnable != nil {
		in, out := &in.MigEnable, &out.MigEnable
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GpuArgsInitParameters.
func (in *GpuArgsInitParameters) DeepCopy() *GpuArgsInitParameters {
	if in == nil {
		return nil
	}
	out := new(GpuArgsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GpuArgsObservation) DeepCopyInto(out *GpuArgsObservation) {
	*out = *in
	if in.Cuda != nil {
		in, out := &in.Cuda, &out.Cuda
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Cudnn != nil {
		in, out := &in.Cudnn, &out.Cudnn
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.CustomDriver != nil {
		in, out := &in.CustomDriver, &out.CustomDriver
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Driver != nil {
		in, out := &in.Driver, &out.Driver
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MigEnable != nil {
		in, out := &in.MigEnable, &out.MigEnable
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GpuArgsObservation.
func (in *GpuArgsObservation) DeepCopy() *GpuArgsObservation {
	if in == nil {
		return nil
	}
	out := new(GpuArgsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GpuArgsParameters) DeepCopyInto(out *GpuArgsParameters) {
	*out = *in
	if in.Cuda != nil {
		in, out := &in.Cuda, &out.Cuda
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Cudnn != nil {
		in, out := &in.Cudnn, &out.Cudnn
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.CustomDriver != nil {
		in, out := &in.CustomDriver, &out.CustomDriver
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Driver != nil {
		in, out := &in.Driver, &out.Driver
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MigEnable != nil {
		in, out := &in.MigEnable, &out.MigEnable
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GpuArgsParameters.
func (in *GpuArgsParameters) DeepCopy() *GpuArgsParameters {
	if in == nil {
		return nil
	}
	out := new(GpuArgsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstancesParaInitParameters) DeepCopyInto(out *InstancesParaInitParameters) {
	*out = *in
	if in.EnhancedMonitorService != nil {
		in, out := &in.EnhancedMonitorService, &out.EnhancedMonitorService
		*out = new(bool)
		**out = **in
	}
	if in.EnhancedSecurityService != nil {
		in, out := &in.EnhancedSecurityService, &out.EnhancedSecurityService
		*out = new(bool)
		**out = **in
	}
	if in.InstanceIds != nil {
		in, out := &in.InstanceIds, &out.InstanceIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.KeyIds != nil {
		in, out := &in.KeyIds, &out.KeyIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.MasterConfig != nil {
		in, out := &in.MasterConfig, &out.MasterConfig
		*out = make([]MasterConfigInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstancesParaInitParameters.
func (in *InstancesParaInitParameters) DeepCopy() *InstancesParaInitParameters {
	if in == nil {
		return nil
	}
	out := new(InstancesParaInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstancesParaObservation) DeepCopyInto(out *InstancesParaObservation) {
	*out = *in
	if in.EnhancedMonitorService != nil {
		in, out := &in.EnhancedMonitorService, &out.EnhancedMonitorService
		*out = new(bool)
		**out = **in
	}
	if in.EnhancedSecurityService != nil {
		in, out := &in.EnhancedSecurityService, &out.EnhancedSecurityService
		*out = new(bool)
		**out = **in
	}
	if in.InstanceIds != nil {
		in, out := &in.InstanceIds, &out.InstanceIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.KeyIds != nil {
		in, out := &in.KeyIds, &out.KeyIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.MasterConfig != nil {
		in, out := &in.MasterConfig, &out.MasterConfig
		*out = make([]MasterConfigObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstancesParaObservation.
func (in *InstancesParaObservation) DeepCopy() *InstancesParaObservation {
	if in == nil {
		return nil
	}
	out := new(InstancesParaObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstancesParaParameters) DeepCopyInto(out *InstancesParaParameters) {
	*out = *in
	if in.EnhancedMonitorService != nil {
		in, out := &in.EnhancedMonitorService, &out.EnhancedMonitorService
		*out = new(bool)
		**out = **in
	}
	if in.EnhancedSecurityService != nil {
		in, out := &in.EnhancedSecurityService, &out.EnhancedSecurityService
		*out = new(bool)
		**out = **in
	}
	if in.InstanceIds != nil {
		in, out := &in.InstanceIds, &out.InstanceIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.KeyIds != nil {
		in, out := &in.KeyIds, &out.KeyIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.MasterConfig != nil {
		in, out := &in.MasterConfig, &out.MasterConfig
		*out = make([]MasterConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstancesParaParameters.
func (in *InstancesParaParameters) DeepCopy() *InstancesParaParameters {
	if in == nil {
		return nil
	}
	out := new(InstancesParaParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LabelsInitParameters) DeepCopyInto(out *LabelsInitParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LabelsInitParameters.
func (in *LabelsInitParameters) DeepCopy() *LabelsInitParameters {
	if in == nil {
		return nil
	}
	out := new(LabelsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LabelsObservation) DeepCopyInto(out *LabelsObservation) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LabelsObservation.
func (in *LabelsObservation) DeepCopy() *LabelsObservation {
	if in == nil {
		return nil
	}
	out := new(LabelsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LabelsParameters) DeepCopyInto(out *LabelsParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LabelsParameters.
func (in *LabelsParameters) DeepCopy() *LabelsParameters {
	if in == nil {
		return nil
	}
	out := new(LabelsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LogAgentInitParameters) DeepCopyInto(out *LogAgentInitParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.KubeletRootDir != nil {
		in, out := &in.KubeletRootDir, &out.KubeletRootDir
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LogAgentInitParameters.
func (in *LogAgentInitParameters) DeepCopy() *LogAgentInitParameters {
	if in == nil {
		return nil
	}
	out := new(LogAgentInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LogAgentObservation) DeepCopyInto(out *LogAgentObservation) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.KubeletRootDir != nil {
		in, out := &in.KubeletRootDir, &out.KubeletRootDir
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LogAgentObservation.
func (in *LogAgentObservation) DeepCopy() *LogAgentObservation {
	if in == nil {
		return nil
	}
	out := new(LogAgentObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LogAgentParameters) DeepCopyInto(out *LogAgentParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.KubeletRootDir != nil {
		in, out := &in.KubeletRootDir, &out.KubeletRootDir
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LogAgentParameters.
func (in *LogAgentParameters) DeepCopy() *LogAgentParameters {
	if in == nil {
		return nil
	}
	out := new(LogAgentParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MasterConfigDataDiskInitParameters) DeepCopyInto(out *MasterConfigDataDiskInitParameters) {
	*out = *in
	if in.AutoFormatAndMount != nil {
		in, out := &in.AutoFormatAndMount, &out.AutoFormatAndMount
		*out = new(bool)
		**out = **in
	}
	if in.DiskPartition != nil {
		in, out := &in.DiskPartition, &out.DiskPartition
		*out = new(string)
		**out = **in
	}
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.DiskType != nil {
		in, out := &in.DiskType, &out.DiskType
		*out = new(string)
		**out = **in
	}
	if in.Encrypt != nil {
		in, out := &in.Encrypt, &out.Encrypt
		*out = new(bool)
		**out = **in
	}
	if in.FileSystem != nil {
		in, out := &in.FileSystem, &out.FileSystem
		*out = new(string)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.MountTarget != nil {
		in, out := &in.MountTarget, &out.MountTarget
		*out = new(string)
		**out = **in
	}
	if in.SnapshotID != nil {
		in, out := &in.SnapshotID, &out.SnapshotID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MasterConfigDataDiskInitParameters.
func (in *MasterConfigDataDiskInitParameters) DeepCopy() *MasterConfigDataDiskInitParameters {
	if in == nil {
		return nil
	}
	out := new(MasterConfigDataDiskInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MasterConfigDataDiskObservation) DeepCopyInto(out *MasterConfigDataDiskObservation) {
	*out = *in
	if in.AutoFormatAndMount != nil {
		in, out := &in.AutoFormatAndMount, &out.AutoFormatAndMount
		*out = new(bool)
		**out = **in
	}
	if in.DiskPartition != nil {
		in, out := &in.DiskPartition, &out.DiskPartition
		*out = new(string)
		**out = **in
	}
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.DiskType != nil {
		in, out := &in.DiskType, &out.DiskType
		*out = new(string)
		**out = **in
	}
	if in.Encrypt != nil {
		in, out := &in.Encrypt, &out.Encrypt
		*out = new(bool)
		**out = **in
	}
	if in.FileSystem != nil {
		in, out := &in.FileSystem, &out.FileSystem
		*out = new(string)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.MountTarget != nil {
		in, out := &in.MountTarget, &out.MountTarget
		*out = new(string)
		**out = **in
	}
	if in.SnapshotID != nil {
		in, out := &in.SnapshotID, &out.SnapshotID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MasterConfigDataDiskObservation.
func (in *MasterConfigDataDiskObservation) DeepCopy() *MasterConfigDataDiskObservation {
	if in == nil {
		return nil
	}
	out := new(MasterConfigDataDiskObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MasterConfigDataDiskParameters) DeepCopyInto(out *MasterConfigDataDiskParameters) {
	*out = *in
	if in.AutoFormatAndMount != nil {
		in, out := &in.AutoFormatAndMount, &out.AutoFormatAndMount
		*out = new(bool)
		**out = **in
	}
	if in.DiskPartition != nil {
		in, out := &in.DiskPartition, &out.DiskPartition
		*out = new(string)
		**out = **in
	}
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.DiskType != nil {
		in, out := &in.DiskType, &out.DiskType
		*out = new(string)
		**out = **in
	}
	if in.Encrypt != nil {
		in, out := &in.Encrypt, &out.Encrypt
		*out = new(bool)
		**out = **in
	}
	if in.FileSystem != nil {
		in, out := &in.FileSystem, &out.FileSystem
		*out = new(string)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.MountTarget != nil {
		in, out := &in.MountTarget, &out.MountTarget
		*out = new(string)
		**out = **in
	}
	if in.SnapshotID != nil {
		in, out := &in.SnapshotID, &out.SnapshotID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MasterConfigDataDiskParameters.
func (in *MasterConfigDataDiskParameters) DeepCopy() *MasterConfigDataDiskParameters {
	if in == nil {
		return nil
	}
	out := new(MasterConfigDataDiskParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MasterConfigInitParameters) DeepCopyInto(out *MasterConfigInitParameters) {
	*out = *in
	if in.DataDisk != nil {
		in, out := &in.DataDisk, &out.DataDisk
		*out = make([]DataDiskInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DesiredPodNumber != nil {
		in, out := &in.DesiredPodNumber, &out.DesiredPodNumber
		*out = new(float64)
		**out = **in
	}
	if in.DockerGraphPath != nil {
		in, out := &in.DockerGraphPath, &out.DockerGraphPath
		*out = new(string)
		**out = **in
	}
	if in.ExtraArgs != nil {
		in, out := &in.ExtraArgs, &out.ExtraArgs
		*out = make([]ExtraArgsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.GpuArgs != nil {
		in, out := &in.GpuArgs, &out.GpuArgs
		*out = make([]GpuArgsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make([]LabelsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MountTarget != nil {
		in, out := &in.MountTarget, &out.MountTarget
		*out = new(string)
		**out = **in
	}
	if in.Taints != nil {
		in, out := &in.Taints, &out.Taints
		*out = make([]TaintsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Unschedulable != nil {
		in, out := &in.Unschedulable, &out.Unschedulable
		*out = new(float64)
		**out = **in
	}
	if in.UserScript != nil {
		in, out := &in.UserScript, &out.UserScript
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MasterConfigInitParameters.
func (in *MasterConfigInitParameters) DeepCopy() *MasterConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(MasterConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MasterConfigObservation) DeepCopyInto(out *MasterConfigObservation) {
	*out = *in
	if in.DataDisk != nil {
		in, out := &in.DataDisk, &out.DataDisk
		*out = make([]DataDiskObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DesiredPodNumber != nil {
		in, out := &in.DesiredPodNumber, &out.DesiredPodNumber
		*out = new(float64)
		**out = **in
	}
	if in.DockerGraphPath != nil {
		in, out := &in.DockerGraphPath, &out.DockerGraphPath
		*out = new(string)
		**out = **in
	}
	if in.ExtraArgs != nil {
		in, out := &in.ExtraArgs, &out.ExtraArgs
		*out = make([]ExtraArgsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.GpuArgs != nil {
		in, out := &in.GpuArgs, &out.GpuArgs
		*out = make([]GpuArgsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make([]LabelsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MountTarget != nil {
		in, out := &in.MountTarget, &out.MountTarget
		*out = new(string)
		**out = **in
	}
	if in.Taints != nil {
		in, out := &in.Taints, &out.Taints
		*out = make([]TaintsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Unschedulable != nil {
		in, out := &in.Unschedulable, &out.Unschedulable
		*out = new(float64)
		**out = **in
	}
	if in.UserScript != nil {
		in, out := &in.UserScript, &out.UserScript
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MasterConfigObservation.
func (in *MasterConfigObservation) DeepCopy() *MasterConfigObservation {
	if in == nil {
		return nil
	}
	out := new(MasterConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MasterConfigParameters) DeepCopyInto(out *MasterConfigParameters) {
	*out = *in
	if in.DataDisk != nil {
		in, out := &in.DataDisk, &out.DataDisk
		*out = make([]DataDiskParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DesiredPodNumber != nil {
		in, out := &in.DesiredPodNumber, &out.DesiredPodNumber
		*out = new(float64)
		**out = **in
	}
	if in.DockerGraphPath != nil {
		in, out := &in.DockerGraphPath, &out.DockerGraphPath
		*out = new(string)
		**out = **in
	}
	if in.ExtraArgs != nil {
		in, out := &in.ExtraArgs, &out.ExtraArgs
		*out = make([]ExtraArgsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.GpuArgs != nil {
		in, out := &in.GpuArgs, &out.GpuArgs
		*out = make([]GpuArgsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make([]LabelsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MountTarget != nil {
		in, out := &in.MountTarget, &out.MountTarget
		*out = new(string)
		**out = **in
	}
	if in.Taints != nil {
		in, out := &in.Taints, &out.Taints
		*out = make([]TaintsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Unschedulable != nil {
		in, out := &in.Unschedulable, &out.Unschedulable
		*out = new(float64)
		**out = **in
	}
	if in.UserScript != nil {
		in, out := &in.UserScript, &out.UserScript
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MasterConfigParameters.
func (in *MasterConfigParameters) DeepCopy() *MasterConfigParameters {
	if in == nil {
		return nil
	}
	out := new(MasterConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeConfigDataDiskInitParameters) DeepCopyInto(out *NodeConfigDataDiskInitParameters) {
	*out = *in
	if in.AutoFormatAndMount != nil {
		in, out := &in.AutoFormatAndMount, &out.AutoFormatAndMount
		*out = new(bool)
		**out = **in
	}
	if in.DiskPartition != nil {
		in, out := &in.DiskPartition, &out.DiskPartition
		*out = new(string)
		**out = **in
	}
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.DiskType != nil {
		in, out := &in.DiskType, &out.DiskType
		*out = new(string)
		**out = **in
	}
	if in.FileSystem != nil {
		in, out := &in.FileSystem, &out.FileSystem
		*out = new(string)
		**out = **in
	}
	if in.MountTarget != nil {
		in, out := &in.MountTarget, &out.MountTarget
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeConfigDataDiskInitParameters.
func (in *NodeConfigDataDiskInitParameters) DeepCopy() *NodeConfigDataDiskInitParameters {
	if in == nil {
		return nil
	}
	out := new(NodeConfigDataDiskInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeConfigDataDiskObservation) DeepCopyInto(out *NodeConfigDataDiskObservation) {
	*out = *in
	if in.AutoFormatAndMount != nil {
		in, out := &in.AutoFormatAndMount, &out.AutoFormatAndMount
		*out = new(bool)
		**out = **in
	}
	if in.DiskPartition != nil {
		in, out := &in.DiskPartition, &out.DiskPartition
		*out = new(string)
		**out = **in
	}
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.DiskType != nil {
		in, out := &in.DiskType, &out.DiskType
		*out = new(string)
		**out = **in
	}
	if in.FileSystem != nil {
		in, out := &in.FileSystem, &out.FileSystem
		*out = new(string)
		**out = **in
	}
	if in.MountTarget != nil {
		in, out := &in.MountTarget, &out.MountTarget
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeConfigDataDiskObservation.
func (in *NodeConfigDataDiskObservation) DeepCopy() *NodeConfigDataDiskObservation {
	if in == nil {
		return nil
	}
	out := new(NodeConfigDataDiskObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeConfigDataDiskParameters) DeepCopyInto(out *NodeConfigDataDiskParameters) {
	*out = *in
	if in.AutoFormatAndMount != nil {
		in, out := &in.AutoFormatAndMount, &out.AutoFormatAndMount
		*out = new(bool)
		**out = **in
	}
	if in.DiskPartition != nil {
		in, out := &in.DiskPartition, &out.DiskPartition
		*out = new(string)
		**out = **in
	}
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.DiskType != nil {
		in, out := &in.DiskType, &out.DiskType
		*out = new(string)
		**out = **in
	}
	if in.FileSystem != nil {
		in, out := &in.FileSystem, &out.FileSystem
		*out = new(string)
		**out = **in
	}
	if in.MountTarget != nil {
		in, out := &in.MountTarget, &out.MountTarget
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeConfigDataDiskParameters.
func (in *NodeConfigDataDiskParameters) DeepCopy() *NodeConfigDataDiskParameters {
	if in == nil {
		return nil
	}
	out := new(NodeConfigDataDiskParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeConfigGpuArgsInitParameters) DeepCopyInto(out *NodeConfigGpuArgsInitParameters) {
	*out = *in
	if in.Cuda != nil {
		in, out := &in.Cuda, &out.Cuda
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Cudnn != nil {
		in, out := &in.Cudnn, &out.Cudnn
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.CustomDriver != nil {
		in, out := &in.CustomDriver, &out.CustomDriver
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Driver != nil {
		in, out := &in.Driver, &out.Driver
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MigEnable != nil {
		in, out := &in.MigEnable, &out.MigEnable
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeConfigGpuArgsInitParameters.
func (in *NodeConfigGpuArgsInitParameters) DeepCopy() *NodeConfigGpuArgsInitParameters {
	if in == nil {
		return nil
	}
	out := new(NodeConfigGpuArgsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeConfigGpuArgsObservation) DeepCopyInto(out *NodeConfigGpuArgsObservation) {
	*out = *in
	if in.Cuda != nil {
		in, out := &in.Cuda, &out.Cuda
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Cudnn != nil {
		in, out := &in.Cudnn, &out.Cudnn
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.CustomDriver != nil {
		in, out := &in.CustomDriver, &out.CustomDriver
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Driver != nil {
		in, out := &in.Driver, &out.Driver
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MigEnable != nil {
		in, out := &in.MigEnable, &out.MigEnable
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeConfigGpuArgsObservation.
func (in *NodeConfigGpuArgsObservation) DeepCopy() *NodeConfigGpuArgsObservation {
	if in == nil {
		return nil
	}
	out := new(NodeConfigGpuArgsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeConfigGpuArgsParameters) DeepCopyInto(out *NodeConfigGpuArgsParameters) {
	*out = *in
	if in.Cuda != nil {
		in, out := &in.Cuda, &out.Cuda
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Cudnn != nil {
		in, out := &in.Cudnn, &out.Cudnn
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.CustomDriver != nil {
		in, out := &in.CustomDriver, &out.CustomDriver
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Driver != nil {
		in, out := &in.Driver, &out.Driver
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MigEnable != nil {
		in, out := &in.MigEnable, &out.MigEnable
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeConfigGpuArgsParameters.
func (in *NodeConfigGpuArgsParameters) DeepCopy() *NodeConfigGpuArgsParameters {
	if in == nil {
		return nil
	}
	out := new(NodeConfigGpuArgsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeConfigInitParameters) DeepCopyInto(out *NodeConfigInitParameters) {
	*out = *in
	if in.DataDisk != nil {
		in, out := &in.DataDisk, &out.DataDisk
		*out = make([]NodeConfigDataDiskInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DesiredPodNum != nil {
		in, out := &in.DesiredPodNum, &out.DesiredPodNum
		*out = new(float64)
		**out = **in
	}
	if in.DockerGraphPath != nil {
		in, out := &in.DockerGraphPath, &out.DockerGraphPath
		*out = new(string)
		**out = **in
	}
	if in.ExtraArgs != nil {
		in, out := &in.ExtraArgs, &out.ExtraArgs
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.GpuArgs != nil {
		in, out := &in.GpuArgs, &out.GpuArgs
		*out = make([]NodeConfigGpuArgsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.IsSchedule != nil {
		in, out := &in.IsSchedule, &out.IsSchedule
		*out = new(bool)
		**out = **in
	}
	if in.MountTarget != nil {
		in, out := &in.MountTarget, &out.MountTarget
		*out = new(string)
		**out = **in
	}
	if in.PreStartUserScript != nil {
		in, out := &in.PreStartUserScript, &out.PreStartUserScript
		*out = new(string)
		**out = **in
	}
	if in.UserData != nil {
		in, out := &in.UserData, &out.UserData
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeConfigInitParameters.
func (in *NodeConfigInitParameters) DeepCopy() *NodeConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(NodeConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeConfigObservation) DeepCopyInto(out *NodeConfigObservation) {
	*out = *in
	if in.DataDisk != nil {
		in, out := &in.DataDisk, &out.DataDisk
		*out = make([]NodeConfigDataDiskObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DesiredPodNum != nil {
		in, out := &in.DesiredPodNum, &out.DesiredPodNum
		*out = new(float64)
		**out = **in
	}
	if in.DockerGraphPath != nil {
		in, out := &in.DockerGraphPath, &out.DockerGraphPath
		*out = new(string)
		**out = **in
	}
	if in.ExtraArgs != nil {
		in, out := &in.ExtraArgs, &out.ExtraArgs
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.GpuArgs != nil {
		in, out := &in.GpuArgs, &out.GpuArgs
		*out = make([]NodeConfigGpuArgsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.IsSchedule != nil {
		in, out := &in.IsSchedule, &out.IsSchedule
		*out = new(bool)
		**out = **in
	}
	if in.MountTarget != nil {
		in, out := &in.MountTarget, &out.MountTarget
		*out = new(string)
		**out = **in
	}
	if in.PreStartUserScript != nil {
		in, out := &in.PreStartUserScript, &out.PreStartUserScript
		*out = new(string)
		**out = **in
	}
	if in.UserData != nil {
		in, out := &in.UserData, &out.UserData
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeConfigObservation.
func (in *NodeConfigObservation) DeepCopy() *NodeConfigObservation {
	if in == nil {
		return nil
	}
	out := new(NodeConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeConfigParameters) DeepCopyInto(out *NodeConfigParameters) {
	*out = *in
	if in.DataDisk != nil {
		in, out := &in.DataDisk, &out.DataDisk
		*out = make([]NodeConfigDataDiskParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DesiredPodNum != nil {
		in, out := &in.DesiredPodNum, &out.DesiredPodNum
		*out = new(float64)
		**out = **in
	}
	if in.DockerGraphPath != nil {
		in, out := &in.DockerGraphPath, &out.DockerGraphPath
		*out = new(string)
		**out = **in
	}
	if in.ExtraArgs != nil {
		in, out := &in.ExtraArgs, &out.ExtraArgs
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.GpuArgs != nil {
		in, out := &in.GpuArgs, &out.GpuArgs
		*out = make([]NodeConfigGpuArgsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.IsSchedule != nil {
		in, out := &in.IsSchedule, &out.IsSchedule
		*out = new(bool)
		**out = **in
	}
	if in.MountTarget != nil {
		in, out := &in.MountTarget, &out.MountTarget
		*out = new(string)
		**out = **in
	}
	if in.PreStartUserScript != nil {
		in, out := &in.PreStartUserScript, &out.PreStartUserScript
		*out = new(string)
		**out = **in
	}
	if in.UserData != nil {
		in, out := &in.UserData, &out.UserData
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeConfigParameters.
func (in *NodeConfigParameters) DeepCopy() *NodeConfigParameters {
	if in == nil {
		return nil
	}
	out := new(NodeConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodePool) DeepCopyInto(out *NodePool) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodePool.
func (in *NodePool) DeepCopy() *NodePool {
	if in == nil {
		return nil
	}
	out := new(NodePool)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *NodePool) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodePoolGlobalConfigInitParameters) DeepCopyInto(out *NodePoolGlobalConfigInitParameters) {
	*out = *in
	if in.Expander != nil {
		in, out := &in.Expander, &out.Expander
		*out = new(string)
		**out = **in
	}
	if in.IgnoreDaemonSetsUtilization != nil {
		in, out := &in.IgnoreDaemonSetsUtilization, &out.IgnoreDaemonSetsUtilization
		*out = new(bool)
		**out = **in
	}
	if in.IsScaleInEnabled != nil {
		in, out := &in.IsScaleInEnabled, &out.IsScaleInEnabled
		*out = new(bool)
		**out = **in
	}
	if in.MaxConcurrentScaleIn != nil {
		in, out := &in.MaxConcurrentScaleIn, &out.MaxConcurrentScaleIn
		*out = new(float64)
		**out = **in
	}
	if in.ScaleInDelay != nil {
		in, out := &in.ScaleInDelay, &out.ScaleInDelay
		*out = new(float64)
		**out = **in
	}
	if in.ScaleInUnneededTime != nil {
		in, out := &in.ScaleInUnneededTime, &out.ScaleInUnneededTime
		*out = new(float64)
		**out = **in
	}
	if in.ScaleInUtilizationThreshold != nil {
		in, out := &in.ScaleInUtilizationThreshold, &out.ScaleInUtilizationThreshold
		*out = new(float64)
		**out = **in
	}
	if in.SkipNodesWithLocalStorage != nil {
		in, out := &in.SkipNodesWithLocalStorage, &out.SkipNodesWithLocalStorage
		*out = new(bool)
		**out = **in
	}
	if in.SkipNodesWithSystemPods != nil {
		in, out := &in.SkipNodesWithSystemPods, &out.SkipNodesWithSystemPods
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodePoolGlobalConfigInitParameters.
func (in *NodePoolGlobalConfigInitParameters) DeepCopy() *NodePoolGlobalConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(NodePoolGlobalConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodePoolGlobalConfigObservation) DeepCopyInto(out *NodePoolGlobalConfigObservation) {
	*out = *in
	if in.Expander != nil {
		in, out := &in.Expander, &out.Expander
		*out = new(string)
		**out = **in
	}
	if in.IgnoreDaemonSetsUtilization != nil {
		in, out := &in.IgnoreDaemonSetsUtilization, &out.IgnoreDaemonSetsUtilization
		*out = new(bool)
		**out = **in
	}
	if in.IsScaleInEnabled != nil {
		in, out := &in.IsScaleInEnabled, &out.IsScaleInEnabled
		*out = new(bool)
		**out = **in
	}
	if in.MaxConcurrentScaleIn != nil {
		in, out := &in.MaxConcurrentScaleIn, &out.MaxConcurrentScaleIn
		*out = new(float64)
		**out = **in
	}
	if in.ScaleInDelay != nil {
		in, out := &in.ScaleInDelay, &out.ScaleInDelay
		*out = new(float64)
		**out = **in
	}
	if in.ScaleInUnneededTime != nil {
		in, out := &in.ScaleInUnneededTime, &out.ScaleInUnneededTime
		*out = new(float64)
		**out = **in
	}
	if in.ScaleInUtilizationThreshold != nil {
		in, out := &in.ScaleInUtilizationThreshold, &out.ScaleInUtilizationThreshold
		*out = new(float64)
		**out = **in
	}
	if in.SkipNodesWithLocalStorage != nil {
		in, out := &in.SkipNodesWithLocalStorage, &out.SkipNodesWithLocalStorage
		*out = new(bool)
		**out = **in
	}
	if in.SkipNodesWithSystemPods != nil {
		in, out := &in.SkipNodesWithSystemPods, &out.SkipNodesWithSystemPods
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodePoolGlobalConfigObservation.
func (in *NodePoolGlobalConfigObservation) DeepCopy() *NodePoolGlobalConfigObservation {
	if in == nil {
		return nil
	}
	out := new(NodePoolGlobalConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodePoolGlobalConfigParameters) DeepCopyInto(out *NodePoolGlobalConfigParameters) {
	*out = *in
	if in.Expander != nil {
		in, out := &in.Expander, &out.Expander
		*out = new(string)
		**out = **in
	}
	if in.IgnoreDaemonSetsUtilization != nil {
		in, out := &in.IgnoreDaemonSetsUtilization, &out.IgnoreDaemonSetsUtilization
		*out = new(bool)
		**out = **in
	}
	if in.IsScaleInEnabled != nil {
		in, out := &in.IsScaleInEnabled, &out.IsScaleInEnabled
		*out = new(bool)
		**out = **in
	}
	if in.MaxConcurrentScaleIn != nil {
		in, out := &in.MaxConcurrentScaleIn, &out.MaxConcurrentScaleIn
		*out = new(float64)
		**out = **in
	}
	if in.ScaleInDelay != nil {
		in, out := &in.ScaleInDelay, &out.ScaleInDelay
		*out = new(float64)
		**out = **in
	}
	if in.ScaleInUnneededTime != nil {
		in, out := &in.ScaleInUnneededTime, &out.ScaleInUnneededTime
		*out = new(float64)
		**out = **in
	}
	if in.ScaleInUtilizationThreshold != nil {
		in, out := &in.ScaleInUtilizationThreshold, &out.ScaleInUtilizationThreshold
		*out = new(float64)
		**out = **in
	}
	if in.SkipNodesWithLocalStorage != nil {
		in, out := &in.SkipNodesWithLocalStorage, &out.SkipNodesWithLocalStorage
		*out = new(bool)
		**out = **in
	}
	if in.SkipNodesWithSystemPods != nil {
		in, out := &in.SkipNodesWithSystemPods, &out.SkipNodesWithSystemPods
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodePoolGlobalConfigParameters.
func (in *NodePoolGlobalConfigParameters) DeepCopy() *NodePoolGlobalConfigParameters {
	if in == nil {
		return nil
	}
	out := new(NodePoolGlobalConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodePoolInitParameters) DeepCopyInto(out *NodePoolInitParameters) {
	*out = *in
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make([]AnnotationsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AutoScalingConfig != nil {
		in, out := &in.AutoScalingConfig, &out.AutoScalingConfig
		*out = make([]AutoScalingConfigInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AutoUpdateInstanceTags != nil {
		in, out := &in.AutoUpdateInstanceTags, &out.AutoUpdateInstanceTags
		*out = new(bool)
		**out = **in
	}
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.DefaultCooldown != nil {
		in, out := &in.DefaultCooldown, &out.DefaultCooldown
		*out = new(float64)
		**out = **in
	}
	if in.DeleteKeepInstance != nil {
		in, out := &in.DeleteKeepInstance, &out.DeleteKeepInstance
		*out = new(bool)
		**out = **in
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.DesiredCapacity != nil {
		in, out := &in.DesiredCapacity, &out.DesiredCapacity
		*out = new(float64)
		**out = **in
	}
	if in.EnableAutoScale != nil {
		in, out := &in.EnableAutoScale, &out.EnableAutoScale
		*out = new(bool)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MaxSize != nil {
		in, out := &in.MaxSize, &out.MaxSize
		*out = new(float64)
		**out = **in
	}
	if in.MinSize != nil {
		in, out := &in.MinSize, &out.MinSize
		*out = new(float64)
		**out = **in
	}
	if in.MultiZoneSubnetPolicy != nil {
		in, out := &in.MultiZoneSubnetPolicy, &out.MultiZoneSubnetPolicy
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NodeConfig != nil {
		in, out := &in.NodeConfig, &out.NodeConfig
		*out = make([]NodeConfigInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NodeOs != nil {
		in, out := &in.NodeOs, &out.NodeOs
		*out = new(string)
		**out = **in
	}
	if in.NodeOsType != nil {
		in, out := &in.NodeOsType, &out.NodeOsType
		*out = new(string)
		**out = **in
	}
	if in.RetryPolicy != nil {
		in, out := &in.RetryPolicy, &out.RetryPolicy
		*out = new(string)
		**out = **in
	}
	if in.ScaleTolerance != nil {
		in, out := &in.ScaleTolerance, &out.ScaleTolerance
		*out = new(float64)
		**out = **in
	}
	if in.ScalingGroupName != nil {
		in, out := &in.ScalingGroupName, &out.ScalingGroupName
		*out = new(string)
		**out = **in
	}
	if in.ScalingGroupProjectID != nil {
		in, out := &in.ScalingGroupProjectID, &out.ScalingGroupProjectID
		*out = new(float64)
		**out = **in
	}
	if in.ScalingMode != nil {
		in, out := &in.ScalingMode, &out.ScalingMode
		*out = new(string)
		**out = **in
	}
	if in.SubnetIds != nil {
		in, out := &in.SubnetIds, &out.SubnetIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Taints != nil {
		in, out := &in.Taints, &out.Taints
		*out = make([]NodePoolTaintsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.TerminationPolicies != nil {
		in, out := &in.TerminationPolicies, &out.TerminationPolicies
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Unschedulable != nil {
		in, out := &in.Unschedulable, &out.Unschedulable
		*out = new(float64)
		**out = **in
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
	if in.VPCIDRef != nil {
		in, out := &in.VPCIDRef, &out.VPCIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.VPCIDSelector != nil {
		in, out := &in.VPCIDSelector, &out.VPCIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.WaitNodeReady != nil {
		in, out := &in.WaitNodeReady, &out.WaitNodeReady
		*out = new(bool)
		**out = **in
	}
	if in.Zones != nil {
		in, out := &in.Zones, &out.Zones
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodePoolInitParameters.
func (in *NodePoolInitParameters) DeepCopy() *NodePoolInitParameters {
	if in == nil {
		return nil
	}
	out := new(NodePoolInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodePoolList) DeepCopyInto(out *NodePoolList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]NodePool, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodePoolList.
func (in *NodePoolList) DeepCopy() *NodePoolList {
	if in == nil {
		return nil
	}
	out := new(NodePoolList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *NodePoolList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodePoolObservation) DeepCopyInto(out *NodePoolObservation) {
	*out = *in
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make([]AnnotationsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AutoScalingConfig != nil {
		in, out := &in.AutoScalingConfig, &out.AutoScalingConfig
		*out = make([]AutoScalingConfigObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AutoScalingGroupID != nil {
		in, out := &in.AutoScalingGroupID, &out.AutoScalingGroupID
		*out = new(string)
		**out = **in
	}
	if in.AutoUpdateInstanceTags != nil {
		in, out := &in.AutoUpdateInstanceTags, &out.AutoUpdateInstanceTags
		*out = new(bool)
		**out = **in
	}
	if in.AutoscalingAddedTotal != nil {
		in, out := &in.AutoscalingAddedTotal, &out.AutoscalingAddedTotal
		*out = new(float64)
		**out = **in
	}
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.DefaultCooldown != nil {
		in, out := &in.DefaultCooldown, &out.DefaultCooldown
		*out = new(float64)
		**out = **in
	}
	if in.DeleteKeepInstance != nil {
		in, out := &in.DeleteKeepInstance, &out.DeleteKeepInstance
		*out = new(bool)
		**out = **in
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.DesiredCapacity != nil {
		in, out := &in.DesiredCapacity, &out.DesiredCapacity
		*out = new(float64)
		**out = **in
	}
	if in.EnableAutoScale != nil {
		in, out := &in.EnableAutoScale, &out.EnableAutoScale
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.LaunchConfigID != nil {
		in, out := &in.LaunchConfigID, &out.LaunchConfigID
		*out = new(string)
		**out = **in
	}
	if in.ManuallyAddedTotal != nil {
		in, out := &in.ManuallyAddedTotal, &out.ManuallyAddedTotal
		*out = new(float64)
		**out = **in
	}
	if in.MaxSize != nil {
		in, out := &in.MaxSize, &out.MaxSize
		*out = new(float64)
		**out = **in
	}
	if in.MinSize != nil {
		in, out := &in.MinSize, &out.MinSize
		*out = new(float64)
		**out = **in
	}
	if in.MultiZoneSubnetPolicy != nil {
		in, out := &in.MultiZoneSubnetPolicy, &out.MultiZoneSubnetPolicy
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NodeConfig != nil {
		in, out := &in.NodeConfig, &out.NodeConfig
		*out = make([]NodeConfigObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NodeCount != nil {
		in, out := &in.NodeCount, &out.NodeCount
		*out = new(float64)
		**out = **in
	}
	if in.NodeOs != nil {
		in, out := &in.NodeOs, &out.NodeOs
		*out = new(string)
		**out = **in
	}
	if in.NodeOsType != nil {
		in, out := &in.NodeOsType, &out.NodeOsType
		*out = new(string)
		**out = **in
	}
	if in.RetryPolicy != nil {
		in, out := &in.RetryPolicy, &out.RetryPolicy
		*out = new(string)
		**out = **in
	}
	if in.ScaleTolerance != nil {
		in, out := &in.ScaleTolerance, &out.ScaleTolerance
		*out = new(float64)
		**out = **in
	}
	if in.ScalingGroupName != nil {
		in, out := &in.ScalingGroupName, &out.ScalingGroupName
		*out = new(string)
		**out = **in
	}
	if in.ScalingGroupProjectID != nil {
		in, out := &in.ScalingGroupProjectID, &out.ScalingGroupProjectID
		*out = new(float64)
		**out = **in
	}
	if in.ScalingMode != nil {
		in, out := &in.ScalingMode, &out.ScalingMode
		*out = new(string)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
	if in.SubnetIds != nil {
		in, out := &in.SubnetIds, &out.SubnetIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Taints != nil {
		in, out := &in.Taints, &out.Taints
		*out = make([]NodePoolTaintsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.TerminationPolicies != nil {
		in, out := &in.TerminationPolicies, &out.TerminationPolicies
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Unschedulable != nil {
		in, out := &in.Unschedulable, &out.Unschedulable
		*out = new(float64)
		**out = **in
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
	if in.WaitNodeReady != nil {
		in, out := &in.WaitNodeReady, &out.WaitNodeReady
		*out = new(bool)
		**out = **in
	}
	if in.Zones != nil {
		in, out := &in.Zones, &out.Zones
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodePoolObservation.
func (in *NodePoolObservation) DeepCopy() *NodePoolObservation {
	if in == nil {
		return nil
	}
	out := new(NodePoolObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodePoolParameters) DeepCopyInto(out *NodePoolParameters) {
	*out = *in
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make([]AnnotationsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AutoScalingConfig != nil {
		in, out := &in.AutoScalingConfig, &out.AutoScalingConfig
		*out = make([]AutoScalingConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AutoUpdateInstanceTags != nil {
		in, out := &in.AutoUpdateInstanceTags, &out.AutoUpdateInstanceTags
		*out = new(bool)
		**out = **in
	}
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.DefaultCooldown != nil {
		in, out := &in.DefaultCooldown, &out.DefaultCooldown
		*out = new(float64)
		**out = **in
	}
	if in.DeleteKeepInstance != nil {
		in, out := &in.DeleteKeepInstance, &out.DeleteKeepInstance
		*out = new(bool)
		**out = **in
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.DesiredCapacity != nil {
		in, out := &in.DesiredCapacity, &out.DesiredCapacity
		*out = new(float64)
		**out = **in
	}
	if in.EnableAutoScale != nil {
		in, out := &in.EnableAutoScale, &out.EnableAutoScale
		*out = new(bool)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MaxSize != nil {
		in, out := &in.MaxSize, &out.MaxSize
		*out = new(float64)
		**out = **in
	}
	if in.MinSize != nil {
		in, out := &in.MinSize, &out.MinSize
		*out = new(float64)
		**out = **in
	}
	if in.MultiZoneSubnetPolicy != nil {
		in, out := &in.MultiZoneSubnetPolicy, &out.MultiZoneSubnetPolicy
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NodeConfig != nil {
		in, out := &in.NodeConfig, &out.NodeConfig
		*out = make([]NodeConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NodeOs != nil {
		in, out := &in.NodeOs, &out.NodeOs
		*out = new(string)
		**out = **in
	}
	if in.NodeOsType != nil {
		in, out := &in.NodeOsType, &out.NodeOsType
		*out = new(string)
		**out = **in
	}
	if in.RetryPolicy != nil {
		in, out := &in.RetryPolicy, &out.RetryPolicy
		*out = new(string)
		**out = **in
	}
	if in.ScaleTolerance != nil {
		in, out := &in.ScaleTolerance, &out.ScaleTolerance
		*out = new(float64)
		**out = **in
	}
	if in.ScalingGroupName != nil {
		in, out := &in.ScalingGroupName, &out.ScalingGroupName
		*out = new(string)
		**out = **in
	}
	if in.ScalingGroupProjectID != nil {
		in, out := &in.ScalingGroupProjectID, &out.ScalingGroupProjectID
		*out = new(float64)
		**out = **in
	}
	if in.ScalingMode != nil {
		in, out := &in.ScalingMode, &out.ScalingMode
		*out = new(string)
		**out = **in
	}
	if in.SubnetIds != nil {
		in, out := &in.SubnetIds, &out.SubnetIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Taints != nil {
		in, out := &in.Taints, &out.Taints
		*out = make([]NodePoolTaintsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.TerminationPolicies != nil {
		in, out := &in.TerminationPolicies, &out.TerminationPolicies
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Unschedulable != nil {
		in, out := &in.Unschedulable, &out.Unschedulable
		*out = new(float64)
		**out = **in
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
	if in.VPCIDRef != nil {
		in, out := &in.VPCIDRef, &out.VPCIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.VPCIDSelector != nil {
		in, out := &in.VPCIDSelector, &out.VPCIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.WaitNodeReady != nil {
		in, out := &in.WaitNodeReady, &out.WaitNodeReady
		*out = new(bool)
		**out = **in
	}
	if in.Zones != nil {
		in, out := &in.Zones, &out.Zones
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodePoolParameters.
func (in *NodePoolParameters) DeepCopy() *NodePoolParameters {
	if in == nil {
		return nil
	}
	out := new(NodePoolParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodePoolSpec) DeepCopyInto(out *NodePoolSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodePoolSpec.
func (in *NodePoolSpec) DeepCopy() *NodePoolSpec {
	if in == nil {
		return nil
	}
	out := new(NodePoolSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodePoolStatus) DeepCopyInto(out *NodePoolStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodePoolStatus.
func (in *NodePoolStatus) DeepCopy() *NodePoolStatus {
	if in == nil {
		return nil
	}
	out := new(NodePoolStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodePoolTaintsInitParameters) DeepCopyInto(out *NodePoolTaintsInitParameters) {
	*out = *in
	if in.Effect != nil {
		in, out := &in.Effect, &out.Effect
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodePoolTaintsInitParameters.
func (in *NodePoolTaintsInitParameters) DeepCopy() *NodePoolTaintsInitParameters {
	if in == nil {
		return nil
	}
	out := new(NodePoolTaintsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodePoolTaintsObservation) DeepCopyInto(out *NodePoolTaintsObservation) {
	*out = *in
	if in.Effect != nil {
		in, out := &in.Effect, &out.Effect
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodePoolTaintsObservation.
func (in *NodePoolTaintsObservation) DeepCopy() *NodePoolTaintsObservation {
	if in == nil {
		return nil
	}
	out := new(NodePoolTaintsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodePoolTaintsParameters) DeepCopyInto(out *NodePoolTaintsParameters) {
	*out = *in
	if in.Effect != nil {
		in, out := &in.Effect, &out.Effect
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodePoolTaintsParameters.
func (in *NodePoolTaintsParameters) DeepCopy() *NodePoolTaintsParameters {
	if in == nil {
		return nil
	}
	out := new(NodePoolTaintsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ResourceDeleteOptionsInitParameters) DeepCopyInto(out *ResourceDeleteOptionsInitParameters) {
	*out = *in
	if in.DeleteMode != nil {
		in, out := &in.DeleteMode, &out.DeleteMode
		*out = new(string)
		**out = **in
	}
	if in.ResourceType != nil {
		in, out := &in.ResourceType, &out.ResourceType
		*out = new(string)
		**out = **in
	}
	if in.SkipDeletionProtection != nil {
		in, out := &in.SkipDeletionProtection, &out.SkipDeletionProtection
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ResourceDeleteOptionsInitParameters.
func (in *ResourceDeleteOptionsInitParameters) DeepCopy() *ResourceDeleteOptionsInitParameters {
	if in == nil {
		return nil
	}
	out := new(ResourceDeleteOptionsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ResourceDeleteOptionsObservation) DeepCopyInto(out *ResourceDeleteOptionsObservation) {
	*out = *in
	if in.DeleteMode != nil {
		in, out := &in.DeleteMode, &out.DeleteMode
		*out = new(string)
		**out = **in
	}
	if in.ResourceType != nil {
		in, out := &in.ResourceType, &out.ResourceType
		*out = new(string)
		**out = **in
	}
	if in.SkipDeletionProtection != nil {
		in, out := &in.SkipDeletionProtection, &out.SkipDeletionProtection
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ResourceDeleteOptionsObservation.
func (in *ResourceDeleteOptionsObservation) DeepCopy() *ResourceDeleteOptionsObservation {
	if in == nil {
		return nil
	}
	out := new(ResourceDeleteOptionsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ResourceDeleteOptionsParameters) DeepCopyInto(out *ResourceDeleteOptionsParameters) {
	*out = *in
	if in.DeleteMode != nil {
		in, out := &in.DeleteMode, &out.DeleteMode
		*out = new(string)
		**out = **in
	}
	if in.ResourceType != nil {
		in, out := &in.ResourceType, &out.ResourceType
		*out = new(string)
		**out = **in
	}
	if in.SkipDeletionProtection != nil {
		in, out := &in.SkipDeletionProtection, &out.SkipDeletionProtection
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ResourceDeleteOptionsParameters.
func (in *ResourceDeleteOptionsParameters) DeepCopy() *ResourceDeleteOptionsParameters {
	if in == nil {
		return nil
	}
	out := new(ResourceDeleteOptionsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ScaleWorker) DeepCopyInto(out *ScaleWorker) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ScaleWorker.
func (in *ScaleWorker) DeepCopy() *ScaleWorker {
	if in == nil {
		return nil
	}
	out := new(ScaleWorker)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ScaleWorker) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ScaleWorkerDataDiskInitParameters) DeepCopyInto(out *ScaleWorkerDataDiskInitParameters) {
	*out = *in
	if in.AutoFormatAndMount != nil {
		in, out := &in.AutoFormatAndMount, &out.AutoFormatAndMount
		*out = new(bool)
		**out = **in
	}
	if in.DiskPartition != nil {
		in, out := &in.DiskPartition, &out.DiskPartition
		*out = new(string)
		**out = **in
	}
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.DiskType != nil {
		in, out := &in.DiskType, &out.DiskType
		*out = new(string)
		**out = **in
	}
	if in.FileSystem != nil {
		in, out := &in.FileSystem, &out.FileSystem
		*out = new(string)
		**out = **in
	}
	if in.MountTarget != nil {
		in, out := &in.MountTarget, &out.MountTarget
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ScaleWorkerDataDiskInitParameters.
func (in *ScaleWorkerDataDiskInitParameters) DeepCopy() *ScaleWorkerDataDiskInitParameters {
	if in == nil {
		return nil
	}
	out := new(ScaleWorkerDataDiskInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ScaleWorkerDataDiskObservation) DeepCopyInto(out *ScaleWorkerDataDiskObservation) {
	*out = *in
	if in.AutoFormatAndMount != nil {
		in, out := &in.AutoFormatAndMount, &out.AutoFormatAndMount
		*out = new(bool)
		**out = **in
	}
	if in.DiskPartition != nil {
		in, out := &in.DiskPartition, &out.DiskPartition
		*out = new(string)
		**out = **in
	}
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.DiskType != nil {
		in, out := &in.DiskType, &out.DiskType
		*out = new(string)
		**out = **in
	}
	if in.FileSystem != nil {
		in, out := &in.FileSystem, &out.FileSystem
		*out = new(string)
		**out = **in
	}
	if in.MountTarget != nil {
		in, out := &in.MountTarget, &out.MountTarget
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ScaleWorkerDataDiskObservation.
func (in *ScaleWorkerDataDiskObservation) DeepCopy() *ScaleWorkerDataDiskObservation {
	if in == nil {
		return nil
	}
	out := new(ScaleWorkerDataDiskObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ScaleWorkerDataDiskParameters) DeepCopyInto(out *ScaleWorkerDataDiskParameters) {
	*out = *in
	if in.AutoFormatAndMount != nil {
		in, out := &in.AutoFormatAndMount, &out.AutoFormatAndMount
		*out = new(bool)
		**out = **in
	}
	if in.DiskPartition != nil {
		in, out := &in.DiskPartition, &out.DiskPartition
		*out = new(string)
		**out = **in
	}
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.DiskType != nil {
		in, out := &in.DiskType, &out.DiskType
		*out = new(string)
		**out = **in
	}
	if in.FileSystem != nil {
		in, out := &in.FileSystem, &out.FileSystem
		*out = new(string)
		**out = **in
	}
	if in.MountTarget != nil {
		in, out := &in.MountTarget, &out.MountTarget
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ScaleWorkerDataDiskParameters.
func (in *ScaleWorkerDataDiskParameters) DeepCopy() *ScaleWorkerDataDiskParameters {
	if in == nil {
		return nil
	}
	out := new(ScaleWorkerDataDiskParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ScaleWorkerGpuArgsInitParameters) DeepCopyInto(out *ScaleWorkerGpuArgsInitParameters) {
	*out = *in
	if in.Cuda != nil {
		in, out := &in.Cuda, &out.Cuda
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Cudnn != nil {
		in, out := &in.Cudnn, &out.Cudnn
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.CustomDriver != nil {
		in, out := &in.CustomDriver, &out.CustomDriver
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Driver != nil {
		in, out := &in.Driver, &out.Driver
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MigEnable != nil {
		in, out := &in.MigEnable, &out.MigEnable
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ScaleWorkerGpuArgsInitParameters.
func (in *ScaleWorkerGpuArgsInitParameters) DeepCopy() *ScaleWorkerGpuArgsInitParameters {
	if in == nil {
		return nil
	}
	out := new(ScaleWorkerGpuArgsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ScaleWorkerGpuArgsObservation) DeepCopyInto(out *ScaleWorkerGpuArgsObservation) {
	*out = *in
	if in.Cuda != nil {
		in, out := &in.Cuda, &out.Cuda
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Cudnn != nil {
		in, out := &in.Cudnn, &out.Cudnn
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.CustomDriver != nil {
		in, out := &in.CustomDriver, &out.CustomDriver
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Driver != nil {
		in, out := &in.Driver, &out.Driver
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MigEnable != nil {
		in, out := &in.MigEnable, &out.MigEnable
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ScaleWorkerGpuArgsObservation.
func (in *ScaleWorkerGpuArgsObservation) DeepCopy() *ScaleWorkerGpuArgsObservation {
	if in == nil {
		return nil
	}
	out := new(ScaleWorkerGpuArgsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ScaleWorkerGpuArgsParameters) DeepCopyInto(out *ScaleWorkerGpuArgsParameters) {
	*out = *in
	if in.Cuda != nil {
		in, out := &in.Cuda, &out.Cuda
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Cudnn != nil {
		in, out := &in.Cudnn, &out.Cudnn
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.CustomDriver != nil {
		in, out := &in.CustomDriver, &out.CustomDriver
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Driver != nil {
		in, out := &in.Driver, &out.Driver
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MigEnable != nil {
		in, out := &in.MigEnable, &out.MigEnable
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ScaleWorkerGpuArgsParameters.
func (in *ScaleWorkerGpuArgsParameters) DeepCopy() *ScaleWorkerGpuArgsParameters {
	if in == nil {
		return nil
	}
	out := new(ScaleWorkerGpuArgsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ScaleWorkerInitParameters) DeepCopyInto(out *ScaleWorkerInitParameters) {
	*out = *in
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIDRef != nil {
		in, out := &in.ClusterIDRef, &out.ClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIDSelector != nil {
		in, out := &in.ClusterIDSelector, &out.ClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.CreateResultOutputFile != nil {
		in, out := &in.CreateResultOutputFile, &out.CreateResultOutputFile
		*out = new(string)
		**out = **in
	}
	if in.DataDisk != nil {
		in, out := &in.DataDisk, &out.DataDisk
		*out = make([]ScaleWorkerDataDiskInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DesiredPodNum != nil {
		in, out := &in.DesiredPodNum, &out.DesiredPodNum
		*out = new(float64)
		**out = **in
	}
	if in.DockerGraphPath != nil {
		in, out := &in.DockerGraphPath, &out.DockerGraphPath
		*out = new(string)
		**out = **in
	}
	if in.ExtraArgs != nil {
		in, out := &in.ExtraArgs, &out.ExtraArgs
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.GpuArgs != nil {
		in, out := &in.GpuArgs, &out.GpuArgs
		*out = make([]ScaleWorkerGpuArgsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MountTarget != nil {
		in, out := &in.MountTarget, &out.MountTarget
		*out = new(string)
		**out = **in
	}
	if in.PreStartUserScript != nil {
		in, out := &in.PreStartUserScript, &out.PreStartUserScript
		*out = new(string)
		**out = **in
	}
	if in.Taints != nil {
		in, out := &in.Taints, &out.Taints
		*out = make([]ScaleWorkerTaintsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Unschedulable != nil {
		in, out := &in.Unschedulable, &out.Unschedulable
		*out = new(float64)
		**out = **in
	}
	if in.UserScript != nil {
		in, out := &in.UserScript, &out.UserScript
		*out = new(string)
		**out = **in
	}
	if in.WorkerConfig != nil {
		in, out := &in.WorkerConfig, &out.WorkerConfig
		*out = make([]ScaleWorkerWorkerConfigInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ScaleWorkerInitParameters.
func (in *ScaleWorkerInitParameters) DeepCopy() *ScaleWorkerInitParameters {
	if in == nil {
		return nil
	}
	out := new(ScaleWorkerInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ScaleWorkerList) DeepCopyInto(out *ScaleWorkerList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ScaleWorker, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ScaleWorkerList.
func (in *ScaleWorkerList) DeepCopy() *ScaleWorkerList {
	if in == nil {
		return nil
	}
	out := new(ScaleWorkerList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ScaleWorkerList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ScaleWorkerObservation) DeepCopyInto(out *ScaleWorkerObservation) {
	*out = *in
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.CreateResultOutputFile != nil {
		in, out := &in.CreateResultOutputFile, &out.CreateResultOutputFile
		*out = new(string)
		**out = **in
	}
	if in.DataDisk != nil {
		in, out := &in.DataDisk, &out.DataDisk
		*out = make([]ScaleWorkerDataDiskObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DesiredPodNum != nil {
		in, out := &in.DesiredPodNum, &out.DesiredPodNum
		*out = new(float64)
		**out = **in
	}
	if in.DockerGraphPath != nil {
		in, out := &in.DockerGraphPath, &out.DockerGraphPath
		*out = new(string)
		**out = **in
	}
	if in.ExtraArgs != nil {
		in, out := &in.ExtraArgs, &out.ExtraArgs
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.GpuArgs != nil {
		in, out := &in.GpuArgs, &out.GpuArgs
		*out = make([]ScaleWorkerGpuArgsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MountTarget != nil {
		in, out := &in.MountTarget, &out.MountTarget
		*out = new(string)
		**out = **in
	}
	if in.PreStartUserScript != nil {
		in, out := &in.PreStartUserScript, &out.PreStartUserScript
		*out = new(string)
		**out = **in
	}
	if in.Taints != nil {
		in, out := &in.Taints, &out.Taints
		*out = make([]ScaleWorkerTaintsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Unschedulable != nil {
		in, out := &in.Unschedulable, &out.Unschedulable
		*out = new(float64)
		**out = **in
	}
	if in.UserScript != nil {
		in, out := &in.UserScript, &out.UserScript
		*out = new(string)
		**out = **in
	}
	if in.WorkerConfig != nil {
		in, out := &in.WorkerConfig, &out.WorkerConfig
		*out = make([]ScaleWorkerWorkerConfigObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WorkerInstancesList != nil {
		in, out := &in.WorkerInstancesList, &out.WorkerInstancesList
		*out = make([]ScaleWorkerWorkerInstancesListObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ScaleWorkerObservation.
func (in *ScaleWorkerObservation) DeepCopy() *ScaleWorkerObservation {
	if in == nil {
		return nil
	}
	out := new(ScaleWorkerObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ScaleWorkerParameters) DeepCopyInto(out *ScaleWorkerParameters) {
	*out = *in
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIDRef != nil {
		in, out := &in.ClusterIDRef, &out.ClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIDSelector != nil {
		in, out := &in.ClusterIDSelector, &out.ClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.CreateResultOutputFile != nil {
		in, out := &in.CreateResultOutputFile, &out.CreateResultOutputFile
		*out = new(string)
		**out = **in
	}
	if in.DataDisk != nil {
		in, out := &in.DataDisk, &out.DataDisk
		*out = make([]ScaleWorkerDataDiskParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DesiredPodNum != nil {
		in, out := &in.DesiredPodNum, &out.DesiredPodNum
		*out = new(float64)
		**out = **in
	}
	if in.DockerGraphPath != nil {
		in, out := &in.DockerGraphPath, &out.DockerGraphPath
		*out = new(string)
		**out = **in
	}
	if in.ExtraArgs != nil {
		in, out := &in.ExtraArgs, &out.ExtraArgs
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.GpuArgs != nil {
		in, out := &in.GpuArgs, &out.GpuArgs
		*out = make([]ScaleWorkerGpuArgsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MountTarget != nil {
		in, out := &in.MountTarget, &out.MountTarget
		*out = new(string)
		**out = **in
	}
	if in.PreStartUserScript != nil {
		in, out := &in.PreStartUserScript, &out.PreStartUserScript
		*out = new(string)
		**out = **in
	}
	if in.Taints != nil {
		in, out := &in.Taints, &out.Taints
		*out = make([]ScaleWorkerTaintsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Unschedulable != nil {
		in, out := &in.Unschedulable, &out.Unschedulable
		*out = new(float64)
		**out = **in
	}
	if in.UserScript != nil {
		in, out := &in.UserScript, &out.UserScript
		*out = new(string)
		**out = **in
	}
	if in.WorkerConfig != nil {
		in, out := &in.WorkerConfig, &out.WorkerConfig
		*out = make([]ScaleWorkerWorkerConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ScaleWorkerParameters.
func (in *ScaleWorkerParameters) DeepCopy() *ScaleWorkerParameters {
	if in == nil {
		return nil
	}
	out := new(ScaleWorkerParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ScaleWorkerSpec) DeepCopyInto(out *ScaleWorkerSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ScaleWorkerSpec.
func (in *ScaleWorkerSpec) DeepCopy() *ScaleWorkerSpec {
	if in == nil {
		return nil
	}
	out := new(ScaleWorkerSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ScaleWorkerStatus) DeepCopyInto(out *ScaleWorkerStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ScaleWorkerStatus.
func (in *ScaleWorkerStatus) DeepCopy() *ScaleWorkerStatus {
	if in == nil {
		return nil
	}
	out := new(ScaleWorkerStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ScaleWorkerTaintsInitParameters) DeepCopyInto(out *ScaleWorkerTaintsInitParameters) {
	*out = *in
	if in.Effect != nil {
		in, out := &in.Effect, &out.Effect
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ScaleWorkerTaintsInitParameters.
func (in *ScaleWorkerTaintsInitParameters) DeepCopy() *ScaleWorkerTaintsInitParameters {
	if in == nil {
		return nil
	}
	out := new(ScaleWorkerTaintsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ScaleWorkerTaintsObservation) DeepCopyInto(out *ScaleWorkerTaintsObservation) {
	*out = *in
	if in.Effect != nil {
		in, out := &in.Effect, &out.Effect
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ScaleWorkerTaintsObservation.
func (in *ScaleWorkerTaintsObservation) DeepCopy() *ScaleWorkerTaintsObservation {
	if in == nil {
		return nil
	}
	out := new(ScaleWorkerTaintsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ScaleWorkerTaintsParameters) DeepCopyInto(out *ScaleWorkerTaintsParameters) {
	*out = *in
	if in.Effect != nil {
		in, out := &in.Effect, &out.Effect
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ScaleWorkerTaintsParameters.
func (in *ScaleWorkerTaintsParameters) DeepCopy() *ScaleWorkerTaintsParameters {
	if in == nil {
		return nil
	}
	out := new(ScaleWorkerTaintsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ScaleWorkerWorkerConfigDataDiskInitParameters) DeepCopyInto(out *ScaleWorkerWorkerConfigDataDiskInitParameters) {
	*out = *in
	if in.AutoFormatAndMount != nil {
		in, out := &in.AutoFormatAndMount, &out.AutoFormatAndMount
		*out = new(bool)
		**out = **in
	}
	if in.DiskPartition != nil {
		in, out := &in.DiskPartition, &out.DiskPartition
		*out = new(string)
		**out = **in
	}
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.DiskType != nil {
		in, out := &in.DiskType, &out.DiskType
		*out = new(string)
		**out = **in
	}
	if in.Encrypt != nil {
		in, out := &in.Encrypt, &out.Encrypt
		*out = new(bool)
		**out = **in
	}
	if in.FileSystem != nil {
		in, out := &in.FileSystem, &out.FileSystem
		*out = new(string)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.MountTarget != nil {
		in, out := &in.MountTarget, &out.MountTarget
		*out = new(string)
		**out = **in
	}
	if in.SnapshotID != nil {
		in, out := &in.SnapshotID, &out.SnapshotID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ScaleWorkerWorkerConfigDataDiskInitParameters.
func (in *ScaleWorkerWorkerConfigDataDiskInitParameters) DeepCopy() *ScaleWorkerWorkerConfigDataDiskInitParameters {
	if in == nil {
		return nil
	}
	out := new(ScaleWorkerWorkerConfigDataDiskInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ScaleWorkerWorkerConfigDataDiskObservation) DeepCopyInto(out *ScaleWorkerWorkerConfigDataDiskObservation) {
	*out = *in
	if in.AutoFormatAndMount != nil {
		in, out := &in.AutoFormatAndMount, &out.AutoFormatAndMount
		*out = new(bool)
		**out = **in
	}
	if in.DiskPartition != nil {
		in, out := &in.DiskPartition, &out.DiskPartition
		*out = new(string)
		**out = **in
	}
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.DiskType != nil {
		in, out := &in.DiskType, &out.DiskType
		*out = new(string)
		**out = **in
	}
	if in.Encrypt != nil {
		in, out := &in.Encrypt, &out.Encrypt
		*out = new(bool)
		**out = **in
	}
	if in.FileSystem != nil {
		in, out := &in.FileSystem, &out.FileSystem
		*out = new(string)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.MountTarget != nil {
		in, out := &in.MountTarget, &out.MountTarget
		*out = new(string)
		**out = **in
	}
	if in.SnapshotID != nil {
		in, out := &in.SnapshotID, &out.SnapshotID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ScaleWorkerWorkerConfigDataDiskObservation.
func (in *ScaleWorkerWorkerConfigDataDiskObservation) DeepCopy() *ScaleWorkerWorkerConfigDataDiskObservation {
	if in == nil {
		return nil
	}
	out := new(ScaleWorkerWorkerConfigDataDiskObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ScaleWorkerWorkerConfigDataDiskParameters) DeepCopyInto(out *ScaleWorkerWorkerConfigDataDiskParameters) {
	*out = *in
	if in.AutoFormatAndMount != nil {
		in, out := &in.AutoFormatAndMount, &out.AutoFormatAndMount
		*out = new(bool)
		**out = **in
	}
	if in.DiskPartition != nil {
		in, out := &in.DiskPartition, &out.DiskPartition
		*out = new(string)
		**out = **in
	}
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.DiskType != nil {
		in, out := &in.DiskType, &out.DiskType
		*out = new(string)
		**out = **in
	}
	if in.Encrypt != nil {
		in, out := &in.Encrypt, &out.Encrypt
		*out = new(bool)
		**out = **in
	}
	if in.FileSystem != nil {
		in, out := &in.FileSystem, &out.FileSystem
		*out = new(string)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.MountTarget != nil {
		in, out := &in.MountTarget, &out.MountTarget
		*out = new(string)
		**out = **in
	}
	if in.SnapshotID != nil {
		in, out := &in.SnapshotID, &out.SnapshotID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ScaleWorkerWorkerConfigDataDiskParameters.
func (in *ScaleWorkerWorkerConfigDataDiskParameters) DeepCopy() *ScaleWorkerWorkerConfigDataDiskParameters {
	if in == nil {
		return nil
	}
	out := new(ScaleWorkerWorkerConfigDataDiskParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ScaleWorkerWorkerConfigInitParameters) DeepCopyInto(out *ScaleWorkerWorkerConfigInitParameters) {
	*out = *in
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.BandwidthPackageID != nil {
		in, out := &in.BandwidthPackageID, &out.BandwidthPackageID
		*out = new(string)
		**out = **in
	}
	if in.CamRoleName != nil {
		in, out := &in.CamRoleName, &out.CamRoleName
		*out = new(string)
		**out = **in
	}
	if in.Count != nil {
		in, out := &in.Count, &out.Count
		*out = new(float64)
		**out = **in
	}
	if in.DataDisk != nil {
		in, out := &in.DataDisk, &out.DataDisk
		*out = make([]ScaleWorkerWorkerConfigDataDiskInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DesiredPodNum != nil {
		in, out := &in.DesiredPodNum, &out.DesiredPodNum
		*out = new(float64)
		**out = **in
	}
	if in.DisasterRecoverGroupIds != nil {
		in, out := &in.DisasterRecoverGroupIds, &out.DisasterRecoverGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.EnhancedMonitorService != nil {
		in, out := &in.EnhancedMonitorService, &out.EnhancedMonitorService
		*out = new(bool)
		**out = **in
	}
	if in.EnhancedSecurityService != nil {
		in, out := &in.EnhancedSecurityService, &out.EnhancedSecurityService
		*out = new(bool)
		**out = **in
	}
	if in.Hostname != nil {
		in, out := &in.Hostname, &out.Hostname
		*out = new(string)
		**out = **in
	}
	if in.HpcClusterID != nil {
		in, out := &in.HpcClusterID, &out.HpcClusterID
		*out = new(string)
		**out = **in
	}
	if in.ImgID != nil {
		in, out := &in.ImgID, &out.ImgID
		*out = new(string)
		**out = **in
	}
	if in.InstanceChargeType != nil {
		in, out := &in.InstanceChargeType, &out.InstanceChargeType
		*out = new(string)
		**out = **in
	}
	if in.InstanceChargeTypePrepaidPeriod != nil {
		in, out := &in.InstanceChargeTypePrepaidPeriod, &out.InstanceChargeTypePrepaidPeriod
		*out = new(float64)
		**out = **in
	}
	if in.InstanceChargeTypePrepaidRenewFlag != nil {
		in, out := &in.InstanceChargeTypePrepaidRenewFlag, &out.InstanceChargeTypePrepaidRenewFlag
		*out = new(string)
		**out = **in
	}
	if in.InstanceName != nil {
		in, out := &in.InstanceName, &out.InstanceName
		*out = new(string)
		**out = **in
	}
	if in.InstanceType != nil {
		in, out := &in.InstanceType, &out.InstanceType
		*out = new(string)
		**out = **in
	}
	if in.InternetChargeType != nil {
		in, out := &in.InternetChargeType, &out.InternetChargeType
		*out = new(string)
		**out = **in
	}
	if in.InternetMaxBandwidthOut != nil {
		in, out := &in.InternetMaxBandwidthOut, &out.InternetMaxBandwidthOut
		*out = new(float64)
		**out = **in
	}
	if in.KeyIds != nil {
		in, out := &in.KeyIds, &out.KeyIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PublicIPAssigned != nil {
		in, out := &in.PublicIPAssigned, &out.PublicIPAssigned
		*out = new(bool)
		**out = **in
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.SystemDiskSize != nil {
		in, out := &in.SystemDiskSize, &out.SystemDiskSize
		*out = new(float64)
		**out = **in
	}
	if in.SystemDiskType != nil {
		in, out := &in.SystemDiskType, &out.SystemDiskType
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make([]TagsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.UserData != nil {
		in, out := &in.UserData, &out.UserData
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ScaleWorkerWorkerConfigInitParameters.
func (in *ScaleWorkerWorkerConfigInitParameters) DeepCopy() *ScaleWorkerWorkerConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(ScaleWorkerWorkerConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ScaleWorkerWorkerConfigObservation) DeepCopyInto(out *ScaleWorkerWorkerConfigObservation) {
	*out = *in
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.BandwidthPackageID != nil {
		in, out := &in.BandwidthPackageID, &out.BandwidthPackageID
		*out = new(string)
		**out = **in
	}
	if in.CamRoleName != nil {
		in, out := &in.CamRoleName, &out.CamRoleName
		*out = new(string)
		**out = **in
	}
	if in.Count != nil {
		in, out := &in.Count, &out.Count
		*out = new(float64)
		**out = **in
	}
	if in.DataDisk != nil {
		in, out := &in.DataDisk, &out.DataDisk
		*out = make([]ScaleWorkerWorkerConfigDataDiskObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DesiredPodNum != nil {
		in, out := &in.DesiredPodNum, &out.DesiredPodNum
		*out = new(float64)
		**out = **in
	}
	if in.DisasterRecoverGroupIds != nil {
		in, out := &in.DisasterRecoverGroupIds, &out.DisasterRecoverGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.EnhancedMonitorService != nil {
		in, out := &in.EnhancedMonitorService, &out.EnhancedMonitorService
		*out = new(bool)
		**out = **in
	}
	if in.EnhancedSecurityService != nil {
		in, out := &in.EnhancedSecurityService, &out.EnhancedSecurityService
		*out = new(bool)
		**out = **in
	}
	if in.Hostname != nil {
		in, out := &in.Hostname, &out.Hostname
		*out = new(string)
		**out = **in
	}
	if in.HpcClusterID != nil {
		in, out := &in.HpcClusterID, &out.HpcClusterID
		*out = new(string)
		**out = **in
	}
	if in.ImgID != nil {
		in, out := &in.ImgID, &out.ImgID
		*out = new(string)
		**out = **in
	}
	if in.InstanceChargeType != nil {
		in, out := &in.InstanceChargeType, &out.InstanceChargeType
		*out = new(string)
		**out = **in
	}
	if in.InstanceChargeTypePrepaidPeriod != nil {
		in, out := &in.InstanceChargeTypePrepaidPeriod, &out.InstanceChargeTypePrepaidPeriod
		*out = new(float64)
		**out = **in
	}
	if in.InstanceChargeTypePrepaidRenewFlag != nil {
		in, out := &in.InstanceChargeTypePrepaidRenewFlag, &out.InstanceChargeTypePrepaidRenewFlag
		*out = new(string)
		**out = **in
	}
	if in.InstanceName != nil {
		in, out := &in.InstanceName, &out.InstanceName
		*out = new(string)
		**out = **in
	}
	if in.InstanceType != nil {
		in, out := &in.InstanceType, &out.InstanceType
		*out = new(string)
		**out = **in
	}
	if in.InternetChargeType != nil {
		in, out := &in.InternetChargeType, &out.InternetChargeType
		*out = new(string)
		**out = **in
	}
	if in.InternetMaxBandwidthOut != nil {
		in, out := &in.InternetMaxBandwidthOut, &out.InternetMaxBandwidthOut
		*out = new(float64)
		**out = **in
	}
	if in.KeyIds != nil {
		in, out := &in.KeyIds, &out.KeyIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PublicIPAssigned != nil {
		in, out := &in.PublicIPAssigned, &out.PublicIPAssigned
		*out = new(bool)
		**out = **in
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.SystemDiskSize != nil {
		in, out := &in.SystemDiskSize, &out.SystemDiskSize
		*out = new(float64)
		**out = **in
	}
	if in.SystemDiskType != nil {
		in, out := &in.SystemDiskType, &out.SystemDiskType
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make([]TagsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.UserData != nil {
		in, out := &in.UserData, &out.UserData
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ScaleWorkerWorkerConfigObservation.
func (in *ScaleWorkerWorkerConfigObservation) DeepCopy() *ScaleWorkerWorkerConfigObservation {
	if in == nil {
		return nil
	}
	out := new(ScaleWorkerWorkerConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ScaleWorkerWorkerConfigParameters) DeepCopyInto(out *ScaleWorkerWorkerConfigParameters) {
	*out = *in
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.BandwidthPackageID != nil {
		in, out := &in.BandwidthPackageID, &out.BandwidthPackageID
		*out = new(string)
		**out = **in
	}
	if in.CamRoleName != nil {
		in, out := &in.CamRoleName, &out.CamRoleName
		*out = new(string)
		**out = **in
	}
	if in.Count != nil {
		in, out := &in.Count, &out.Count
		*out = new(float64)
		**out = **in
	}
	if in.DataDisk != nil {
		in, out := &in.DataDisk, &out.DataDisk
		*out = make([]ScaleWorkerWorkerConfigDataDiskParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DesiredPodNum != nil {
		in, out := &in.DesiredPodNum, &out.DesiredPodNum
		*out = new(float64)
		**out = **in
	}
	if in.DisasterRecoverGroupIds != nil {
		in, out := &in.DisasterRecoverGroupIds, &out.DisasterRecoverGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.EnhancedMonitorService != nil {
		in, out := &in.EnhancedMonitorService, &out.EnhancedMonitorService
		*out = new(bool)
		**out = **in
	}
	if in.EnhancedSecurityService != nil {
		in, out := &in.EnhancedSecurityService, &out.EnhancedSecurityService
		*out = new(bool)
		**out = **in
	}
	if in.Hostname != nil {
		in, out := &in.Hostname, &out.Hostname
		*out = new(string)
		**out = **in
	}
	if in.HpcClusterID != nil {
		in, out := &in.HpcClusterID, &out.HpcClusterID
		*out = new(string)
		**out = **in
	}
	if in.ImgID != nil {
		in, out := &in.ImgID, &out.ImgID
		*out = new(string)
		**out = **in
	}
	if in.InstanceChargeType != nil {
		in, out := &in.InstanceChargeType, &out.InstanceChargeType
		*out = new(string)
		**out = **in
	}
	if in.InstanceChargeTypePrepaidPeriod != nil {
		in, out := &in.InstanceChargeTypePrepaidPeriod, &out.InstanceChargeTypePrepaidPeriod
		*out = new(float64)
		**out = **in
	}
	if in.InstanceChargeTypePrepaidRenewFlag != nil {
		in, out := &in.InstanceChargeTypePrepaidRenewFlag, &out.InstanceChargeTypePrepaidRenewFlag
		*out = new(string)
		**out = **in
	}
	if in.InstanceName != nil {
		in, out := &in.InstanceName, &out.InstanceName
		*out = new(string)
		**out = **in
	}
	if in.InstanceType != nil {
		in, out := &in.InstanceType, &out.InstanceType
		*out = new(string)
		**out = **in
	}
	if in.InternetChargeType != nil {
		in, out := &in.InternetChargeType, &out.InternetChargeType
		*out = new(string)
		**out = **in
	}
	if in.InternetMaxBandwidthOut != nil {
		in, out := &in.InternetMaxBandwidthOut, &out.InternetMaxBandwidthOut
		*out = new(float64)
		**out = **in
	}
	if in.KeyIds != nil {
		in, out := &in.KeyIds, &out.KeyIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.PublicIPAssigned != nil {
		in, out := &in.PublicIPAssigned, &out.PublicIPAssigned
		*out = new(bool)
		**out = **in
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.SystemDiskSize != nil {
		in, out := &in.SystemDiskSize, &out.SystemDiskSize
		*out = new(float64)
		**out = **in
	}
	if in.SystemDiskType != nil {
		in, out := &in.SystemDiskType, &out.SystemDiskType
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make([]TagsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.UserData != nil {
		in, out := &in.UserData, &out.UserData
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ScaleWorkerWorkerConfigParameters.
func (in *ScaleWorkerWorkerConfigParameters) DeepCopy() *ScaleWorkerWorkerConfigParameters {
	if in == nil {
		return nil
	}
	out := new(ScaleWorkerWorkerConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ScaleWorkerWorkerInstancesListInitParameters) DeepCopyInto(out *ScaleWorkerWorkerInstancesListInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ScaleWorkerWorkerInstancesListInitParameters.
func (in *ScaleWorkerWorkerInstancesListInitParameters) DeepCopy() *ScaleWorkerWorkerInstancesListInitParameters {
	if in == nil {
		return nil
	}
	out := new(ScaleWorkerWorkerInstancesListInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ScaleWorkerWorkerInstancesListObservation) DeepCopyInto(out *ScaleWorkerWorkerInstancesListObservation) {
	*out = *in
	if in.FailedReason != nil {
		in, out := &in.FailedReason, &out.FailedReason
		*out = new(string)
		**out = **in
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.InstanceRole != nil {
		in, out := &in.InstanceRole, &out.InstanceRole
		*out = new(string)
		**out = **in
	}
	if in.InstanceState != nil {
		in, out := &in.InstanceState, &out.InstanceState
		*out = new(string)
		**out = **in
	}
	if in.LanIP != nil {
		in, out := &in.LanIP, &out.LanIP
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ScaleWorkerWorkerInstancesListObservation.
func (in *ScaleWorkerWorkerInstancesListObservation) DeepCopy() *ScaleWorkerWorkerInstancesListObservation {
	if in == nil {
		return nil
	}
	out := new(ScaleWorkerWorkerInstancesListObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ScaleWorkerWorkerInstancesListParameters) DeepCopyInto(out *ScaleWorkerWorkerInstancesListParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ScaleWorkerWorkerInstancesListParameters.
func (in *ScaleWorkerWorkerInstancesListParameters) DeepCopy() *ScaleWorkerWorkerInstancesListParameters {
	if in == nil {
		return nil
	}
	out := new(ScaleWorkerWorkerInstancesListParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TagsInitParameters) DeepCopyInto(out *TagsInitParameters) {
	*out = *in
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TagsInitParameters.
func (in *TagsInitParameters) DeepCopy() *TagsInitParameters {
	if in == nil {
		return nil
	}
	out := new(TagsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TagsObservation) DeepCopyInto(out *TagsObservation) {
	*out = *in
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TagsObservation.
func (in *TagsObservation) DeepCopy() *TagsObservation {
	if in == nil {
		return nil
	}
	out := new(TagsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TagsParameters) DeepCopyInto(out *TagsParameters) {
	*out = *in
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TagsParameters.
func (in *TagsParameters) DeepCopy() *TagsParameters {
	if in == nil {
		return nil
	}
	out := new(TagsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TaintsInitParameters) DeepCopyInto(out *TaintsInitParameters) {
	*out = *in
	if in.Effect != nil {
		in, out := &in.Effect, &out.Effect
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TaintsInitParameters.
func (in *TaintsInitParameters) DeepCopy() *TaintsInitParameters {
	if in == nil {
		return nil
	}
	out := new(TaintsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TaintsObservation) DeepCopyInto(out *TaintsObservation) {
	*out = *in
	if in.Effect != nil {
		in, out := &in.Effect, &out.Effect
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TaintsObservation.
func (in *TaintsObservation) DeepCopy() *TaintsObservation {
	if in == nil {
		return nil
	}
	out := new(TaintsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TaintsParameters) DeepCopyInto(out *TaintsParameters) {
	*out = *in
	if in.Effect != nil {
		in, out := &in.Effect, &out.Effect
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TaintsParameters.
func (in *TaintsParameters) DeepCopy() *TaintsParameters {
	if in == nil {
		return nil
	}
	out := new(TaintsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkerConfigDataDiskInitParameters) DeepCopyInto(out *WorkerConfigDataDiskInitParameters) {
	*out = *in
	if in.AutoFormatAndMount != nil {
		in, out := &in.AutoFormatAndMount, &out.AutoFormatAndMount
		*out = new(bool)
		**out = **in
	}
	if in.DiskPartition != nil {
		in, out := &in.DiskPartition, &out.DiskPartition
		*out = new(string)
		**out = **in
	}
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.DiskType != nil {
		in, out := &in.DiskType, &out.DiskType
		*out = new(string)
		**out = **in
	}
	if in.Encrypt != nil {
		in, out := &in.Encrypt, &out.Encrypt
		*out = new(bool)
		**out = **in
	}
	if in.FileSystem != nil {
		in, out := &in.FileSystem, &out.FileSystem
		*out = new(string)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.MountTarget != nil {
		in, out := &in.MountTarget, &out.MountTarget
		*out = new(string)
		**out = **in
	}
	if in.SnapshotID != nil {
		in, out := &in.SnapshotID, &out.SnapshotID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkerConfigDataDiskInitParameters.
func (in *WorkerConfigDataDiskInitParameters) DeepCopy() *WorkerConfigDataDiskInitParameters {
	if in == nil {
		return nil
	}
	out := new(WorkerConfigDataDiskInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkerConfigDataDiskObservation) DeepCopyInto(out *WorkerConfigDataDiskObservation) {
	*out = *in
	if in.AutoFormatAndMount != nil {
		in, out := &in.AutoFormatAndMount, &out.AutoFormatAndMount
		*out = new(bool)
		**out = **in
	}
	if in.DiskPartition != nil {
		in, out := &in.DiskPartition, &out.DiskPartition
		*out = new(string)
		**out = **in
	}
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.DiskType != nil {
		in, out := &in.DiskType, &out.DiskType
		*out = new(string)
		**out = **in
	}
	if in.Encrypt != nil {
		in, out := &in.Encrypt, &out.Encrypt
		*out = new(bool)
		**out = **in
	}
	if in.FileSystem != nil {
		in, out := &in.FileSystem, &out.FileSystem
		*out = new(string)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.MountTarget != nil {
		in, out := &in.MountTarget, &out.MountTarget
		*out = new(string)
		**out = **in
	}
	if in.SnapshotID != nil {
		in, out := &in.SnapshotID, &out.SnapshotID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkerConfigDataDiskObservation.
func (in *WorkerConfigDataDiskObservation) DeepCopy() *WorkerConfigDataDiskObservation {
	if in == nil {
		return nil
	}
	out := new(WorkerConfigDataDiskObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkerConfigDataDiskParameters) DeepCopyInto(out *WorkerConfigDataDiskParameters) {
	*out = *in
	if in.AutoFormatAndMount != nil {
		in, out := &in.AutoFormatAndMount, &out.AutoFormatAndMount
		*out = new(bool)
		**out = **in
	}
	if in.DiskPartition != nil {
		in, out := &in.DiskPartition, &out.DiskPartition
		*out = new(string)
		**out = **in
	}
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.DiskType != nil {
		in, out := &in.DiskType, &out.DiskType
		*out = new(string)
		**out = **in
	}
	if in.Encrypt != nil {
		in, out := &in.Encrypt, &out.Encrypt
		*out = new(bool)
		**out = **in
	}
	if in.FileSystem != nil {
		in, out := &in.FileSystem, &out.FileSystem
		*out = new(string)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.MountTarget != nil {
		in, out := &in.MountTarget, &out.MountTarget
		*out = new(string)
		**out = **in
	}
	if in.SnapshotID != nil {
		in, out := &in.SnapshotID, &out.SnapshotID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkerConfigDataDiskParameters.
func (in *WorkerConfigDataDiskParameters) DeepCopy() *WorkerConfigDataDiskParameters {
	if in == nil {
		return nil
	}
	out := new(WorkerConfigDataDiskParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkerConfigGpuArgsInitParameters) DeepCopyInto(out *WorkerConfigGpuArgsInitParameters) {
	*out = *in
	if in.Cuda != nil {
		in, out := &in.Cuda, &out.Cuda
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Cudnn != nil {
		in, out := &in.Cudnn, &out.Cudnn
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.CustomDriver != nil {
		in, out := &in.CustomDriver, &out.CustomDriver
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Driver != nil {
		in, out := &in.Driver, &out.Driver
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MigEnable != nil {
		in, out := &in.MigEnable, &out.MigEnable
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkerConfigGpuArgsInitParameters.
func (in *WorkerConfigGpuArgsInitParameters) DeepCopy() *WorkerConfigGpuArgsInitParameters {
	if in == nil {
		return nil
	}
	out := new(WorkerConfigGpuArgsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkerConfigGpuArgsObservation) DeepCopyInto(out *WorkerConfigGpuArgsObservation) {
	*out = *in
	if in.Cuda != nil {
		in, out := &in.Cuda, &out.Cuda
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Cudnn != nil {
		in, out := &in.Cudnn, &out.Cudnn
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.CustomDriver != nil {
		in, out := &in.CustomDriver, &out.CustomDriver
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Driver != nil {
		in, out := &in.Driver, &out.Driver
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MigEnable != nil {
		in, out := &in.MigEnable, &out.MigEnable
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkerConfigGpuArgsObservation.
func (in *WorkerConfigGpuArgsObservation) DeepCopy() *WorkerConfigGpuArgsObservation {
	if in == nil {
		return nil
	}
	out := new(WorkerConfigGpuArgsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkerConfigGpuArgsParameters) DeepCopyInto(out *WorkerConfigGpuArgsParameters) {
	*out = *in
	if in.Cuda != nil {
		in, out := &in.Cuda, &out.Cuda
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Cudnn != nil {
		in, out := &in.Cudnn, &out.Cudnn
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.CustomDriver != nil {
		in, out := &in.CustomDriver, &out.CustomDriver
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Driver != nil {
		in, out := &in.Driver, &out.Driver
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MigEnable != nil {
		in, out := &in.MigEnable, &out.MigEnable
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkerConfigGpuArgsParameters.
func (in *WorkerConfigGpuArgsParameters) DeepCopy() *WorkerConfigGpuArgsParameters {
	if in == nil {
		return nil
	}
	out := new(WorkerConfigGpuArgsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkerConfigInitParameters) DeepCopyInto(out *WorkerConfigInitParameters) {
	*out = *in
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.BandwidthPackageID != nil {
		in, out := &in.BandwidthPackageID, &out.BandwidthPackageID
		*out = new(string)
		**out = **in
	}
	if in.CamRoleName != nil {
		in, out := &in.CamRoleName, &out.CamRoleName
		*out = new(string)
		**out = **in
	}
	if in.Count != nil {
		in, out := &in.Count, &out.Count
		*out = new(float64)
		**out = **in
	}
	if in.DataDisk != nil {
		in, out := &in.DataDisk, &out.DataDisk
		*out = make([]WorkerConfigDataDiskInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DesiredPodNum != nil {
		in, out := &in.DesiredPodNum, &out.DesiredPodNum
		*out = new(float64)
		**out = **in
	}
	if in.DisasterRecoverGroupIds != nil {
		in, out := &in.DisasterRecoverGroupIds, &out.DisasterRecoverGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.EnhancedMonitorService != nil {
		in, out := &in.EnhancedMonitorService, &out.EnhancedMonitorService
		*out = new(bool)
		**out = **in
	}
	if in.EnhancedSecurityService != nil {
		in, out := &in.EnhancedSecurityService, &out.EnhancedSecurityService
		*out = new(bool)
		**out = **in
	}
	if in.Hostname != nil {
		in, out := &in.Hostname, &out.Hostname
		*out = new(string)
		**out = **in
	}
	if in.HpcClusterID != nil {
		in, out := &in.HpcClusterID, &out.HpcClusterID
		*out = new(string)
		**out = **in
	}
	if in.ImgID != nil {
		in, out := &in.ImgID, &out.ImgID
		*out = new(string)
		**out = **in
	}
	if in.InstanceChargeType != nil {
		in, out := &in.InstanceChargeType, &out.InstanceChargeType
		*out = new(string)
		**out = **in
	}
	if in.InstanceChargeTypePrepaidPeriod != nil {
		in, out := &in.InstanceChargeTypePrepaidPeriod, &out.InstanceChargeTypePrepaidPeriod
		*out = new(float64)
		**out = **in
	}
	if in.InstanceChargeTypePrepaidRenewFlag != nil {
		in, out := &in.InstanceChargeTypePrepaidRenewFlag, &out.InstanceChargeTypePrepaidRenewFlag
		*out = new(string)
		**out = **in
	}
	if in.InstanceName != nil {
		in, out := &in.InstanceName, &out.InstanceName
		*out = new(string)
		**out = **in
	}
	if in.InstanceType != nil {
		in, out := &in.InstanceType, &out.InstanceType
		*out = new(string)
		**out = **in
	}
	if in.InternetChargeType != nil {
		in, out := &in.InternetChargeType, &out.InternetChargeType
		*out = new(string)
		**out = **in
	}
	if in.InternetMaxBandwidthOut != nil {
		in, out := &in.InternetMaxBandwidthOut, &out.InternetMaxBandwidthOut
		*out = new(float64)
		**out = **in
	}
	if in.KeyIds != nil {
		in, out := &in.KeyIds, &out.KeyIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PublicIPAssigned != nil {
		in, out := &in.PublicIPAssigned, &out.PublicIPAssigned
		*out = new(bool)
		**out = **in
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.SystemDiskSize != nil {
		in, out := &in.SystemDiskSize, &out.SystemDiskSize
		*out = new(float64)
		**out = **in
	}
	if in.SystemDiskType != nil {
		in, out := &in.SystemDiskType, &out.SystemDiskType
		*out = new(string)
		**out = **in
	}
	if in.UserData != nil {
		in, out := &in.UserData, &out.UserData
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkerConfigInitParameters.
func (in *WorkerConfigInitParameters) DeepCopy() *WorkerConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(WorkerConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkerConfigObservation) DeepCopyInto(out *WorkerConfigObservation) {
	*out = *in
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.BandwidthPackageID != nil {
		in, out := &in.BandwidthPackageID, &out.BandwidthPackageID
		*out = new(string)
		**out = **in
	}
	if in.CamRoleName != nil {
		in, out := &in.CamRoleName, &out.CamRoleName
		*out = new(string)
		**out = **in
	}
	if in.Count != nil {
		in, out := &in.Count, &out.Count
		*out = new(float64)
		**out = **in
	}
	if in.DataDisk != nil {
		in, out := &in.DataDisk, &out.DataDisk
		*out = make([]WorkerConfigDataDiskObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DesiredPodNum != nil {
		in, out := &in.DesiredPodNum, &out.DesiredPodNum
		*out = new(float64)
		**out = **in
	}
	if in.DisasterRecoverGroupIds != nil {
		in, out := &in.DisasterRecoverGroupIds, &out.DisasterRecoverGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.EnhancedMonitorService != nil {
		in, out := &in.EnhancedMonitorService, &out.EnhancedMonitorService
		*out = new(bool)
		**out = **in
	}
	if in.EnhancedSecurityService != nil {
		in, out := &in.EnhancedSecurityService, &out.EnhancedSecurityService
		*out = new(bool)
		**out = **in
	}
	if in.Hostname != nil {
		in, out := &in.Hostname, &out.Hostname
		*out = new(string)
		**out = **in
	}
	if in.HpcClusterID != nil {
		in, out := &in.HpcClusterID, &out.HpcClusterID
		*out = new(string)
		**out = **in
	}
	if in.ImgID != nil {
		in, out := &in.ImgID, &out.ImgID
		*out = new(string)
		**out = **in
	}
	if in.InstanceChargeType != nil {
		in, out := &in.InstanceChargeType, &out.InstanceChargeType
		*out = new(string)
		**out = **in
	}
	if in.InstanceChargeTypePrepaidPeriod != nil {
		in, out := &in.InstanceChargeTypePrepaidPeriod, &out.InstanceChargeTypePrepaidPeriod
		*out = new(float64)
		**out = **in
	}
	if in.InstanceChargeTypePrepaidRenewFlag != nil {
		in, out := &in.InstanceChargeTypePrepaidRenewFlag, &out.InstanceChargeTypePrepaidRenewFlag
		*out = new(string)
		**out = **in
	}
	if in.InstanceName != nil {
		in, out := &in.InstanceName, &out.InstanceName
		*out = new(string)
		**out = **in
	}
	if in.InstanceType != nil {
		in, out := &in.InstanceType, &out.InstanceType
		*out = new(string)
		**out = **in
	}
	if in.InternetChargeType != nil {
		in, out := &in.InternetChargeType, &out.InternetChargeType
		*out = new(string)
		**out = **in
	}
	if in.InternetMaxBandwidthOut != nil {
		in, out := &in.InternetMaxBandwidthOut, &out.InternetMaxBandwidthOut
		*out = new(float64)
		**out = **in
	}
	if in.KeyIds != nil {
		in, out := &in.KeyIds, &out.KeyIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PublicIPAssigned != nil {
		in, out := &in.PublicIPAssigned, &out.PublicIPAssigned
		*out = new(bool)
		**out = **in
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.SystemDiskSize != nil {
		in, out := &in.SystemDiskSize, &out.SystemDiskSize
		*out = new(float64)
		**out = **in
	}
	if in.SystemDiskType != nil {
		in, out := &in.SystemDiskType, &out.SystemDiskType
		*out = new(string)
		**out = **in
	}
	if in.UserData != nil {
		in, out := &in.UserData, &out.UserData
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkerConfigObservation.
func (in *WorkerConfigObservation) DeepCopy() *WorkerConfigObservation {
	if in == nil {
		return nil
	}
	out := new(WorkerConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkerConfigOverridesDataDiskInitParameters) DeepCopyInto(out *WorkerConfigOverridesDataDiskInitParameters) {
	*out = *in
	if in.AutoFormatAndMount != nil {
		in, out := &in.AutoFormatAndMount, &out.AutoFormatAndMount
		*out = new(bool)
		**out = **in
	}
	if in.DiskPartition != nil {
		in, out := &in.DiskPartition, &out.DiskPartition
		*out = new(string)
		**out = **in
	}
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.DiskType != nil {
		in, out := &in.DiskType, &out.DiskType
		*out = new(string)
		**out = **in
	}
	if in.FileSystem != nil {
		in, out := &in.FileSystem, &out.FileSystem
		*out = new(string)
		**out = **in
	}
	if in.MountTarget != nil {
		in, out := &in.MountTarget, &out.MountTarget
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkerConfigOverridesDataDiskInitParameters.
func (in *WorkerConfigOverridesDataDiskInitParameters) DeepCopy() *WorkerConfigOverridesDataDiskInitParameters {
	if in == nil {
		return nil
	}
	out := new(WorkerConfigOverridesDataDiskInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkerConfigOverridesDataDiskObservation) DeepCopyInto(out *WorkerConfigOverridesDataDiskObservation) {
	*out = *in
	if in.AutoFormatAndMount != nil {
		in, out := &in.AutoFormatAndMount, &out.AutoFormatAndMount
		*out = new(bool)
		**out = **in
	}
	if in.DiskPartition != nil {
		in, out := &in.DiskPartition, &out.DiskPartition
		*out = new(string)
		**out = **in
	}
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.DiskType != nil {
		in, out := &in.DiskType, &out.DiskType
		*out = new(string)
		**out = **in
	}
	if in.FileSystem != nil {
		in, out := &in.FileSystem, &out.FileSystem
		*out = new(string)
		**out = **in
	}
	if in.MountTarget != nil {
		in, out := &in.MountTarget, &out.MountTarget
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkerConfigOverridesDataDiskObservation.
func (in *WorkerConfigOverridesDataDiskObservation) DeepCopy() *WorkerConfigOverridesDataDiskObservation {
	if in == nil {
		return nil
	}
	out := new(WorkerConfigOverridesDataDiskObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkerConfigOverridesDataDiskParameters) DeepCopyInto(out *WorkerConfigOverridesDataDiskParameters) {
	*out = *in
	if in.AutoFormatAndMount != nil {
		in, out := &in.AutoFormatAndMount, &out.AutoFormatAndMount
		*out = new(bool)
		**out = **in
	}
	if in.DiskPartition != nil {
		in, out := &in.DiskPartition, &out.DiskPartition
		*out = new(string)
		**out = **in
	}
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.DiskType != nil {
		in, out := &in.DiskType, &out.DiskType
		*out = new(string)
		**out = **in
	}
	if in.FileSystem != nil {
		in, out := &in.FileSystem, &out.FileSystem
		*out = new(string)
		**out = **in
	}
	if in.MountTarget != nil {
		in, out := &in.MountTarget, &out.MountTarget
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkerConfigOverridesDataDiskParameters.
func (in *WorkerConfigOverridesDataDiskParameters) DeepCopy() *WorkerConfigOverridesDataDiskParameters {
	if in == nil {
		return nil
	}
	out := new(WorkerConfigOverridesDataDiskParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkerConfigOverridesGpuArgsInitParameters) DeepCopyInto(out *WorkerConfigOverridesGpuArgsInitParameters) {
	*out = *in
	if in.Cuda != nil {
		in, out := &in.Cuda, &out.Cuda
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Cudnn != nil {
		in, out := &in.Cudnn, &out.Cudnn
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.CustomDriver != nil {
		in, out := &in.CustomDriver, &out.CustomDriver
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Driver != nil {
		in, out := &in.Driver, &out.Driver
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MigEnable != nil {
		in, out := &in.MigEnable, &out.MigEnable
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkerConfigOverridesGpuArgsInitParameters.
func (in *WorkerConfigOverridesGpuArgsInitParameters) DeepCopy() *WorkerConfigOverridesGpuArgsInitParameters {
	if in == nil {
		return nil
	}
	out := new(WorkerConfigOverridesGpuArgsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkerConfigOverridesGpuArgsObservation) DeepCopyInto(out *WorkerConfigOverridesGpuArgsObservation) {
	*out = *in
	if in.Cuda != nil {
		in, out := &in.Cuda, &out.Cuda
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Cudnn != nil {
		in, out := &in.Cudnn, &out.Cudnn
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.CustomDriver != nil {
		in, out := &in.CustomDriver, &out.CustomDriver
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Driver != nil {
		in, out := &in.Driver, &out.Driver
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MigEnable != nil {
		in, out := &in.MigEnable, &out.MigEnable
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkerConfigOverridesGpuArgsObservation.
func (in *WorkerConfigOverridesGpuArgsObservation) DeepCopy() *WorkerConfigOverridesGpuArgsObservation {
	if in == nil {
		return nil
	}
	out := new(WorkerConfigOverridesGpuArgsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkerConfigOverridesGpuArgsParameters) DeepCopyInto(out *WorkerConfigOverridesGpuArgsParameters) {
	*out = *in
	if in.Cuda != nil {
		in, out := &in.Cuda, &out.Cuda
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Cudnn != nil {
		in, out := &in.Cudnn, &out.Cudnn
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.CustomDriver != nil {
		in, out := &in.CustomDriver, &out.CustomDriver
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Driver != nil {
		in, out := &in.Driver, &out.Driver
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MigEnable != nil {
		in, out := &in.MigEnable, &out.MigEnable
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkerConfigOverridesGpuArgsParameters.
func (in *WorkerConfigOverridesGpuArgsParameters) DeepCopy() *WorkerConfigOverridesGpuArgsParameters {
	if in == nil {
		return nil
	}
	out := new(WorkerConfigOverridesGpuArgsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkerConfigOverridesInitParameters) DeepCopyInto(out *WorkerConfigOverridesInitParameters) {
	*out = *in
	if in.DataDisk != nil {
		in, out := &in.DataDisk, &out.DataDisk
		*out = make([]WorkerConfigOverridesDataDiskInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DesiredPodNum != nil {
		in, out := &in.DesiredPodNum, &out.DesiredPodNum
		*out = new(float64)
		**out = **in
	}
	if in.DockerGraphPath != nil {
		in, out := &in.DockerGraphPath, &out.DockerGraphPath
		*out = new(string)
		**out = **in
	}
	if in.ExtraArgs != nil {
		in, out := &in.ExtraArgs, &out.ExtraArgs
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.GpuArgs != nil {
		in, out := &in.GpuArgs, &out.GpuArgs
		*out = make([]WorkerConfigOverridesGpuArgsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.IsSchedule != nil {
		in, out := &in.IsSchedule, &out.IsSchedule
		*out = new(bool)
		**out = **in
	}
	if in.MountTarget != nil {
		in, out := &in.MountTarget, &out.MountTarget
		*out = new(string)
		**out = **in
	}
	if in.PreStartUserScript != nil {
		in, out := &in.PreStartUserScript, &out.PreStartUserScript
		*out = new(string)
		**out = **in
	}
	if in.UserData != nil {
		in, out := &in.UserData, &out.UserData
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkerConfigOverridesInitParameters.
func (in *WorkerConfigOverridesInitParameters) DeepCopy() *WorkerConfigOverridesInitParameters {
	if in == nil {
		return nil
	}
	out := new(WorkerConfigOverridesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkerConfigOverridesObservation) DeepCopyInto(out *WorkerConfigOverridesObservation) {
	*out = *in
	if in.DataDisk != nil {
		in, out := &in.DataDisk, &out.DataDisk
		*out = make([]WorkerConfigOverridesDataDiskObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DesiredPodNum != nil {
		in, out := &in.DesiredPodNum, &out.DesiredPodNum
		*out = new(float64)
		**out = **in
	}
	if in.DockerGraphPath != nil {
		in, out := &in.DockerGraphPath, &out.DockerGraphPath
		*out = new(string)
		**out = **in
	}
	if in.ExtraArgs != nil {
		in, out := &in.ExtraArgs, &out.ExtraArgs
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.GpuArgs != nil {
		in, out := &in.GpuArgs, &out.GpuArgs
		*out = make([]WorkerConfigOverridesGpuArgsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.IsSchedule != nil {
		in, out := &in.IsSchedule, &out.IsSchedule
		*out = new(bool)
		**out = **in
	}
	if in.MountTarget != nil {
		in, out := &in.MountTarget, &out.MountTarget
		*out = new(string)
		**out = **in
	}
	if in.PreStartUserScript != nil {
		in, out := &in.PreStartUserScript, &out.PreStartUserScript
		*out = new(string)
		**out = **in
	}
	if in.UserData != nil {
		in, out := &in.UserData, &out.UserData
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkerConfigOverridesObservation.
func (in *WorkerConfigOverridesObservation) DeepCopy() *WorkerConfigOverridesObservation {
	if in == nil {
		return nil
	}
	out := new(WorkerConfigOverridesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkerConfigOverridesParameters) DeepCopyInto(out *WorkerConfigOverridesParameters) {
	*out = *in
	if in.DataDisk != nil {
		in, out := &in.DataDisk, &out.DataDisk
		*out = make([]WorkerConfigOverridesDataDiskParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DesiredPodNum != nil {
		in, out := &in.DesiredPodNum, &out.DesiredPodNum
		*out = new(float64)
		**out = **in
	}
	if in.DockerGraphPath != nil {
		in, out := &in.DockerGraphPath, &out.DockerGraphPath
		*out = new(string)
		**out = **in
	}
	if in.ExtraArgs != nil {
		in, out := &in.ExtraArgs, &out.ExtraArgs
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.GpuArgs != nil {
		in, out := &in.GpuArgs, &out.GpuArgs
		*out = make([]WorkerConfigOverridesGpuArgsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.IsSchedule != nil {
		in, out := &in.IsSchedule, &out.IsSchedule
		*out = new(bool)
		**out = **in
	}
	if in.MountTarget != nil {
		in, out := &in.MountTarget, &out.MountTarget
		*out = new(string)
		**out = **in
	}
	if in.PreStartUserScript != nil {
		in, out := &in.PreStartUserScript, &out.PreStartUserScript
		*out = new(string)
		**out = **in
	}
	if in.UserData != nil {
		in, out := &in.UserData, &out.UserData
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkerConfigOverridesParameters.
func (in *WorkerConfigOverridesParameters) DeepCopy() *WorkerConfigOverridesParameters {
	if in == nil {
		return nil
	}
	out := new(WorkerConfigOverridesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkerConfigParameters) DeepCopyInto(out *WorkerConfigParameters) {
	*out = *in
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.BandwidthPackageID != nil {
		in, out := &in.BandwidthPackageID, &out.BandwidthPackageID
		*out = new(string)
		**out = **in
	}
	if in.CamRoleName != nil {
		in, out := &in.CamRoleName, &out.CamRoleName
		*out = new(string)
		**out = **in
	}
	if in.Count != nil {
		in, out := &in.Count, &out.Count
		*out = new(float64)
		**out = **in
	}
	if in.DataDisk != nil {
		in, out := &in.DataDisk, &out.DataDisk
		*out = make([]WorkerConfigDataDiskParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DesiredPodNum != nil {
		in, out := &in.DesiredPodNum, &out.DesiredPodNum
		*out = new(float64)
		**out = **in
	}
	if in.DisasterRecoverGroupIds != nil {
		in, out := &in.DisasterRecoverGroupIds, &out.DisasterRecoverGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.EnhancedMonitorService != nil {
		in, out := &in.EnhancedMonitorService, &out.EnhancedMonitorService
		*out = new(bool)
		**out = **in
	}
	if in.EnhancedSecurityService != nil {
		in, out := &in.EnhancedSecurityService, &out.EnhancedSecurityService
		*out = new(bool)
		**out = **in
	}
	if in.Hostname != nil {
		in, out := &in.Hostname, &out.Hostname
		*out = new(string)
		**out = **in
	}
	if in.HpcClusterID != nil {
		in, out := &in.HpcClusterID, &out.HpcClusterID
		*out = new(string)
		**out = **in
	}
	if in.ImgID != nil {
		in, out := &in.ImgID, &out.ImgID
		*out = new(string)
		**out = **in
	}
	if in.InstanceChargeType != nil {
		in, out := &in.InstanceChargeType, &out.InstanceChargeType
		*out = new(string)
		**out = **in
	}
	if in.InstanceChargeTypePrepaidPeriod != nil {
		in, out := &in.InstanceChargeTypePrepaidPeriod, &out.InstanceChargeTypePrepaidPeriod
		*out = new(float64)
		**out = **in
	}
	if in.InstanceChargeTypePrepaidRenewFlag != nil {
		in, out := &in.InstanceChargeTypePrepaidRenewFlag, &out.InstanceChargeTypePrepaidRenewFlag
		*out = new(string)
		**out = **in
	}
	if in.InstanceName != nil {
		in, out := &in.InstanceName, &out.InstanceName
		*out = new(string)
		**out = **in
	}
	if in.InstanceType != nil {
		in, out := &in.InstanceType, &out.InstanceType
		*out = new(string)
		**out = **in
	}
	if in.InternetChargeType != nil {
		in, out := &in.InternetChargeType, &out.InternetChargeType
		*out = new(string)
		**out = **in
	}
	if in.InternetMaxBandwidthOut != nil {
		in, out := &in.InternetMaxBandwidthOut, &out.InternetMaxBandwidthOut
		*out = new(float64)
		**out = **in
	}
	if in.KeyIds != nil {
		in, out := &in.KeyIds, &out.KeyIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.PublicIPAssigned != nil {
		in, out := &in.PublicIPAssigned, &out.PublicIPAssigned
		*out = new(bool)
		**out = **in
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.SystemDiskSize != nil {
		in, out := &in.SystemDiskSize, &out.SystemDiskSize
		*out = new(float64)
		**out = **in
	}
	if in.SystemDiskType != nil {
		in, out := &in.SystemDiskType, &out.SystemDiskType
		*out = new(string)
		**out = **in
	}
	if in.UserData != nil {
		in, out := &in.UserData, &out.UserData
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkerConfigParameters.
func (in *WorkerConfigParameters) DeepCopy() *WorkerConfigParameters {
	if in == nil {
		return nil
	}
	out := new(WorkerConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkerConfigTaintsInitParameters) DeepCopyInto(out *WorkerConfigTaintsInitParameters) {
	*out = *in
	if in.Effect != nil {
		in, out := &in.Effect, &out.Effect
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkerConfigTaintsInitParameters.
func (in *WorkerConfigTaintsInitParameters) DeepCopy() *WorkerConfigTaintsInitParameters {
	if in == nil {
		return nil
	}
	out := new(WorkerConfigTaintsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkerConfigTaintsObservation) DeepCopyInto(out *WorkerConfigTaintsObservation) {
	*out = *in
	if in.Effect != nil {
		in, out := &in.Effect, &out.Effect
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkerConfigTaintsObservation.
func (in *WorkerConfigTaintsObservation) DeepCopy() *WorkerConfigTaintsObservation {
	if in == nil {
		return nil
	}
	out := new(WorkerConfigTaintsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkerConfigTaintsParameters) DeepCopyInto(out *WorkerConfigTaintsParameters) {
	*out = *in
	if in.Effect != nil {
		in, out := &in.Effect, &out.Effect
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkerConfigTaintsParameters.
func (in *WorkerConfigTaintsParameters) DeepCopy() *WorkerConfigTaintsParameters {
	if in == nil {
		return nil
	}
	out := new(WorkerConfigTaintsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkerInstancesListInitParameters) DeepCopyInto(out *WorkerInstancesListInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkerInstancesListInitParameters.
func (in *WorkerInstancesListInitParameters) DeepCopy() *WorkerInstancesListInitParameters {
	if in == nil {
		return nil
	}
	out := new(WorkerInstancesListInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkerInstancesListObservation) DeepCopyInto(out *WorkerInstancesListObservation) {
	*out = *in
	if in.FailedReason != nil {
		in, out := &in.FailedReason, &out.FailedReason
		*out = new(string)
		**out = **in
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.InstanceRole != nil {
		in, out := &in.InstanceRole, &out.InstanceRole
		*out = new(string)
		**out = **in
	}
	if in.InstanceState != nil {
		in, out := &in.InstanceState, &out.InstanceState
		*out = new(string)
		**out = **in
	}
	if in.LanIP != nil {
		in, out := &in.LanIP, &out.LanIP
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkerInstancesListObservation.
func (in *WorkerInstancesListObservation) DeepCopy() *WorkerInstancesListObservation {
	if in == nil {
		return nil
	}
	out := new(WorkerInstancesListObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkerInstancesListParameters) DeepCopyInto(out *WorkerInstancesListParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkerInstancesListParameters.
func (in *WorkerInstancesListParameters) DeepCopy() *WorkerInstancesListParameters {
	if in == nil {
		return nil
	}
	out := new(WorkerInstancesListParameters)
	in.DeepCopyInto(out)
	return out
}
