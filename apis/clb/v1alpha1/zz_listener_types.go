/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ListenerInitParameters struct {

	// ID of the client certificate. NOTES: Only supports listeners of HTTPS and TCP_SSL protocol and must be set when the ssl mode is MUTUAL.
	// ID of the client certificate. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL` protocol and must be set when the ssl mode is `MUTUAL`.
	CertificateCAID *string `json:"certificateCaId,omitempty" tf:"certificate_ca_id,omitempty"`

	// ID of the server certificate. NOTES: Only supports listeners of HTTPS and TCP_SSL protocol and must be set when it is available.
	// ID of the server certificate. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL` protocol and must be set when it is available.
	CertificateID *string `json:"certificateId,omitempty" tf:"certificate_id,omitempty"`

	// Type of certificate. Valid values: UNIDIRECTIONAL, MUTUAL. NOTES: Only supports listeners of HTTPS and TCP_SSL protocol and must be set when it is available.
	// Type of certificate. Valid values: `UNIDIRECTIONAL`, `MUTUAL`. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL` protocol and must be set when it is available.
	CertificateSSLMode *string `json:"certificateSslMode,omitempty" tf:"certificate_ssl_mode,omitempty"`

	// ID of the CLB.
	// ID of the CLB.
	// +crossplane:generate:reference:type=Instance
	ClbID *string `json:"clbId,omitempty" tf:"clb_id,omitempty"`

	// Reference to a Instance to populate clbId.
	// +kubebuilder:validation:Optional
	ClbIDRef *v1.Reference `json:"clbIdRef,omitempty" tf:"-"`

	// Selector for a Instance to populate clbId.
	// +kubebuilder:validation:Optional
	ClbIDSelector *v1.Selector `json:"clbIdSelector,omitempty" tf:"-"`

	// This parameter is used to specify the end port and is required when creating a port range listener. Only one member can be passed in when inputting the Ports parameter, which is used to specify the start port. If you want to try the port range feature, please submit a ticket.
	// This parameter is used to specify the end port and is required when creating a port range listener. Only one member can be passed in when inputting the `Ports` parameter, which is used to specify the start port. If you want to try the port range feature, please [submit a ticket](https://console.cloud.tencent.com/workorder/category).
	EndPort *float64 `json:"endPort,omitempty" tf:"end_port,omitempty"`

	// Enable H2C switch for intranet HTTP listener.
	// Enable H2C switch for intranet HTTP listener.
	H2CSwitch *bool `json:"h2cSwitch,omitempty" tf:"h2c_switch,omitempty"`

	// Health check protocol. When the value of health_check_type of the health check protocol is CUSTOM, this field is required, which represents the input format of the health check. Valid values: HEX, TEXT.
	// Health check protocol. When the value of `health_check_type` of the health check protocol is `CUSTOM`, this field is required, which represents the input format of the health check. Valid values: `HEX`, `TEXT`.
	HealthCheckContextType *string `json:"healthCheckContextType,omitempty" tf:"health_check_context_type,omitempty"`

	// HTTP health check code of TCP listener, Valid value ranges: [1~31]. When the value of health_check_type of the health check protocol is HTTP, this field is required. Valid values: 1, 2, 4, 8, 16. 1 means http_1xx, 2 means http_2xx, 4 means http_3xx, 8 means http_4xx, 16 means http_5xx.If you want multiple return codes to indicate health, need to add the corresponding values.
	// HTTP health check code of TCP listener, Valid value ranges: [1~31]. When the value of `health_check_type` of the health check protocol is `HTTP`, this field is required. Valid values: `1`, `2`, `4`, `8`, `16`. `1` means http_1xx, `2` means http_2xx, `4` means http_3xx, `8` means http_4xx, `16` means http_5xx.If you want multiple return codes to indicate health, need to add the corresponding values.
	HealthCheckHTTPCode *float64 `json:"healthCheckHttpCode,omitempty" tf:"health_check_http_code,omitempty"`

	// HTTP health check domain of TCP listener.
	// HTTP health check domain of TCP listener.
	HealthCheckHTTPDomain *string `json:"healthCheckHttpDomain,omitempty" tf:"health_check_http_domain,omitempty"`

	// HTTP health check method of TCP listener. Valid values: HEAD, GET.
	// HTTP health check method of TCP listener. Valid values: `HEAD`, `GET`.
	HealthCheckHTTPMethod *string `json:"healthCheckHttpMethod,omitempty" tf:"health_check_http_method,omitempty"`

	// HTTP health check path of TCP listener.
	// HTTP health check path of TCP listener.
	HealthCheckHTTPPath *string `json:"healthCheckHttpPath,omitempty" tf:"health_check_http_path,omitempty"`

	// The HTTP version of the backend service. When the value of health_check_type of the health check protocol is HTTP, this field is required. Valid values: HTTP/1.0, HTTP/1.1.
	// The HTTP version of the backend service. When the value of `health_check_type` of the health check protocol is `HTTP`, this field is required. Valid values: `HTTP/1.0`, `HTTP/1.1`.
	HealthCheckHTTPVersion *string `json:"healthCheckHttpVersion,omitempty" tf:"health_check_http_version,omitempty"`

	// Health threshold of health check, and the default is 3. If a success result is returned for the health check for 3 consecutive times, the backend CVM is identified as healthy. The value range is 2-10. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
	// Health threshold of health check, and the default is `3`. If a success result is returned for the health check for 3 consecutive times, the backend CVM is identified as healthy. The value range is 2-10. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
	HealthCheckHealthNum *float64 `json:"healthCheckHealthNum,omitempty" tf:"health_check_health_num,omitempty"`

	// Interval time of health check. Valid value ranges: [2~300] sec. and the default is 5 sec. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
	// Interval time of health check. Valid value ranges: [2~300] sec. and the default is 5 sec. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud_clb_listener_rule`.
	HealthCheckIntervalTime *float64 `json:"healthCheckIntervalTime,omitempty" tf:"health_check_interval_time,omitempty"`

	// The health check port is the port of the backend service by default. Unless you want to specify a specific port, it is recommended to leave it blank. Only applicable to TCP/UDP listener.
	// The health check port is the port of the backend service by default. Unless you want to specify a specific port, it is recommended to leave it blank. Only applicable to TCP/UDP listener.
	HealthCheckPort *float64 `json:"healthCheckPort,omitempty" tf:"health_check_port,omitempty"`

	// It represents the result returned by the health check. When the value of health_check_type of the health check protocol is CUSTOM, this field is required. Only ASCII visible characters are allowed and the maximum length is 500. When health_check_context_type value is HEX, the characters of SendContext and RecvContext can only be selected in 0123456789ABCDEF and the length must be even digits.
	// It represents the result returned by the health check. When the value of `health_check_type` of the health check protocol is `CUSTOM`, this field is required. Only ASCII visible characters are allowed and the maximum length is 500. When `health_check_context_type` value is `HEX`, the characters of SendContext and RecvContext can only be selected in `0123456789ABCDEF` and the length must be even digits.
	HealthCheckRecvContext *string `json:"healthCheckRecvContext,omitempty" tf:"health_check_recv_context,omitempty"`

	// It represents the content of the request sent by the health check. When the value of health_check_type of the health check protocol is CUSTOM, this field is required. Only visible ASCII characters are allowed and the maximum length is 500. When health_check_context_type value is HEX, the characters of SendContext and RecvContext can only be selected in 0123456789ABCDEF and the length must be even digits.
	// It represents the content of the request sent by the health check. When the value of `health_check_type` of the health check protocol is `CUSTOM`, this field is required. Only visible ASCII characters are allowed and the maximum length is 500. When `health_check_context_type` value is `HEX`, the characters of SendContext and RecvContext can only be selected in `0123456789ABCDEF` and the length must be even digits.
	HealthCheckSendContext *string `json:"healthCheckSendContext,omitempty" tf:"health_check_send_context,omitempty"`

	// Indicates whether health check is enabled.
	// Indicates whether health check is enabled.
	HealthCheckSwitch *bool `json:"healthCheckSwitch,omitempty" tf:"health_check_switch,omitempty"`

	// Response timeout of health check. Valid value ranges: [2~60] sec. Default is 2 sec. Response timeout needs to be less than check interval. NOTES: Only supports listeners of TCP,UDP,TCP_SSL protocol.
	// Response timeout of health check. Valid value ranges: [2~60] sec. Default is 2 sec. Response timeout needs to be less than check interval. NOTES: Only supports listeners of `TCP`,`UDP`,`TCP_SSL` protocol.
	HealthCheckTimeOut *float64 `json:"healthCheckTimeOut,omitempty" tf:"health_check_time_out,omitempty"`

	// Protocol used for health check. Valid values: CUSTOM, TCP, HTTP,HTTPS, PING, GRPC.
	// Protocol used for health check. Valid values: `CUSTOM`, `TCP`, `HTTP`,`HTTPS`, `PING`, `GRPC`.
	HealthCheckType *string `json:"healthCheckType,omitempty" tf:"health_check_type,omitempty"`

	// Unhealthy threshold of health check, and the default is 3. If a success result is returned for the health check 3 consecutive times, the CVM is identified as unhealthy. The value range is [2-10]. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
	// Unhealthy threshold of health check, and the default is `3`. If a success result is returned for the health check 3 consecutive times, the CVM is identified as unhealthy. The value range is [2-10]. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud_clb_listener_rule`.
	HealthCheckUnhealthNum *float64 `json:"healthCheckUnhealthNum,omitempty" tf:"health_check_unhealth_num,omitempty"`

	// Specifies the type of health check source IP. 0 (default): CLB VIP. 1: 100.64 IP range.
	// Specifies the type of health check source IP. `0` (default): CLB VIP. `1`: 100.64 IP range.
	HealthSourceIPType *float64 `json:"healthSourceIpType,omitempty" tf:"health_source_ip_type,omitempty"`

	// Whether to enable a persistent connection. This parameter is applicable only to HTTP and HTTPS listeners. Valid values: 0 (disable; default value) and 1 (enable).
	// Whether to enable a persistent connection. This parameter is applicable only to HTTP and HTTPS listeners. Valid values: 0 (disable; default value) and 1 (enable).
	KeepaliveEnable *float64 `json:"keepaliveEnable,omitempty" tf:"keepalive_enable,omitempty"`

	// Name of the CLB listener, and available values can only be Chinese characters, English letters, numbers, underscore and hyphen '-'.
	// Name of the CLB listener, and available values can only be Chinese characters, English letters, numbers, underscore and hyphen '-'.
	ListenerName *string `json:"listenerName,omitempty" tf:"listener_name,omitempty"`

	// Certificate information. You can specify multiple server-side certificates with different algorithm types. This parameter is only applicable to HTTPS listeners with the SNI feature not enabled. Certificate and MultiCertInfo cannot be specified at the same time.
	// Certificate information. You can specify multiple server-side certificates with different algorithm types. This parameter is only applicable to HTTPS listeners with the SNI feature not enabled. Certificate and MultiCertInfo cannot be specified at the same time.
	MultiCertInfo []MultiCertInfoInitParameters `json:"multiCertInfo,omitempty" tf:"multi_cert_info,omitempty"`

	// Port of the CLB listener.
	// Port of the CLB listener.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Type of protocol within the listener. Valid values: TCP, UDP, HTTP, HTTPS, TCP_SSL and QUIC.
	// Type of protocol within the listener. Valid values: `TCP`, `UDP`, `HTTP`, `HTTPS`, `TCP_SSL` and `QUIC`.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Scheduling method of the CLB listener, and available values are 'WRR' and 'LEAST_CONN'. The default is 'WRR'. NOTES: The listener of HTTP and HTTPS protocol additionally supports the IP Hash method. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
	// Scheduling method of the CLB listener, and available values are 'WRR' and 'LEAST_CONN'. The default is 'WRR'. NOTES: The listener of `HTTP` and `HTTPS` protocol additionally supports the `IP Hash` method. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud_clb_listener_rule`.
	Scheduler *string `json:"scheduler,omitempty" tf:"scheduler,omitempty"`

	// Time of session persistence within the CLB listener. NOTES: Available when scheduler is specified as WRR, and not available when listener protocol is TCP_SSL. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
	// Time of session persistence within the CLB listener. NOTES: Available when scheduler is specified as `WRR`, and not available when listener protocol is `TCP_SSL`. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud_clb_listener_rule`.
	SessionExpireTime *float64 `json:"sessionExpireTime,omitempty" tf:"session_expire_time,omitempty"`

	// Session persistence type. Valid values: NORMAL: the default session persistence type; QUIC_CID: session persistence by QUIC connection ID. The QUIC_CID value can only be configured in UDP listeners. If this field is not specified, the default session persistence type will be used.
	// Session persistence type. Valid values: `NORMAL`: the default session persistence type; `QUIC_CID`: session persistence by QUIC connection ID. The `QUIC_CID` value can only be configured in UDP listeners. If this field is not specified, the default session persistence type will be used.
	SessionType *string `json:"sessionType,omitempty" tf:"session_type,omitempty"`

	// Whether to enable SNAT.
	// Whether to enable SNAT.
	SnatEnable *bool `json:"snatEnable,omitempty" tf:"snat_enable,omitempty"`

	// Indicates whether SNI is enabled, and only supported with protocol HTTPS. If enabled, you can set a certificate for each rule in tencentcloud_clb_listener_rule, otherwise all rules have a certificate.
	// Indicates whether SNI is enabled, and only supported with protocol `HTTPS`. If enabled, you can set a certificate for each rule in `tencentcloud_clb_listener_rule`, otherwise all rules have a certificate.
	SniSwitch *bool `json:"sniSwitch,omitempty" tf:"sni_switch,omitempty"`

	// Backend target type. Valid values: NODE, TARGETGROUP. NODE means to bind ordinary nodes, TARGETGROUP means to bind target group. NOTES: TCP/UDP/TCP_SSL listener must configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
	// Backend target type. Valid values: `NODE`, `TARGETGROUP`. `NODE` means to bind ordinary nodes, `TARGETGROUP` means to bind target group. NOTES: TCP/UDP/TCP_SSL listener must configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
	TargetType *string `json:"targetType,omitempty" tf:"target_type,omitempty"`
}

type ListenerObservation struct {

	// ID of the client certificate. NOTES: Only supports listeners of HTTPS and TCP_SSL protocol and must be set when the ssl mode is MUTUAL.
	// ID of the client certificate. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL` protocol and must be set when the ssl mode is `MUTUAL`.
	CertificateCAID *string `json:"certificateCaId,omitempty" tf:"certificate_ca_id,omitempty"`

	// ID of the server certificate. NOTES: Only supports listeners of HTTPS and TCP_SSL protocol and must be set when it is available.
	// ID of the server certificate. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL` protocol and must be set when it is available.
	CertificateID *string `json:"certificateId,omitempty" tf:"certificate_id,omitempty"`

	// Type of certificate. Valid values: UNIDIRECTIONAL, MUTUAL. NOTES: Only supports listeners of HTTPS and TCP_SSL protocol and must be set when it is available.
	// Type of certificate. Valid values: `UNIDIRECTIONAL`, `MUTUAL`. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL` protocol and must be set when it is available.
	CertificateSSLMode *string `json:"certificateSslMode,omitempty" tf:"certificate_ssl_mode,omitempty"`

	// ID of the CLB.
	// ID of the CLB.
	ClbID *string `json:"clbId,omitempty" tf:"clb_id,omitempty"`

	// This parameter is used to specify the end port and is required when creating a port range listener. Only one member can be passed in when inputting the Ports parameter, which is used to specify the start port. If you want to try the port range feature, please submit a ticket.
	// This parameter is used to specify the end port and is required when creating a port range listener. Only one member can be passed in when inputting the `Ports` parameter, which is used to specify the start port. If you want to try the port range feature, please [submit a ticket](https://console.cloud.tencent.com/workorder/category).
	EndPort *float64 `json:"endPort,omitempty" tf:"end_port,omitempty"`

	// Enable H2C switch for intranet HTTP listener.
	// Enable H2C switch for intranet HTTP listener.
	H2CSwitch *bool `json:"h2cSwitch,omitempty" tf:"h2c_switch,omitempty"`

	// Health check protocol. When the value of health_check_type of the health check protocol is CUSTOM, this field is required, which represents the input format of the health check. Valid values: HEX, TEXT.
	// Health check protocol. When the value of `health_check_type` of the health check protocol is `CUSTOM`, this field is required, which represents the input format of the health check. Valid values: `HEX`, `TEXT`.
	HealthCheckContextType *string `json:"healthCheckContextType,omitempty" tf:"health_check_context_type,omitempty"`

	// HTTP health check code of TCP listener, Valid value ranges: [1~31]. When the value of health_check_type of the health check protocol is HTTP, this field is required. Valid values: 1, 2, 4, 8, 16. 1 means http_1xx, 2 means http_2xx, 4 means http_3xx, 8 means http_4xx, 16 means http_5xx.If you want multiple return codes to indicate health, need to add the corresponding values.
	// HTTP health check code of TCP listener, Valid value ranges: [1~31]. When the value of `health_check_type` of the health check protocol is `HTTP`, this field is required. Valid values: `1`, `2`, `4`, `8`, `16`. `1` means http_1xx, `2` means http_2xx, `4` means http_3xx, `8` means http_4xx, `16` means http_5xx.If you want multiple return codes to indicate health, need to add the corresponding values.
	HealthCheckHTTPCode *float64 `json:"healthCheckHttpCode,omitempty" tf:"health_check_http_code,omitempty"`

	// HTTP health check domain of TCP listener.
	// HTTP health check domain of TCP listener.
	HealthCheckHTTPDomain *string `json:"healthCheckHttpDomain,omitempty" tf:"health_check_http_domain,omitempty"`

	// HTTP health check method of TCP listener. Valid values: HEAD, GET.
	// HTTP health check method of TCP listener. Valid values: `HEAD`, `GET`.
	HealthCheckHTTPMethod *string `json:"healthCheckHttpMethod,omitempty" tf:"health_check_http_method,omitempty"`

	// HTTP health check path of TCP listener.
	// HTTP health check path of TCP listener.
	HealthCheckHTTPPath *string `json:"healthCheckHttpPath,omitempty" tf:"health_check_http_path,omitempty"`

	// The HTTP version of the backend service. When the value of health_check_type of the health check protocol is HTTP, this field is required. Valid values: HTTP/1.0, HTTP/1.1.
	// The HTTP version of the backend service. When the value of `health_check_type` of the health check protocol is `HTTP`, this field is required. Valid values: `HTTP/1.0`, `HTTP/1.1`.
	HealthCheckHTTPVersion *string `json:"healthCheckHttpVersion,omitempty" tf:"health_check_http_version,omitempty"`

	// Health threshold of health check, and the default is 3. If a success result is returned for the health check for 3 consecutive times, the backend CVM is identified as healthy. The value range is 2-10. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
	// Health threshold of health check, and the default is `3`. If a success result is returned for the health check for 3 consecutive times, the backend CVM is identified as healthy. The value range is 2-10. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
	HealthCheckHealthNum *float64 `json:"healthCheckHealthNum,omitempty" tf:"health_check_health_num,omitempty"`

	// Interval time of health check. Valid value ranges: [2~300] sec. and the default is 5 sec. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
	// Interval time of health check. Valid value ranges: [2~300] sec. and the default is 5 sec. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud_clb_listener_rule`.
	HealthCheckIntervalTime *float64 `json:"healthCheckIntervalTime,omitempty" tf:"health_check_interval_time,omitempty"`

	// The health check port is the port of the backend service by default. Unless you want to specify a specific port, it is recommended to leave it blank. Only applicable to TCP/UDP listener.
	// The health check port is the port of the backend service by default. Unless you want to specify a specific port, it is recommended to leave it blank. Only applicable to TCP/UDP listener.
	HealthCheckPort *float64 `json:"healthCheckPort,omitempty" tf:"health_check_port,omitempty"`

	// It represents the result returned by the health check. When the value of health_check_type of the health check protocol is CUSTOM, this field is required. Only ASCII visible characters are allowed and the maximum length is 500. When health_check_context_type value is HEX, the characters of SendContext and RecvContext can only be selected in 0123456789ABCDEF and the length must be even digits.
	// It represents the result returned by the health check. When the value of `health_check_type` of the health check protocol is `CUSTOM`, this field is required. Only ASCII visible characters are allowed and the maximum length is 500. When `health_check_context_type` value is `HEX`, the characters of SendContext and RecvContext can only be selected in `0123456789ABCDEF` and the length must be even digits.
	HealthCheckRecvContext *string `json:"healthCheckRecvContext,omitempty" tf:"health_check_recv_context,omitempty"`

	// It represents the content of the request sent by the health check. When the value of health_check_type of the health check protocol is CUSTOM, this field is required. Only visible ASCII characters are allowed and the maximum length is 500. When health_check_context_type value is HEX, the characters of SendContext and RecvContext can only be selected in 0123456789ABCDEF and the length must be even digits.
	// It represents the content of the request sent by the health check. When the value of `health_check_type` of the health check protocol is `CUSTOM`, this field is required. Only visible ASCII characters are allowed and the maximum length is 500. When `health_check_context_type` value is `HEX`, the characters of SendContext and RecvContext can only be selected in `0123456789ABCDEF` and the length must be even digits.
	HealthCheckSendContext *string `json:"healthCheckSendContext,omitempty" tf:"health_check_send_context,omitempty"`

	// Indicates whether health check is enabled.
	// Indicates whether health check is enabled.
	HealthCheckSwitch *bool `json:"healthCheckSwitch,omitempty" tf:"health_check_switch,omitempty"`

	// Response timeout of health check. Valid value ranges: [2~60] sec. Default is 2 sec. Response timeout needs to be less than check interval. NOTES: Only supports listeners of TCP,UDP,TCP_SSL protocol.
	// Response timeout of health check. Valid value ranges: [2~60] sec. Default is 2 sec. Response timeout needs to be less than check interval. NOTES: Only supports listeners of `TCP`,`UDP`,`TCP_SSL` protocol.
	HealthCheckTimeOut *float64 `json:"healthCheckTimeOut,omitempty" tf:"health_check_time_out,omitempty"`

	// Protocol used for health check. Valid values: CUSTOM, TCP, HTTP,HTTPS, PING, GRPC.
	// Protocol used for health check. Valid values: `CUSTOM`, `TCP`, `HTTP`,`HTTPS`, `PING`, `GRPC`.
	HealthCheckType *string `json:"healthCheckType,omitempty" tf:"health_check_type,omitempty"`

	// Unhealthy threshold of health check, and the default is 3. If a success result is returned for the health check 3 consecutive times, the CVM is identified as unhealthy. The value range is [2-10]. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
	// Unhealthy threshold of health check, and the default is `3`. If a success result is returned for the health check 3 consecutive times, the CVM is identified as unhealthy. The value range is [2-10]. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud_clb_listener_rule`.
	HealthCheckUnhealthNum *float64 `json:"healthCheckUnhealthNum,omitempty" tf:"health_check_unhealth_num,omitempty"`

	// Specifies the type of health check source IP. 0 (default): CLB VIP. 1: 100.64 IP range.
	// Specifies the type of health check source IP. `0` (default): CLB VIP. `1`: 100.64 IP range.
	HealthSourceIPType *float64 `json:"healthSourceIpType,omitempty" tf:"health_source_ip_type,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Whether to enable a persistent connection. This parameter is applicable only to HTTP and HTTPS listeners. Valid values: 0 (disable; default value) and 1 (enable).
	// Whether to enable a persistent connection. This parameter is applicable only to HTTP and HTTPS listeners. Valid values: 0 (disable; default value) and 1 (enable).
	KeepaliveEnable *float64 `json:"keepaliveEnable,omitempty" tf:"keepalive_enable,omitempty"`

	// ID of this CLB listener.
	// ID of this CLB listener.
	ListenerID *string `json:"listenerId,omitempty" tf:"listener_id,omitempty"`

	// Name of the CLB listener, and available values can only be Chinese characters, English letters, numbers, underscore and hyphen '-'.
	// Name of the CLB listener, and available values can only be Chinese characters, English letters, numbers, underscore and hyphen '-'.
	ListenerName *string `json:"listenerName,omitempty" tf:"listener_name,omitempty"`

	// Certificate information. You can specify multiple server-side certificates with different algorithm types. This parameter is only applicable to HTTPS listeners with the SNI feature not enabled. Certificate and MultiCertInfo cannot be specified at the same time.
	// Certificate information. You can specify multiple server-side certificates with different algorithm types. This parameter is only applicable to HTTPS listeners with the SNI feature not enabled. Certificate and MultiCertInfo cannot be specified at the same time.
	MultiCertInfo []MultiCertInfoObservation `json:"multiCertInfo,omitempty" tf:"multi_cert_info,omitempty"`

	// Port of the CLB listener.
	// Port of the CLB listener.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Type of protocol within the listener. Valid values: TCP, UDP, HTTP, HTTPS, TCP_SSL and QUIC.
	// Type of protocol within the listener. Valid values: `TCP`, `UDP`, `HTTP`, `HTTPS`, `TCP_SSL` and `QUIC`.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Scheduling method of the CLB listener, and available values are 'WRR' and 'LEAST_CONN'. The default is 'WRR'. NOTES: The listener of HTTP and HTTPS protocol additionally supports the IP Hash method. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
	// Scheduling method of the CLB listener, and available values are 'WRR' and 'LEAST_CONN'. The default is 'WRR'. NOTES: The listener of `HTTP` and `HTTPS` protocol additionally supports the `IP Hash` method. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud_clb_listener_rule`.
	Scheduler *string `json:"scheduler,omitempty" tf:"scheduler,omitempty"`

	// Time of session persistence within the CLB listener. NOTES: Available when scheduler is specified as WRR, and not available when listener protocol is TCP_SSL. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
	// Time of session persistence within the CLB listener. NOTES: Available when scheduler is specified as `WRR`, and not available when listener protocol is `TCP_SSL`. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud_clb_listener_rule`.
	SessionExpireTime *float64 `json:"sessionExpireTime,omitempty" tf:"session_expire_time,omitempty"`

	// Session persistence type. Valid values: NORMAL: the default session persistence type; QUIC_CID: session persistence by QUIC connection ID. The QUIC_CID value can only be configured in UDP listeners. If this field is not specified, the default session persistence type will be used.
	// Session persistence type. Valid values: `NORMAL`: the default session persistence type; `QUIC_CID`: session persistence by QUIC connection ID. The `QUIC_CID` value can only be configured in UDP listeners. If this field is not specified, the default session persistence type will be used.
	SessionType *string `json:"sessionType,omitempty" tf:"session_type,omitempty"`

	// Whether to enable SNAT.
	// Whether to enable SNAT.
	SnatEnable *bool `json:"snatEnable,omitempty" tf:"snat_enable,omitempty"`

	// Indicates whether SNI is enabled, and only supported with protocol HTTPS. If enabled, you can set a certificate for each rule in tencentcloud_clb_listener_rule, otherwise all rules have a certificate.
	// Indicates whether SNI is enabled, and only supported with protocol `HTTPS`. If enabled, you can set a certificate for each rule in `tencentcloud_clb_listener_rule`, otherwise all rules have a certificate.
	SniSwitch *bool `json:"sniSwitch,omitempty" tf:"sni_switch,omitempty"`

	// Backend target type. Valid values: NODE, TARGETGROUP. NODE means to bind ordinary nodes, TARGETGROUP means to bind target group. NOTES: TCP/UDP/TCP_SSL listener must configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
	// Backend target type. Valid values: `NODE`, `TARGETGROUP`. `NODE` means to bind ordinary nodes, `TARGETGROUP` means to bind target group. NOTES: TCP/UDP/TCP_SSL listener must configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
	TargetType *string `json:"targetType,omitempty" tf:"target_type,omitempty"`
}

type ListenerParameters struct {

	// ID of the client certificate. NOTES: Only supports listeners of HTTPS and TCP_SSL protocol and must be set when the ssl mode is MUTUAL.
	// ID of the client certificate. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL` protocol and must be set when the ssl mode is `MUTUAL`.
	// +kubebuilder:validation:Optional
	CertificateCAID *string `json:"certificateCaId,omitempty" tf:"certificate_ca_id,omitempty"`

	// ID of the server certificate. NOTES: Only supports listeners of HTTPS and TCP_SSL protocol and must be set when it is available.
	// ID of the server certificate. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL` protocol and must be set when it is available.
	// +kubebuilder:validation:Optional
	CertificateID *string `json:"certificateId,omitempty" tf:"certificate_id,omitempty"`

	// Type of certificate. Valid values: UNIDIRECTIONAL, MUTUAL. NOTES: Only supports listeners of HTTPS and TCP_SSL protocol and must be set when it is available.
	// Type of certificate. Valid values: `UNIDIRECTIONAL`, `MUTUAL`. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL` protocol and must be set when it is available.
	// +kubebuilder:validation:Optional
	CertificateSSLMode *string `json:"certificateSslMode,omitempty" tf:"certificate_ssl_mode,omitempty"`

	// ID of the CLB.
	// ID of the CLB.
	// +crossplane:generate:reference:type=Instance
	// +kubebuilder:validation:Optional
	ClbID *string `json:"clbId,omitempty" tf:"clb_id,omitempty"`

	// Reference to a Instance to populate clbId.
	// +kubebuilder:validation:Optional
	ClbIDRef *v1.Reference `json:"clbIdRef,omitempty" tf:"-"`

	// Selector for a Instance to populate clbId.
	// +kubebuilder:validation:Optional
	ClbIDSelector *v1.Selector `json:"clbIdSelector,omitempty" tf:"-"`

	// This parameter is used to specify the end port and is required when creating a port range listener. Only one member can be passed in when inputting the Ports parameter, which is used to specify the start port. If you want to try the port range feature, please submit a ticket.
	// This parameter is used to specify the end port and is required when creating a port range listener. Only one member can be passed in when inputting the `Ports` parameter, which is used to specify the start port. If you want to try the port range feature, please [submit a ticket](https://console.cloud.tencent.com/workorder/category).
	// +kubebuilder:validation:Optional
	EndPort *float64 `json:"endPort,omitempty" tf:"end_port,omitempty"`

	// Enable H2C switch for intranet HTTP listener.
	// Enable H2C switch for intranet HTTP listener.
	// +kubebuilder:validation:Optional
	H2CSwitch *bool `json:"h2cSwitch,omitempty" tf:"h2c_switch,omitempty"`

	// Health check protocol. When the value of health_check_type of the health check protocol is CUSTOM, this field is required, which represents the input format of the health check. Valid values: HEX, TEXT.
	// Health check protocol. When the value of `health_check_type` of the health check protocol is `CUSTOM`, this field is required, which represents the input format of the health check. Valid values: `HEX`, `TEXT`.
	// +kubebuilder:validation:Optional
	HealthCheckContextType *string `json:"healthCheckContextType,omitempty" tf:"health_check_context_type,omitempty"`

	// HTTP health check code of TCP listener, Valid value ranges: [1~31]. When the value of health_check_type of the health check protocol is HTTP, this field is required. Valid values: 1, 2, 4, 8, 16. 1 means http_1xx, 2 means http_2xx, 4 means http_3xx, 8 means http_4xx, 16 means http_5xx.If you want multiple return codes to indicate health, need to add the corresponding values.
	// HTTP health check code of TCP listener, Valid value ranges: [1~31]. When the value of `health_check_type` of the health check protocol is `HTTP`, this field is required. Valid values: `1`, `2`, `4`, `8`, `16`. `1` means http_1xx, `2` means http_2xx, `4` means http_3xx, `8` means http_4xx, `16` means http_5xx.If you want multiple return codes to indicate health, need to add the corresponding values.
	// +kubebuilder:validation:Optional
	HealthCheckHTTPCode *float64 `json:"healthCheckHttpCode,omitempty" tf:"health_check_http_code,omitempty"`

	// HTTP health check domain of TCP listener.
	// HTTP health check domain of TCP listener.
	// +kubebuilder:validation:Optional
	HealthCheckHTTPDomain *string `json:"healthCheckHttpDomain,omitempty" tf:"health_check_http_domain,omitempty"`

	// HTTP health check method of TCP listener. Valid values: HEAD, GET.
	// HTTP health check method of TCP listener. Valid values: `HEAD`, `GET`.
	// +kubebuilder:validation:Optional
	HealthCheckHTTPMethod *string `json:"healthCheckHttpMethod,omitempty" tf:"health_check_http_method,omitempty"`

	// HTTP health check path of TCP listener.
	// HTTP health check path of TCP listener.
	// +kubebuilder:validation:Optional
	HealthCheckHTTPPath *string `json:"healthCheckHttpPath,omitempty" tf:"health_check_http_path,omitempty"`

	// The HTTP version of the backend service. When the value of health_check_type of the health check protocol is HTTP, this field is required. Valid values: HTTP/1.0, HTTP/1.1.
	// The HTTP version of the backend service. When the value of `health_check_type` of the health check protocol is `HTTP`, this field is required. Valid values: `HTTP/1.0`, `HTTP/1.1`.
	// +kubebuilder:validation:Optional
	HealthCheckHTTPVersion *string `json:"healthCheckHttpVersion,omitempty" tf:"health_check_http_version,omitempty"`

	// Health threshold of health check, and the default is 3. If a success result is returned for the health check for 3 consecutive times, the backend CVM is identified as healthy. The value range is 2-10. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
	// Health threshold of health check, and the default is `3`. If a success result is returned for the health check for 3 consecutive times, the backend CVM is identified as healthy. The value range is 2-10. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
	// +kubebuilder:validation:Optional
	HealthCheckHealthNum *float64 `json:"healthCheckHealthNum,omitempty" tf:"health_check_health_num,omitempty"`

	// Interval time of health check. Valid value ranges: [2~300] sec. and the default is 5 sec. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
	// Interval time of health check. Valid value ranges: [2~300] sec. and the default is 5 sec. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud_clb_listener_rule`.
	// +kubebuilder:validation:Optional
	HealthCheckIntervalTime *float64 `json:"healthCheckIntervalTime,omitempty" tf:"health_check_interval_time,omitempty"`

	// The health check port is the port of the backend service by default. Unless you want to specify a specific port, it is recommended to leave it blank. Only applicable to TCP/UDP listener.
	// The health check port is the port of the backend service by default. Unless you want to specify a specific port, it is recommended to leave it blank. Only applicable to TCP/UDP listener.
	// +kubebuilder:validation:Optional
	HealthCheckPort *float64 `json:"healthCheckPort,omitempty" tf:"health_check_port,omitempty"`

	// It represents the result returned by the health check. When the value of health_check_type of the health check protocol is CUSTOM, this field is required. Only ASCII visible characters are allowed and the maximum length is 500. When health_check_context_type value is HEX, the characters of SendContext and RecvContext can only be selected in 0123456789ABCDEF and the length must be even digits.
	// It represents the result returned by the health check. When the value of `health_check_type` of the health check protocol is `CUSTOM`, this field is required. Only ASCII visible characters are allowed and the maximum length is 500. When `health_check_context_type` value is `HEX`, the characters of SendContext and RecvContext can only be selected in `0123456789ABCDEF` and the length must be even digits.
	// +kubebuilder:validation:Optional
	HealthCheckRecvContext *string `json:"healthCheckRecvContext,omitempty" tf:"health_check_recv_context,omitempty"`

	// It represents the content of the request sent by the health check. When the value of health_check_type of the health check protocol is CUSTOM, this field is required. Only visible ASCII characters are allowed and the maximum length is 500. When health_check_context_type value is HEX, the characters of SendContext and RecvContext can only be selected in 0123456789ABCDEF and the length must be even digits.
	// It represents the content of the request sent by the health check. When the value of `health_check_type` of the health check protocol is `CUSTOM`, this field is required. Only visible ASCII characters are allowed and the maximum length is 500. When `health_check_context_type` value is `HEX`, the characters of SendContext and RecvContext can only be selected in `0123456789ABCDEF` and the length must be even digits.
	// +kubebuilder:validation:Optional
	HealthCheckSendContext *string `json:"healthCheckSendContext,omitempty" tf:"health_check_send_context,omitempty"`

	// Indicates whether health check is enabled.
	// Indicates whether health check is enabled.
	// +kubebuilder:validation:Optional
	HealthCheckSwitch *bool `json:"healthCheckSwitch,omitempty" tf:"health_check_switch,omitempty"`

	// Response timeout of health check. Valid value ranges: [2~60] sec. Default is 2 sec. Response timeout needs to be less than check interval. NOTES: Only supports listeners of TCP,UDP,TCP_SSL protocol.
	// Response timeout of health check. Valid value ranges: [2~60] sec. Default is 2 sec. Response timeout needs to be less than check interval. NOTES: Only supports listeners of `TCP`,`UDP`,`TCP_SSL` protocol.
	// +kubebuilder:validation:Optional
	HealthCheckTimeOut *float64 `json:"healthCheckTimeOut,omitempty" tf:"health_check_time_out,omitempty"`

	// Protocol used for health check. Valid values: CUSTOM, TCP, HTTP,HTTPS, PING, GRPC.
	// Protocol used for health check. Valid values: `CUSTOM`, `TCP`, `HTTP`,`HTTPS`, `PING`, `GRPC`.
	// +kubebuilder:validation:Optional
	HealthCheckType *string `json:"healthCheckType,omitempty" tf:"health_check_type,omitempty"`

	// Unhealthy threshold of health check, and the default is 3. If a success result is returned for the health check 3 consecutive times, the CVM is identified as unhealthy. The value range is [2-10]. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
	// Unhealthy threshold of health check, and the default is `3`. If a success result is returned for the health check 3 consecutive times, the CVM is identified as unhealthy. The value range is [2-10]. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud_clb_listener_rule`.
	// +kubebuilder:validation:Optional
	HealthCheckUnhealthNum *float64 `json:"healthCheckUnhealthNum,omitempty" tf:"health_check_unhealth_num,omitempty"`

	// Specifies the type of health check source IP. 0 (default): CLB VIP. 1: 100.64 IP range.
	// Specifies the type of health check source IP. `0` (default): CLB VIP. `1`: 100.64 IP range.
	// +kubebuilder:validation:Optional
	HealthSourceIPType *float64 `json:"healthSourceIpType,omitempty" tf:"health_source_ip_type,omitempty"`

	// Whether to enable a persistent connection. This parameter is applicable only to HTTP and HTTPS listeners. Valid values: 0 (disable; default value) and 1 (enable).
	// Whether to enable a persistent connection. This parameter is applicable only to HTTP and HTTPS listeners. Valid values: 0 (disable; default value) and 1 (enable).
	// +kubebuilder:validation:Optional
	KeepaliveEnable *float64 `json:"keepaliveEnable,omitempty" tf:"keepalive_enable,omitempty"`

	// Name of the CLB listener, and available values can only be Chinese characters, English letters, numbers, underscore and hyphen '-'.
	// Name of the CLB listener, and available values can only be Chinese characters, English letters, numbers, underscore and hyphen '-'.
	// +kubebuilder:validation:Optional
	ListenerName *string `json:"listenerName,omitempty" tf:"listener_name,omitempty"`

	// Certificate information. You can specify multiple server-side certificates with different algorithm types. This parameter is only applicable to HTTPS listeners with the SNI feature not enabled. Certificate and MultiCertInfo cannot be specified at the same time.
	// Certificate information. You can specify multiple server-side certificates with different algorithm types. This parameter is only applicable to HTTPS listeners with the SNI feature not enabled. Certificate and MultiCertInfo cannot be specified at the same time.
	// +kubebuilder:validation:Optional
	MultiCertInfo []MultiCertInfoParameters `json:"multiCertInfo,omitempty" tf:"multi_cert_info,omitempty"`

	// Port of the CLB listener.
	// Port of the CLB listener.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Type of protocol within the listener. Valid values: TCP, UDP, HTTP, HTTPS, TCP_SSL and QUIC.
	// Type of protocol within the listener. Valid values: `TCP`, `UDP`, `HTTP`, `HTTPS`, `TCP_SSL` and `QUIC`.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Scheduling method of the CLB listener, and available values are 'WRR' and 'LEAST_CONN'. The default is 'WRR'. NOTES: The listener of HTTP and HTTPS protocol additionally supports the IP Hash method. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
	// Scheduling method of the CLB listener, and available values are 'WRR' and 'LEAST_CONN'. The default is 'WRR'. NOTES: The listener of `HTTP` and `HTTPS` protocol additionally supports the `IP Hash` method. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud_clb_listener_rule`.
	// +kubebuilder:validation:Optional
	Scheduler *string `json:"scheduler,omitempty" tf:"scheduler,omitempty"`

	// Time of session persistence within the CLB listener. NOTES: Available when scheduler is specified as WRR, and not available when listener protocol is TCP_SSL. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
	// Time of session persistence within the CLB listener. NOTES: Available when scheduler is specified as `WRR`, and not available when listener protocol is `TCP_SSL`. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud_clb_listener_rule`.
	// +kubebuilder:validation:Optional
	SessionExpireTime *float64 `json:"sessionExpireTime,omitempty" tf:"session_expire_time,omitempty"`

	// Session persistence type. Valid values: NORMAL: the default session persistence type; QUIC_CID: session persistence by QUIC connection ID. The QUIC_CID value can only be configured in UDP listeners. If this field is not specified, the default session persistence type will be used.
	// Session persistence type. Valid values: `NORMAL`: the default session persistence type; `QUIC_CID`: session persistence by QUIC connection ID. The `QUIC_CID` value can only be configured in UDP listeners. If this field is not specified, the default session persistence type will be used.
	// +kubebuilder:validation:Optional
	SessionType *string `json:"sessionType,omitempty" tf:"session_type,omitempty"`

	// Whether to enable SNAT.
	// Whether to enable SNAT.
	// +kubebuilder:validation:Optional
	SnatEnable *bool `json:"snatEnable,omitempty" tf:"snat_enable,omitempty"`

	// Indicates whether SNI is enabled, and only supported with protocol HTTPS. If enabled, you can set a certificate for each rule in tencentcloud_clb_listener_rule, otherwise all rules have a certificate.
	// Indicates whether SNI is enabled, and only supported with protocol `HTTPS`. If enabled, you can set a certificate for each rule in `tencentcloud_clb_listener_rule`, otherwise all rules have a certificate.
	// +kubebuilder:validation:Optional
	SniSwitch *bool `json:"sniSwitch,omitempty" tf:"sni_switch,omitempty"`

	// Backend target type. Valid values: NODE, TARGETGROUP. NODE means to bind ordinary nodes, TARGETGROUP means to bind target group. NOTES: TCP/UDP/TCP_SSL listener must configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
	// Backend target type. Valid values: `NODE`, `TARGETGROUP`. `NODE` means to bind ordinary nodes, `TARGETGROUP` means to bind target group. NOTES: TCP/UDP/TCP_SSL listener must configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
	// +kubebuilder:validation:Optional
	TargetType *string `json:"targetType,omitempty" tf:"target_type,omitempty"`
}

type MultiCertInfoInitParameters struct {

	// List of server certificate ID.
	// List of server certificate ID.
	// +listType=set
	CertIDList []*string `json:"certIdList,omitempty" tf:"cert_id_list,omitempty"`

	// Authentication type. Values: UNIDIRECTIONAL (one-way authentication), MUTUAL (two-way authentication).
	// Authentication type. Values: UNIDIRECTIONAL (one-way authentication), MUTUAL (two-way authentication).
	SSLMode *string `json:"sslMode,omitempty" tf:"ssl_mode,omitempty"`
}

type MultiCertInfoObservation struct {

	// List of server certificate ID.
	// List of server certificate ID.
	// +listType=set
	CertIDList []*string `json:"certIdList,omitempty" tf:"cert_id_list,omitempty"`

	// Authentication type. Values: UNIDIRECTIONAL (one-way authentication), MUTUAL (two-way authentication).
	// Authentication type. Values: UNIDIRECTIONAL (one-way authentication), MUTUAL (two-way authentication).
	SSLMode *string `json:"sslMode,omitempty" tf:"ssl_mode,omitempty"`
}

type MultiCertInfoParameters struct {

	// List of server certificate ID.
	// List of server certificate ID.
	// +kubebuilder:validation:Optional
	// +listType=set
	CertIDList []*string `json:"certIdList" tf:"cert_id_list,omitempty"`

	// Authentication type. Values: UNIDIRECTIONAL (one-way authentication), MUTUAL (two-way authentication).
	// Authentication type. Values: UNIDIRECTIONAL (one-way authentication), MUTUAL (two-way authentication).
	// +kubebuilder:validation:Optional
	SSLMode *string `json:"sslMode" tf:"ssl_mode,omitempty"`
}

// ListenerSpec defines the desired state of Listener
type ListenerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ListenerParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ListenerInitParameters `json:"initProvider,omitempty"`
}

// ListenerStatus defines the observed state of Listener.
type ListenerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ListenerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Listener is the Schema for the Listeners API. Provides a resource to create a CLB listener.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type Listener struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.listenerName) || (has(self.initProvider) && has(self.initProvider.listenerName))",message="spec.forProvider.listenerName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.protocol) || (has(self.initProvider) && has(self.initProvider.protocol))",message="spec.forProvider.protocol is a required parameter"
	Spec   ListenerSpec   `json:"spec"`
	Status ListenerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ListenerList contains a list of Listeners
type ListenerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Listener `json:"items"`
}

// Repository type metadata.
var (
	Listener_Kind             = "Listener"
	Listener_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Listener_Kind}.String()
	Listener_KindAPIVersion   = Listener_Kind + "." + CRDGroupVersion.String()
	Listener_GroupVersionKind = CRDGroupVersion.WithKind(Listener_Kind)
)

func init() {
	SchemeBuilder.Register(&Listener{}, &ListenerList{})
}
